(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression SharedArrayBuffer) == (singleExpression ArrayBuffer))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "SharedArrayBuffer and ArrayBuffer should be distinct"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression SharedArrayBuffer) . (identifierName prototype)) == (singleExpression (singleExpression ArrayBuffer) . (identifierName prototype)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "SharedArrayBuffer.prototype and ArrayBuffer.prototype should be distinct"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SharedArrayBuffer) . (identifierName prototype)) . (identifierName __proto__)) != (singleExpression (singleExpression Object) . (identifierName prototype)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "SharedArrayBuffer.prototype.__proto__ should be Object.prototype"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) ))) instanceof (singleExpression SharedArrayBuffer)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "SharedArrayBuffer should be an instance of SharedArrayBuffer"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) ))) instanceof (singleExpression ArrayBuffer)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "ArrayBuffer should be an instance of ArrayBuffer"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression new (singleExpression (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) ))) instanceof (singleExpression ArrayBuffer)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "SharedArrayBuffer should not be an instance of ArrayBuffer"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression new (singleExpression (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) ))) instanceof (singleExpression SharedArrayBuffer)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "ArrayBuffer should not be an instance of SharedArrayBuffer"))) ))))) (eos ;)))))) (sourceElement (statement (functionDeclaration function checkAtomics ( (formalParameterList (formalParameterArg (assignable name)) , (formalParameterArg (assignable count))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression Atomics) [ (expressionSequence (singleExpression name)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Missing Atomics.")) + (singleExpression name))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Atomics) [ (expressionSequence (singleExpression name)) ]) . (identifierName length)) != (singleExpression count))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Atomics.")) + (singleExpression name)) + (singleExpression (literal " should have length "))) + (singleExpression count)) + (singleExpression (literal " but has length "))) + (singleExpression (singleExpression (singleExpression Atomics) [ (expressionSequence (singleExpression name)) ]) . (identifierName length)))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "add"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "and"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "compareExchange"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "exchange"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "isLockFree"))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "load"))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "or"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "store"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "sub"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "wait"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "wake"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkAtomics) (arguments ( (argument (singleExpression (literal "xor"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i8a) = (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i16a) = (singleExpression new (singleExpression (singleExpression Int16Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i32a) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u8a) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u8ca) = (singleExpression new (singleExpression (singleExpression Uint8ClampedArray) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u16a) = (singleExpression new (singleExpression (singleExpression Uint16Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u32a) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f32a) = (singleExpression new (singleExpression (singleExpression Float32Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f64a) = (singleExpression new (singleExpression (singleExpression Float64Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldFail ( (formalParameterList (formalParameterArg (assignable f)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName name)) == (singleExpression (singleExpression name) . (identifierName name)))) ) (statement (returnStatement return (eos ;))))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) + (singleExpression (literal " threw the wrong error: "))) + (singleExpression e))) ))))) (eos ;)))) }))))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression f) + (singleExpression (literal " succeeded!")))) ))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression bad) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 0.5)))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( )))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal "hello"))) , (arrayElement (singleExpression dv)) , (arrayElement (singleExpression u8ca)) , (arrayElement (singleExpression f32a)) , (arrayElement (singleExpression f64a))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName add)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName and)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName compareExchange)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName exchange)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName load)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName or)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName store)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName sub)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName xor)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (singleExpression bad) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 0.5)))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( )))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal "hello"))) , (arrayElement (singleExpression dv)) , (arrayElement (singleExpression i8a)) , (arrayElement (singleExpression i16a)) , (arrayElement (singleExpression u8a)) , (arrayElement (singleExpression u8ca)) , (arrayElement (singleExpression u16a)) , (arrayElement (singleExpression u32a)) , (arrayElement (singleExpression f32a)) , (arrayElement (singleExpression f64a))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName wait)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName wake)) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (singleExpression idx) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1000000000000))))) , (arrayElement (singleExpression (literal (numericLiteral 10000)))) , (arrayElement (singleExpression (literal (numericLiteral 10000000000000)))) , (arrayElement (singleExpression (literal "hello")))) ]))) ) (statement (block { (statementList (statement (iterationStatement for ( (singleExpression a) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression i8a)) , (arrayElement (singleExpression i16a)) , (arrayElement (singleExpression i32a)) , (arrayElement (singleExpression u8a)) , (arrayElement (singleExpression u16a)) , (arrayElement (singleExpression u32a))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName add)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName and)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName compareExchange)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName exchange)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName load)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName or)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName store)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName sub)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName xor)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName wait)) (arguments ( (argument (singleExpression i32a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Atomics) . (identifierName wake)) (arguments ( (argument (singleExpression i32a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function runAtomic ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable init)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable args)) , (formalParameterArg (assignable expectedResult)) , (formalParameterArg (assignable expectedOutcome))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ]) = (singleExpression init))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression Atomics) [ (expressionSequence (singleExpression name)) ]) (arguments ( (argument (singleExpression array)) , (argument (singleExpression index)) , (argument ... (singleExpression args)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression expectedResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected Atomics.")) + (singleExpression name)) + (singleExpression (literal "(array, "))) + (singleExpression index)) + (singleExpression (literal ", "))) + (singleExpression (singleExpression (singleExpression args) . (identifierName join)) (arguments ( (argument (singleExpression (literal ", "))) )))) + (singleExpression (literal ") to return "))) + (singleExpression expectedResult)) + (singleExpression (literal " but returned "))) + (singleExpression result)) + (singleExpression (literal " for "))) + (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName apply)) (arguments ( (argument (singleExpression array)) ))))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ]) !== (singleExpression expectedOutcome))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected Atomics.")) + (singleExpression name)) + (singleExpression (literal "(array, "))) + (singleExpression index)) + (singleExpression (literal ", "))) + (singleExpression (singleExpression (singleExpression args) . (identifierName join)) (arguments ( (argument (singleExpression (literal ", "))) )))) + (singleExpression (literal ") to result in array["))) + (singleExpression index)) + (singleExpression (literal "] = "))) + (singleExpression expectedOutcome)) + (singleExpression (literal " but got "))) + (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ])) + (singleExpression (literal " for "))) + (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName apply)) (arguments ( (argument (singleExpression array)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression a) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression i8a)) , (arrayElement (singleExpression i16a)) , (arrayElement (singleExpression i32a)) , (arrayElement (singleExpression u8a)) , (arrayElement (singleExpression u16a)) , (arrayElement (singleExpression u32a))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "add"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 55)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "and"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 8)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "compareExchange"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 25)))) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 13)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "compareExchange"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 13)))) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "exchange"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "load"))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 13)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "or"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 47)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "store"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal "sub"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 13))))) ]))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 29)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "xor"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 39)))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression i32a) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression Atomics) . (identifierName wait)) (arguments ( (argument (singleExpression i32a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal "not-equal")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result from Atomics.wait: ")) + (singleExpression result))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (singleExpression timeout) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 10))))) ]))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression Atomics) . (identifierName wait)) (arguments ( (argument (singleExpression i32a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression timeout)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal "timed-out")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result from Atomics.wait: ")) + (singleExpression result))) (eos ;)))))) })))))) <EOF>)