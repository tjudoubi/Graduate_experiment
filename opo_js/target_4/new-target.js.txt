(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable passed) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "new.target;"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal false)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression passed)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "new.target cannot be called in global scope"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval(\"eval('new.target;')\")"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal false)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression passed)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "new.target cannot be called in global scope"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) !== (singleExpression expected)) && (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression expected) !== (singleExpression expected)) && (singleExpression (singleExpression result) !== (singleExpression result)))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: ")) + (singleExpression message)) + (singleExpression (literal ". was: "))) + (singleExpression result)) + (singleExpression (literal " wanted: "))) + (singleExpression expected))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function call ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "new.target should be undefined in a function call"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function Constructor ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression Constructor)) , (argument (singleExpression (literal "new.target should be the same as constructor"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function subCall ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "new.target should be undefined in a sub function call"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subCall) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function SubConstructor ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression SubConstructor)) , (argument (singleExpression (literal "new.target should be subConstructor"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression SubConstructor) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Constructor) (arguments ( ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function doWeirdThings ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression new . target)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression arg)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression (singleExpression new . target) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression new (singleExpression (singleExpression new . target) (arguments ( (argument (singleExpression (literal true))) )))))) (eos ;)))))) })) else (statement (returnStatement return (expressionSequence (singleExpression arg)) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression doWeirdThings) (arguments ( (argument (singleExpression (literal false))) ))) . (identifierName value)) . (identifierName value)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal "calling new on new.target did something weird"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class SuperClass (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName target)) = (singleExpression new . target))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class SubClass (classTail extends (singleExpression SuperClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression SuperClass) (arguments ( ))) . (identifierName target)))) , (argument (singleExpression SuperClass)) , (argument (singleExpression (literal "new.target should be the same as the class constructor"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression SubClass) (arguments ( ))) . (identifierName target)))) , (argument (singleExpression SubClass)) , (argument (singleExpression (literal "new.target should not change when passed through super()"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class A (classTail { })))) (sourceElement (statement (classDeclaration class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName target)) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'new.target'))) ))))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class C (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName target)) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('new.target')"))) ))))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class D (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName target)) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('(function () { return new.target; })()')"))) ))))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression B) (arguments ( ))) . (identifierName target)))) , (argument (singleExpression B)) , (argument (singleExpression (literal "new.target should be the same in eval as without eval"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression C) (arguments ( ))) . (identifierName target)))) , (argument (singleExpression C)) , (argument (singleExpression (literal "new.target should be the same in double eval as without eval"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression D) (arguments ( ))) . (identifierName target)))) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "new.target should be the same in double eval as without eval"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newTargetInEval) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable klass) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'new.target'))) ))))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression klass) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression result)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "new.target should be the same in eval as without eval"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression klass) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression result)) , (argument (singleExpression klass)) , (argument (singleExpression (literal "new.target should be the same in eval as without eval"))) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression newTargetInEval) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newTargetInFunctionInEval) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable klass) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal '(function () { return new.target;})()'))) ))))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression klass) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression result)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "new.target should be the same in eval as without eval"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression klass) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression result)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "new.target should be the same in eval as without eval"))) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression newTargetInFunctionInEval) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testUnaryOps ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result))) (eos ;)))) (sourceElement (statement (functionDeclaration function call ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function construct ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression f) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function unaryExclamation ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression ! (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryExclamation)) )))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "`!new.target` should be false when new.target is not undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryExclamation)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`!new.target` should be true when new.target is undefined"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function unaryBitwiseNot ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression ~ (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryBitwiseNot)) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal "`~new.target` should be -1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryBitwiseNot)) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal "`~new.target` should be -1"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function unaryTypeof ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression typeof (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryTypeof)) )))) , (argument (singleExpression (literal "function"))) , (argument (singleExpression (literal "`typeof new.target` should be 'function' when new.target is not undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryTypeof)) )))) , (argument (singleExpression (literal "undefined"))) , (argument (singleExpression (literal "`typeof new.target` should be 'undefined' when new.target is undefined"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function unaryVoid ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression void (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryVoid)) )))) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "`void new.target` should be undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryVoid)) )))) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "`void new.target` should be undefined"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function unaryAbs ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression + (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryAbs)) )))) , (argument (singleExpression NaN)) , (argument (singleExpression (literal "+new.target should be NaN"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryAbs)) )))) , (argument (singleExpression NaN)) , (argument (singleExpression (literal "+new.target should be NaN"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function unaryNeg ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression - (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryNeg)) )))) , (argument (singleExpression NaN)) , (argument (singleExpression (literal "-new.target should be NaN"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryNeg)) )))) , (argument (singleExpression NaN)) , (argument (singleExpression (literal "-new.target should be NaN"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function unaryDelete ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function strictUnaryDelete ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression new . target)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryDelete)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target` should be true"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryDelete)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target` should be true"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression strictUnaryDelete)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target` should be true"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression call) (arguments ( (argument (singleExpression strictUnaryDelete)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target` should be true"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable unaryDeleteProp) = (singleExpression (anoymousFunction (functionDeclaration function unaryDeleteProp ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression (singleExpression new . target) . (identifierName prop))))) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable strictUnaryDeleteProp) = (singleExpression (anoymousFunction (functionDeclaration function strictUnaryDeleteProp ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression (singleExpression new . target) . (identifierName prop))))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unaryDeleteProp) . (identifierName prop)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryDeleteProp)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target.prop` should be true when new.target is not undefined and prop is a configurable property"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression strictUnaryDeleteProp) . (identifierName prop)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression strictUnaryDeleteProp)) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target.prop` should be true when new.target is not undefined and prop is a configurable property"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression unaryDeleteProp) = (singleExpression (anoymousFunction (functionDeclaration function unaryDeleteProp ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression (singleExpression new . target) . (identifierName prop))))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression unaryDeleteProp)) , (argument (singleExpression (literal "prop"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal false))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression unaryDeleteProp)) )))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "`delete new.target.prop` should be false when new.target is not undefined and prop is a non-configurable property"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression strictUnaryDeleteProp) = (singleExpression (anoymousFunction (functionDeclaration function strictUnaryDeleteProp ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression (singleExpression new . target) . (identifierName prop))))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression strictUnaryDeleteProp)) , (argument (singleExpression (literal "prop"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal false))) }))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable passed) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression construct) (arguments ( (argument (singleExpression strictUnaryDeleteProp)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (singleExpression (singleExpression e) instanceof (singleExpression TypeError)) && (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName message)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "delete"))) ))) >= (singleExpression (literal (numericLiteral 0))))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression passed)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target.prop` should throw a TypeError in strict code when prop is a non-configurable property"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression unaryDeleteProp) = (singleExpression (anoymousFunction (functionDeclaration function unaryDeleteProp ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression delete (singleExpression (singleExpression new . target) . (identifierName prop))))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unaryDeleteProp) . (identifierName prop)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable passed) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression unaryDeleteProp)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (singleExpression (singleExpression e) instanceof (singleExpression TypeError)) && (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName message)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "undefined"))) ))) >= (singleExpression (literal (numericLiteral 0))))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression passed)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "`delete new.target.prop` should throw a TypeError when new.target is undefined"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testUnaryOps) (arguments ( )))) (eos ;))))) <EOF>)