(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./resources/unary-op-test.js"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable opName) = (singleExpression (literal "negate")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable op) = (singleExpression (literal "-")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable operatorType) = (singleExpression (literal "Prefix")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o1) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 10)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable posInfinity) = (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable negInfinity) = (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 1)))) / (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable values) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'o1'))) , (arrayElement (singleExpression (literal 'null'))) , (arrayElement (singleExpression (literal 'undefined'))) , (arrayElement (singleExpression (literal 'true'))) , (arrayElement (singleExpression (literal 'false'))) , (arrayElement (singleExpression (literal 'NaN'))) , (arrayElement (singleExpression (literal 'posInfinity'))) , (arrayElement (singleExpression (literal 'negInfinity'))) , (arrayElement (singleExpression (literal '100.2'))) , (arrayElement (singleExpression (literal '-100.2'))) , (arrayElement (singleExpression (literal '54294967296.2923'))) , (arrayElement (singleExpression (literal '-54294967296.2923'))) , (arrayElement (singleExpression (literal '0'))) , (arrayElement (singleExpression (literal '-0'))) , (arrayElement (singleExpression (literal '1'))) , (arrayElement (singleExpression (literal '-1'))) , (arrayElement (singleExpression (literal '0x3fff'))) , (arrayElement (singleExpression (literal '-0x3fff'))) , (arrayElement (singleExpression (literal '0x7fff'))) , (arrayElement (singleExpression (literal '-0x7fff'))) , (arrayElement (singleExpression (literal '0x10000'))) , (arrayElement (singleExpression (literal '-0x10000'))) , (arrayElement (singleExpression (literal '0x7ffffff'))) , (arrayElement (singleExpression (literal '-0x7ffffff'))) , (arrayElement (singleExpression (literal '0x80000000'))) , (arrayElement (singleExpression (literal '-0x80000000'))) , (arrayElement (singleExpression (literal '0x100000000'))) , (arrayElement (singleExpression (literal '-0x100000000'))) , (arrayElement (singleExpression (literal '"abc"'))) , (arrayElement (singleExpression (literal '"0"'))) , (arrayElement (singleExpression (literal '"-0"'))) , (arrayElement (singleExpression (literal '"1"'))) , (arrayElement (singleExpression (literal '"-1"'))) , (arrayElement (singleExpression (literal '"0x3fff"'))) , (arrayElement (singleExpression (literal '"-0x3fff"'))) , (arrayElement (singleExpression (literal '"0x7fff"'))) , (arrayElement (singleExpression (literal '"-0x7fff"'))) , (arrayElement (singleExpression (literal '"0x10000"'))) , (arrayElement (singleExpression (literal '"-0x10000"'))) , (arrayElement (singleExpression (literal '"0x7ffffff"'))) , (arrayElement (singleExpression (literal '"-0x7ffffff"'))) , (arrayElement (singleExpression (literal '"0x100000000"'))) , (arrayElement (singleExpression (literal '"-0x100000000"'))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tests) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression generateBinaryTests) (arguments ( (argument (singleExpression tests)) , (argument (singleExpression opName)) , (argument (singleExpression operatorType)) , (argument (singleExpression (literal "ImmediateResult"))) , (argument (singleExpression op)) , (argument (singleExpression values)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression generateBinaryTests) (arguments ( (argument (singleExpression tests)) , (argument (singleExpression opName)) , (argument (singleExpression operatorType)) , (argument (singleExpression (literal "PostResult"))) , (argument (singleExpression op)) , (argument (singleExpression values)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression run) (arguments ( )))) (eos ;))))) <EOF>)