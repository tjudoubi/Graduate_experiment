(program (sourceElements (sourceElement (statement (functionDeclaration function mathPowWrapper ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowWrapper)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testChangingMathPow ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression mathPowWrapper) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression b))) (eos ;)))))) })))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression mathPowWrapper) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 140000))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Result = ")) + (singleExpression result)) + (singleExpression (literal ", expected 140000")))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testChangingMathPow) (arguments ( )))) (eos ;))))) <EOF>)