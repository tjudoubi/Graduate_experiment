(program (sourceElements (sourceElement (statement (functionDeclaration function testValue ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value: expected:(")) + (singleExpression expected)) + (singleExpression (literal "),actual:("))) + (singleExpression value)) + (singleExpression (literal ").")))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function identityPairs ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression i)) , (arrayElement (singleExpression i))) ]))) (eos ;)))))) }))) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (singleExpression identityPairs) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) )))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression elm)) , (arrayElement (singleExpression _))) ])))) of (expressionSequence (singleExpression map)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression elm)) , (argument (singleExpression counter)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (singleExpression elm) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression elm) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression elm) > (singleExpression (literal (numericLiteral 10000))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName clear)) (arguments ( )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression counter))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression (literal (numericLiteral 10002)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (singleExpression identityPairs) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) )))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression elm)) , (arrayElement (singleExpression _))) ])))) of (expressionSequence (singleExpression map)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression elm)) , (argument (singleExpression counter)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName clear)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression counter))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (singleExpression identityPairs) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) )))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exp) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression elm)) , (arrayElement (singleExpression _))) ])))) of (expressionSequence (singleExpression map)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression elm)) , (argument (singleExpression (singleExpression exp) [ (expressionSequence (singleExpression counter)) ])) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (singleExpression counter) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression counter))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (singleExpression identityPairs) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) )))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (singleExpression (singleExpression map) . (identifierName keys)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter2) = (singleExpression (singleExpression (singleExpression map) . (identifierName keys)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter2) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable elm))) of (expressionSequence (singleExpression iter)) ) (statement (emptyStatement ;))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName done))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 2)))) ))) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName done))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter2) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter2) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter2) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "unreeachable."))) ))))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (singleExpression (singleExpression map) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression elm)) , (arrayElement (singleExpression _))) ])))) of (expressionSequence (singleExpression map)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "unreeachable."))) ))))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression i)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression map) . (identifierName size))) , (argument (singleExpression (literal (numericLiteral 5)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (singleExpression (singleExpression map) . (identifierName keys)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 5))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression i)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 4))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression i)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValue) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iter) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression undefined)) )))) (eos ;))))) <EOF>)