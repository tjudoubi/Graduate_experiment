(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "not thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeArray ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression actual) . (identifierName length))) , (argument (singleExpression (singleExpression expected) . (identifierName length))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression expected) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression actual) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression actual)) )))) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (literal "hello"))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.ownKeys requires the first argument be an object`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cocoa) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cappuccino) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cappuccino"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) , (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 42)) : (singleExpression (literal (numericLiteral 42)))) }))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '42')))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal (numericLiteral 2)))) }))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '0'))) , (arrayElement (singleExpression (literal '1'))) , (arrayElement (singleExpression (literal '2')))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) }))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '0'))) , (arrayElement (singleExpression (literal '1'))) , (arrayElement (singleExpression (literal '2'))) , (arrayElement (singleExpression (literal 'hello')))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName world)) : (singleExpression (literal (numericLiteral 42)))) }))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '0'))) , (arrayElement (singleExpression (literal '1'))) , (arrayElement (singleExpression (literal '2'))) , (arrayElement (singleExpression (literal 'hello'))) , (arrayElement (singleExpression (literal 'world')))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression cocoa) ]) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName world)) : (singleExpression (literal (numericLiteral 42)))) }))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '0'))) , (arrayElement (singleExpression (literal '1'))) , (arrayElement (singleExpression (literal '2'))) , (arrayElement (singleExpression (literal 'hello'))) , (arrayElement (singleExpression (literal 'world'))) , (arrayElement (singleExpression cocoa))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression cocoa) ]) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName [ (singleExpression cappuccino) ]) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (identifierName world)) : (singleExpression (literal (numericLiteral 42)))) }))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '0'))) , (arrayElement (singleExpression (literal '1'))) , (arrayElement (singleExpression (literal '2'))) , (arrayElement (singleExpression (literal 'hello'))) , (arrayElement (singleExpression (literal 'world'))) , (arrayElement (singleExpression cocoa)) , (arrayElement (singleExpression cappuccino))) ]))) )))) (eos ;))))) <EOF>)