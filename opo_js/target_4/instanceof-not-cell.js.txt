(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable prototype))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) instanceof (singleExpression prototype))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable prototype)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable actual) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o)) , (argument (singleExpression prototype)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad result: ")) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function Foo ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function Bar ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Bar) . (identifierName prototype)) = (singleExpression new (singleExpression (singleExpression Foo) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression Object)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression Array)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression String)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression Foo)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression Bar)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression Object)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression Array)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression String)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression Foo)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression Bar)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Object)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Array)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression String)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Foo)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Bar)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Foo) (arguments ( ))))) , (argument (singleExpression Object)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Foo) (arguments ( ))))) , (argument (singleExpression Array)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Foo) (arguments ( ))))) , (argument (singleExpression String)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Foo) (arguments ( ))))) , (argument (singleExpression Foo)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Foo) (arguments ( ))))) , (argument (singleExpression Bar)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Bar) (arguments ( ))))) , (argument (singleExpression Object)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Bar) (arguments ( ))))) , (argument (singleExpression Array)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Bar) (arguments ( ))))) , (argument (singleExpression String)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Bar) (arguments ( ))))) , (argument (singleExpression Foo)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Bar) (arguments ( ))))) , (argument (singleExpression Bar)) , (argument (singleExpression (literal true))) )))) (eos ;)))) })))))) <EOF>)