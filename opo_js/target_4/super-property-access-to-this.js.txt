(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) eos))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable f)) , (formalParameterArg (assignable n) = (singleExpression (literal (numericLiteral 1000))))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))))))) }))) (sourceElement (statement (classDeclaration class Base (classTail { (classElement (methodDefinition (getter get (propertyName (identifierName foo))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class Child (classTail extends (singleExpression Base) { (classElement (methodDefinition (propertyName (identifierName a)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName foo))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName b)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression super) . (identifierName foo))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arr) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable A) = (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable AA) = (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName AAA)) = (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable globalObj) = (singleExpression this))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)) . (identifierName call)) (arguments ( (argument (singleExpression (literal "xyz"))) ))) === (singleExpression (literal "xyz")))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)) . (identifierName call)) (arguments ( (argument (singleExpression obj)) ))) === (singleExpression obj))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)) . (identifierName call)) (arguments ( (argument (singleExpression (literal (numericLiteral 25)))) ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName a)) . (identifierName call)) (arguments ( (argument (singleExpression globalObj)) ))) === (singleExpression globalObj))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName b)) . (identifierName call)) (arguments ( (argument (singleExpression (literal "xyz"))) ))) === (singleExpression (literal "xyz")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName b)) . (identifierName call)) (arguments ( (argument (singleExpression obj)) ))) === (singleExpression obj))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName b)) . (identifierName call)) (arguments ( (argument (singleExpression (literal (numericLiteral 25)))) ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Child) . (identifierName prototype)) . (identifierName b)) . (identifierName call)) (arguments ( (argument (singleExpression globalObj)) ))) === (singleExpression globalObj))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression A) (arguments ( ))) === (singleExpression undefined))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression AA) (arguments ( ))) === (singleExpression undefined))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression AAA) (arguments ( ))) === (singleExpression undefined))) )))) (eos ;)))))) }))) )))) (eos ;))))) <EOF>)