(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression msg)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeAsync ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable run)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression hadError)) ) (statement (throwStatement throw (expressionSequence (singleExpression actual)) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression actual)) , (argument (singleExpression msg)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable run)) , (formalParameterArg (assignable errorType)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression (singleExpression run) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression hadError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal ", but did not throw.")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression actual) instanceof (singleExpression errorType))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expeced ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal " , but threw '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression message) !== (singleExpression void (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression actual) . (identifierName message)) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw '"))) + (singleExpression message)) + (singleExpression (literal "', but threw '"))) + (singleExpression (singleExpression actual) . (identifierName message))) + (singleExpression (literal "'")))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowAsync ( (formalParameterList (formalParameterArg (assignable run)) , (formalParameterArg (assignable errorType)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression hadError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal ", but did not throw.")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression actual) instanceof (singleExpression errorType))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal ", but threw '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression message) !== (singleExpression void (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression actual) . (identifierName message)) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw '"))) + (singleExpression message)) + (singleExpression (literal "', but threw '"))) + (singleExpression (singleExpression actual) . (identifierName message))) + (singleExpression (literal "'")))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable str)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Expected `")) + (singleExpression str)) + (singleExpression (literal "` to throw a SyntaxError, but did not throw.")))) ))))) eos))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName constructor)) !== (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected `")) + (singleExpression str)) + (singleExpression (literal "` to throw a SyntaxError, but threw '"))) + (singleExpression e)) + (singleExpression (literal "'")))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression message) !== (singleExpression void (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression e) . (identifierName message)) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected `")) + (singleExpression str)) + (singleExpression (literal "` to throw SyntaxError: '"))) + (singleExpression message)) + (singleExpression (literal "', but threw '"))) + (singleExpression e)) + (singleExpression (literal "'")))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression this) . (identifierName AsyncFunction))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression AsyncFunction) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async function ( ) { functionBody }))) )) . (identifierName constructor)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function asyncFunctionForProto ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression AsyncFunction) . (identifierName prototype))) , (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression asyncFunctionForProto)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression AsyncFunction) . (identifierName prototype))) , (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression (anoymousFunction async function ( ) { functionBody }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression AsyncFunction) . (identifierName prototype))) , (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression AsyncFunction) . (identifierName prototype))) , (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName method)) ( ) { functionBody }) })) . (identifierName method))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression asyncFunctionForProto) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (singleExpression asyncFunctionForProto) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async function ( ) { functionBody }))) )) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async function ( ) { functionBody }))) )) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName method)) ( ) { functionBody }) }))) )) . (identifierName method)) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName method)) ( ) { functionBody }) }))) )) . (identifierName method)) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression (singleExpression AsyncFunction) (arguments ( ))) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression AsyncFunction) (arguments ( ))) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable descriptor) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression AsyncFunction) . (identifierName prototype))) , (argument (singleExpression (singleExpression Symbol) . (identifierName toStringTag))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "AsyncFunction"))) , (argument (singleExpression (singleExpression descriptor) . (identifierName value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression descriptor) . (identifierName enumerable))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression descriptor) . (identifierName writable))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (singleExpression descriptor) . (identifierName configurable))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (singleExpression AsyncFunction) . (identifierName length))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function asyncNonConstructorDecl ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new (singleExpression (singleExpression asyncNonConstructorDecl) (arguments ( )))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async function ( ) { functionBody }))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName nonConstructor)) ( ) { functionBody }) }))) )) . (identifierName nonConstructor)) (arguments ( )))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal "not a constructor!")))))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new (singleExpression ( (expressionSequence (singleExpression (singleExpression AsyncFunction) (arguments ( )))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function asyncDecl ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "test"))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "test"))) , (argument (singleExpression asyncDecl)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "test2"))) , (argument (singleExpression (anoymousFunction async function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "test2"))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "test3"))) , (argument (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal "test3")))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "test4"))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName f)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "test4"))) (eos ;)))))) }) }))) )) . (identifierName f)) (arguments ( ))))))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class MyError (classTail extends (singleExpression Error) { })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function asyncDeclThrower ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression MyError) (arguments ( (argument (singleExpression e)) ))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowAsync) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression asyncDeclThrower) (arguments ( (argument (singleExpression (literal "boom!"))) ))))))) , (argument (singleExpression MyError)) , (argument (singleExpression (literal "boom!"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowAsync) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async function ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression MyError) (arguments ( (argument (singleExpression e)) ))))) (eos ;)))))) }))) )) (arguments ( (argument (singleExpression (literal "boom!!!"))) ))))))) , (argument (singleExpression MyError)) , (argument (singleExpression (literal "boom!!!"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowAsync) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters e) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression MyError) (arguments ( (argument (singleExpression e)) ))))) eos))))) })))) )) (arguments ( (argument (singleExpression (literal "boom!!"))) ))))))) , (argument (singleExpression MyError)) , (argument (singleExpression (literal "boom!!"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowAsync) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName thrower)) ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression MyError) (arguments ( (argument (singleExpression e)) ))))) (eos ;)))))) }) }))) )) . (identifierName thrower)) (arguments ( (argument (singleExpression (literal "boom!!!!"))) ))))))) , (argument (singleExpression MyError)) , (argument (singleExpression (literal "boom!!!!"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function resolveLater ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function rejectLater ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Promise) . (identifierName reject)) (arguments ( (argument (singleExpression error)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function resumeAfterNormal ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression resolveLater) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression resolveLater) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression resumeAfterNormal) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:1 resume:2 resume:3"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable O) = (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName resumeAfterNormal)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression resolveLater) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression resolveLater) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression O) . (identifierName resumeAfterNormal)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:2 resume:3 resume:4"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable resumeAfterNormalArrow) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression resolveLater) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression resolveLater) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 6)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression resumeAfterNormalArrow) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:3 resume:4 resume:5"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable resumeAfterNormalEval) = (singleExpression (singleExpression AsyncFunction) (arguments ( (argument (singleExpression (literal "value"))) , (argument (singleExpression (literal `    log.push("start:" + value);    value = await resolveLater(value + 1);    log.push("resume:" + value);    value = await resolveLater(value + 1);    log.push("resume:" + value);    return value + 1;`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression resumeAfterNormalEval) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:4 resume:5 resume:6"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function resumeAfterThrow ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression rejectLater) (arguments ( (argument (singleExpression (literal "throw1"))) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression rejectLater) (arguments ( (argument (singleExpression (literal "throw2"))) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression resumeAfterThrow) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:1 resume:throw1 resume:throw2"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable O) = (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName resumeAfterThrow)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression rejectLater) (arguments ( (argument (singleExpression (literal "throw1"))) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression rejectLater) (arguments ( (argument (singleExpression (literal "throw2"))) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression O) . (identifierName resumeAfterThrow)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:2 resume:throw1 resume:throw2"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable resumeAfterThrowArrow) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression rejectLater) (arguments ( (argument (singleExpression (literal "throw1"))) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression await (singleExpression (singleExpression rejectLater) (arguments ( (argument (singleExpression (literal "throw2"))) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "resume:")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression resumeAfterThrowArrow) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:3 resume:throw1 resume:throw2"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable resumeAfterThrowEval) = (singleExpression (singleExpression AsyncFunction) (arguments ( (argument (singleExpression (literal "value"))) , (argument (singleExpression (literal `    log.push("start:" + value);    try {        value = await rejectLater("throw1");    } catch (e) {        log.push("resume:" + e);    }    try {        value = await rejectLater("throw2");    } catch (e) {        log.push("resume:" + e);    }    return value + 1;`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression resumeAfterThrowEval) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:4 resume:throw1 resume:throw2"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable awaitEpression) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal "start:")) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression await (singleExpression (literal false))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal 'step 1'))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression ~ (singleExpression await (singleExpression (literal true)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal 'step 2 ')) + (singleExpression t))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t1) = (singleExpression + (singleExpression await (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal (numericLiteral 12345)))) ))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal 'step 3 ')) + (singleExpression t1))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t2) = (singleExpression - (singleExpression await (singleExpression (literal (numericLiteral 54321))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal 'step 4 ')) + (singleExpression t2))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t3) = (singleExpression ! (singleExpression ! (singleExpression ! (singleExpression ! (singleExpression ! (singleExpression await (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal true))) ))))))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (literal 'step 5 ')) + (singleExpression t3))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var t4 = ++await 1;"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var t5 = --await 1;"))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression void (singleExpression await (singleExpression (literal 'test'))))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression awaitEpression) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "start:5 step 1 step 2 -2 step 3 12345 step 4 -54321 step 5 false"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal " "))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async foo : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async foo = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async foo , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async foo }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 0 : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 0 = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 0 , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 0 }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 'foo' : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 'foo' = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 'foo' , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async 'foo' }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async ['foo'] : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async ['foo'] = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async ['foo'] , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async ['foo'] }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected a parenthesis for argument list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async foo : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async foo = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async foo , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async foo }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 0 : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 0 = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 0 , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 0 }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 'foo' : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 'foo' = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 'foo' , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async 'foo' }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async ['foo'] : true };"))) , (argument (singleExpression (literal "Unexpected token ':'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async ['foo'] = true };"))) , (argument (singleExpression (literal "Unexpected token '='. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async ['foo'] , bar };"))) , (argument (singleExpression (literal "Unexpected token ','. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "class C { async ['foo'] }"))) , (argument (singleExpression (literal "Unexpected token '}'. Expected an opening '(' before a async method's parameter list."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function awaitedPromisesAreWrapped ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal "before"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal "after"))) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression awaitedPromisesAreWrapped) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal "Promise.resolve()"))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "before|Promise.resolve()|after"))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal "|"))) )))) )))) (eos ;))))) <EOF>)