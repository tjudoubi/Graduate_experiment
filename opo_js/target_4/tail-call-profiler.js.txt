(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function tail ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression tail)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function inlineTail ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression tail) (arguments ( (argument (singleExpression a)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function inlineTailVarArgs ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression tail) (arguments ( (argument ... (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression a))) ]))) )))) eos))))) }))) (sourceElement (statement (functionDeclaration function inlineTailTernary ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal true)) ? (singleExpression (singleExpression tail) (arguments ( (argument (singleExpression a)) ))) : (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function body ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inlineTail) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inlineTailVarArgs) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inlineTailTernary) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) eos))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression body) (arguments ( )))) (eos ;))))) <EOF>)