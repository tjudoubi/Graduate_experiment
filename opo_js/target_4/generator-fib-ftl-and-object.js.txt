(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function * fib ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName fib)) : (singleExpression (literal (numericLiteral 0)))) })))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName fib)) = (singleExpression a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression yield)) eos)) (statement (expressionStatement (expressionSequence (singleExpression c)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression a)) , (arrayElement (singleExpression b))) ])) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression b)) , (arrayElement (singleExpression (singleExpression a) + (singleExpression b)))) ])))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression fib) (arguments ( ))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) })) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression value) . (identifierName fib)) !== (singleExpression (literal (numericLiteral 354224848179262000000))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value:${result}`))) ))))) (eos ;)))))) })))) } ( ) ) ;)