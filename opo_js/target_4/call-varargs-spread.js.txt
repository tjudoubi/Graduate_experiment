(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable m) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad assert: ")) + (singleExpression m))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression args)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression bar) (arguments ( (argument ... (singleExpression args)) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument ... (singleExpression args)) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 2))))) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 3))))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) . (identifierName length)) === (singleExpression (literal (numericLiteral 7))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 2)))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 3)))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]) === (singleExpression (literal (numericLiteral 42))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 2)))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 6)))) ]) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 3)))))) , (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression r)) )))) )))) (eos ;)))) })))) <EOF>)