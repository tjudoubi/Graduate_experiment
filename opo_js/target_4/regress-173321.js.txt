(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable checks) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable testObj))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checks) = (singleExpression (singleExpression checks) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName a)) != (singleExpression (singleExpression testObj) . (identifierName a)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Check #")) + (singleExpression checks)) + (singleExpression (literal " o.a should be "))) + (singleExpression (singleExpression testObj) . (identifierName a))) + (singleExpression (literal " , is "))) + (singleExpression (singleExpression o) . (identifierName a)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName b)) != (singleExpression (singleExpression testObj) . (identifierName b)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Check #")) + (singleExpression checks)) + (singleExpression (literal " o.b should be "))) + (singleExpression (singleExpression testObj) . (identifierName b))) + (singleExpression (literal " , is "))) + (singleExpression (singleExpression o) . (identifierName b)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName c)) != (singleExpression (singleExpression testObj) . (identifierName c)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Check #")) + (singleExpression checks)) + (singleExpression (literal " o.c should be "))) + (singleExpression (singleExpression testObj) . (identifierName c))) + (singleExpression (literal " , is "))) + (singleExpression (singleExpression o) . (identifierName c)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName p)) != (singleExpression (singleExpression testObj) . (identifierName p)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Check #")) + (singleExpression checks)) + (singleExpression (literal " o.p should be "))) + (singleExpression (singleExpression testObj) . (identifierName p))) + (singleExpression (literal " , is "))) + (singleExpression (singleExpression o) . (identifierName p)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) != (singleExpression (singleExpression testObj) . (identifierName x)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Check #")) + (singleExpression checks)) + (singleExpression (literal " o.x should be "))) + (singleExpression (singleExpression testObj) . (identifierName x))) + (singleExpression (literal " , is "))) + (singleExpression (singleExpression o) . (identifierName x)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName y)) != (singleExpression (singleExpression testObj) . (identifierName y)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Check #")) + (singleExpression checks)) + (singleExpression (literal " o.y should be "))) + (singleExpression (singleExpression testObj) . (identifierName y))) + (singleExpression (literal " , is "))) + (singleExpression (singleExpression o) . (identifierName y)))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testObjInitial) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName c)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 10)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 11)))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testObjAfterReadOnlyProperty) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 101)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName c)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 10)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 11)))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SimpleObject) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName a)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName b)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName c)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proto) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName p)) : (singleExpression (literal (numericLiteral 100)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression SimpleObject) . (identifierName prototype)) = (singleExpression proto))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable test) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression new (singleExpression (singleExpression SimpleObject) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName y)) = (singleExpression (literal (numericLiteral 11))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression o)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( )))) , (argument (singleExpression testObjInitial)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( )))) , (argument (singleExpression testObjInitial)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( )))) , (argument (singleExpression testObjInitial)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression proto)) , (argument (singleExpression (literal "a"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 101)))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) }))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( )))) , (argument (singleExpression testObjAfterReadOnlyProperty)) )))) (eos ;))))))) <EOF>)