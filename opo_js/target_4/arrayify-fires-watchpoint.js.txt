(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression b) . (identifierName f)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator +=) (singleExpression (singleExpression a) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) + (singleExpression (singleExpression b) . (identifierName f)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression c))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad result: expected ")) + (singleExpression c)) + (singleExpression (literal " but got: "))) + (singleExpression result))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function makeObjectArray ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression value))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable p) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression (literal (numericLiteral 42)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression p) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression makeObjectArray) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))) , (argument (singleExpression p)) , (argument (singleExpression (literal (numericLiteral 88)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression makeObjectArray) (arguments ( (argument (singleExpression (literal (numericLiteral 4.5)))) )))) , (argument (singleExpression p)) , (argument (singleExpression (literal (numericLiteral 88.5)))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression p)) , (argument (singleExpression p)) , (argument (singleExpression (literal (numericLiteral 89)))) )))) (eos ;))))) <EOF>)