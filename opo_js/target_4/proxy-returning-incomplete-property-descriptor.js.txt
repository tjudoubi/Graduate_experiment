(program (sourceElements (sourceElement (statement (functionDeclaration function truthiness ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression ! (singleExpression x)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function compare ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i))) in (expressionSequence (singleExpression (singleExpression a) . (identifierName desc))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression propA) = (singleExpression (singleExpression (singleExpression a) . (identifierName desc)) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression propB) = (singleExpression (singleExpression (singleExpression b) . (identifierName desc)) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression propA) == (singleExpression propB))) ) (statement (continueStatement continue (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression typeof (singleExpression propA)) == (singleExpression (literal "boolean"))) && (singleExpression (singleExpression (singleExpression truthiness) (arguments ( (argument (singleExpression propA)) ))) == (singleExpression (singleExpression truthiness) (arguments ( (argument (singleExpression propB)) )))))) ) (statement (continueStatement continue (eos ;))))) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression a) . (identifierName name)) + (singleExpression (literal "["))) + (singleExpression i)) + (singleExpression (literal "] : "))) + (singleExpression propA)) + (singleExpression (literal " != "))) + (singleExpression (singleExpression b) . (identifierName name))) + (singleExpression (literal "["))) + (singleExpression i)) + (singleExpression (literal "] : "))) + (singleExpression propB))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actualDesc)) , (formalParameterArg (assignable expectedDesc))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compare) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "actual"))) , (propertyAssignment (propertyName (identifierName desc)) : (singleExpression actualDesc)) }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "expected"))) , (propertyAssignment (propertyName (identifierName desc)) : (singleExpression expectedDesc)) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compare) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "expected"))) , (propertyAssignment (propertyName (identifierName desc)) : (singleExpression expectedDesc)) }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "actual"))) , (propertyAssignment (propertyName (identifierName desc)) : (singleExpression actualDesc)) }))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable expectedDesc))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable desc) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 0)))) }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName getOwnPropertyDescriptor)) ( (formalParameterList (formalParameterArg (assignable t)) , (formalParameterArg (assignable pk))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression expectedDesc)) eos))))) }) }))) ))))) , (argument (singleExpression (literal ""))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression desc)) , (argument (singleExpression expectedDesc)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { functionBody }))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction function ( ) { functionBody }))) }))) )))) (eos ;))))) <EOF>)