(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable str) = (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName 'a1') : (singleExpression (objectLiteral { (propertyAssignment (propertyName 'a2') : (singleExpression (objectLiteral { (propertyAssignment (propertyName 'a3') : (singleExpression (objectLiteral { (propertyAssignment (propertyName 'a4') : (singleExpression (objectLiteral { (propertyAssignment (propertyName 'a5') : (singleExpression (objectLiteral { (propertyAssignment (propertyName 'a6') : (singleExpression (literal 'AAAAAAAAAA'))) }))) }))) }))) }))) }))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable val) = (singleExpression (objectLiteral { (propertyAssignment (propertyName 'A') : (singleExpression (literal true))) , })))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression val)) (eos ;)))))) }))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;))))))) <EOF>)