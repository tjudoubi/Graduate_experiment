(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable a) = (singleExpression (singleExpression (singleExpression Object) . (identifierName freeze)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'a')))) ]))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) ) (statement (returnStatement return (eos ;)))))) }))))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "didn't throw the right exception"))) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression a)) )))) (eos ;))))))) <EOF>)