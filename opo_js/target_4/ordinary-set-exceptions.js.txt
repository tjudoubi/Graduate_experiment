(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable target) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable handler) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression handler)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) , }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression proxy) . (identifierName cocoa)) = (singleExpression (literal 'NG')))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable target) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable handler) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression handler)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) , }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName set)) (arguments ( (argument (singleExpression proxy)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (literal 'NG'))) , (argument (singleExpression (literal 'Cocoa'))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable target) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName set))) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression receiver)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName set)) ( ) { functionBody }) }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable receiver) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression proxy)) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) , }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression receiver) . (identifierName cocoa)) = (singleExpression (literal 'NG')))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable target) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName set))) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression receiver)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal 'hello'))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable receiver) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression proxy)) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) , }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression receiver) . (identifierName cocoa)) = (singleExpression (literal 'NG')))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable target) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable receiver) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression proxy)) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (literal 'cocoa'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) ( ) { functionBody }) }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression receiver) . (identifierName cocoa)) = (singleExpression (literal 'NG')))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;))))) <EOF>)