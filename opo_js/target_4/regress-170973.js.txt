(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable i0)) , (formalParameterArg (assignable i1))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i0) = (singleExpression (singleExpression i0) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i1) = (singleExpression (singleExpression i1) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i1) & (singleExpression (literal (numericLiteral 1))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i1) = (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i0) ? (singleExpression i1) : (singleExpression i1))) )) - (singleExpression i0))) )) ? (singleExpression (literal false)) : (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable k) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression k) < (singleExpression (literal (numericLiteral 200))))) ; (expressionSequence (singleExpression ++ (singleExpression k))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression k) < (singleExpression (literal (numericLiteral 100))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x80000001)))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0x800)))) , (argument (singleExpression (literal (numericLiteral 0x80000001)))) )))) (eos ;)))))) })))))) <EOF>)