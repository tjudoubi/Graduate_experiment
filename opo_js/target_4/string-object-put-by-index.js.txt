(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "not thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testSloppy ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 52))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal 'C'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 100)))) ]) = (singleExpression (literal (numericLiteral 52))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 100)))) ])) , (argument (singleExpression (literal (numericLiteral 52)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testStrict ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 52))))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal 'C'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 100)))) ]) = (singleExpression (literal (numericLiteral 52))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (literal (numericLiteral 100)))) ])) , (argument (singleExpression (literal (numericLiteral 52)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSloppy) (arguments ( (argument (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "Cocoa"))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testStrict) (arguments ( (argument (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "Cocoa"))) ))))) )))) (eos ;))))) <EOF>)