(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable e)) , (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression v) !== (singleExpression e))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-0"))) ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > -0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-0"))) ))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-0n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0n > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x1fffffffffffff01n))) > (singleExpression (literal (bigintLiteral 0x1fffffffffffff02n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0x1fffffffffffff01n > 0x1fffffffffffff02n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x1fffffffffffff02n))) > (singleExpression (literal (bigintLiteral 0x1fffffffffffff01n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0x1fffffffffffff02n > 0x1fffffffffffff01n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-2305843009213693697"))) ))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-2305843009213693698"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "-2305843009213693697n > -2305843009213693698n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-2305843009213693698"))) ))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-2305843009213693697"))) ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-2305843009213693698n > -2305843009213693697n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x10000000000000000n))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0x10000000000000000n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (bigintLiteral 0x10000000000000000n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 0x10000000000000000n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x10000000000000000n))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0x10000000000000000n > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal (bigintLiteral 0x10000000000000000n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > 0x10000000000000000n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x10000000000000000n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0x10000000000000000n > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (literal (bigintLiteral 0x10000000000000000n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > 0x10000000000000000n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x10000000000000001n))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0x10000000000000001n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (bigintLiteral 0x10000000000000001n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 0x10000000000000001n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551616"))) ))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-18446744073709551616n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551616"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0n > -18446744073709551616n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551616"))) ))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-18446744073709551616n > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551616"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > -18446744073709551616n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551616"))) ))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-18446744073709551616n > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551616"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "-1n > -18446744073709551616n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551617"))) ))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-18446744073709551617n > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-18446744073709551617"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0n > -18446744073709551617n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x10000000000000000n))) > (singleExpression (literal (bigintLiteral 0x100000000n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0x10000000000000000n > 0x100000000n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0x100000000n))) > (singleExpression (literal (bigintLiteral 0x10000000000000000n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0x100000000n > 0x10000000000000000n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal "0")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > '0'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "0")) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'0' > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal "1")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > '1'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "0")) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'0' > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal "0")))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > '0'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "1")) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "'1' > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal "")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > ''"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'' > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal "1")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > '1'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'' > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal "")))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > ''"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal "1")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > '1'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "1")) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'1' > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal "-1")))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > '-1'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "1")) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "'1' > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (literal "1")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > '1'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "-1")) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'-1' > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression (literal "-1")))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > '-1'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "-1")) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'-1' > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 9007199254740993n))) > (singleExpression (literal "9007199254740992")))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "9007199254740993n > '9007199254740992'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "9007199254740993")) > (singleExpression (literal (bigintLiteral 9007199254740992n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "'9007199254740993' > 9007199254740992n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-9007199254740992"))) ))) > (singleExpression (literal "-9007199254740993")))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "-9007199254740992n > '-9007199254740993'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "-9007199254740992")) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-9007199254740993"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "'-9007199254740992' > -9007199254740993n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "0x10")) > (singleExpression (literal (bigintLiteral 14n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "'0x10' > 3n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "0b10")) > (singleExpression (literal (bigintLiteral 2n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'0b10' > 2n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "0b10")) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "'0x10' > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "b10")) > (singleExpression (literal (bigintLiteral 2n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'b10' > 2n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "bbb10")) > (singleExpression (literal (bigintLiteral 2n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "'bbb10' > 2n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0 > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression - (singleExpression (literal (numericLiteral 0)))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > -0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 0)))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-0 > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (numericLiteral 0.000000000001))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 0.000000000001"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0.000000000001))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0.000000000001 > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > 1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 1))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1 > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > 0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0 > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal (numericLiteral 0.999999999999))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > 0.999999999999"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0.999999999999))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0.999999999999 > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > 1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 1))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1 > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (singleExpression Number) . (identifierName MIN_VALUE)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > Number.MIN_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName MIN_VALUE)) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Number.MIN_VALUE > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression - (singleExpression (singleExpression Number) . (identifierName MIN_VALUE))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0n > -Number.MIN_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (singleExpression Number) . (identifierName MIN_VALUE))) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-Number.MIN_VALUE > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-10"))) ))) > (singleExpression (singleExpression Number) . (identifierName MIN_VALUE)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-10n > Number.MIN_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName MIN_VALUE)) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-10"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Number.MIN_VALUE > -10n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (singleExpression Number) . (identifierName MAX_VALUE)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > Number.MAX_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName MAX_VALUE)) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Number.MAX_VALUE > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression - (singleExpression (singleExpression Number) . (identifierName MAX_VALUE))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > -Number.MAX_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (singleExpression Number) . (identifierName MAX_VALUE))) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-Number.MAX_VALUE > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn))) > (singleExpression (singleExpression Number) . (identifierName MAX_VALUE)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn > Number.MAX_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName MAX_VALUE)) > (singleExpression (literal (bigintLiteral 0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Number.MAX_VALUE > 0xfffffffffffff7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffn"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001n))) > (singleExpression (singleExpression Number) . (identifierName MAX_VALUE)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001n > Number.MAX_VALUE"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName MAX_VALUE)) > (singleExpression (literal (bigintLiteral 0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Number.MAX_VALUE > 0xfffffffffffff800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression Infinity))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > Infinity"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression Infinity) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Infinity > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression Infinity))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-1n > Infinity"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression Infinity) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Infinity > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression - (singleExpression Infinity)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > -Infinity"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression Infinity)) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-Infinity > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))) > (singleExpression - (singleExpression Infinity)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "-1n > -Infinity"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression Infinity)) > (singleExpression (singleExpression BigInt) (arguments ( (argument (singleExpression (literal "-1"))) ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "-Infinity > -1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression NaN))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > NaN"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression NaN) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "NaN > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal false)) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "false > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal false)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "1n > false"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal false)) > (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "false > 0n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) > (singleExpression (literal false)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "0n > false"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal true)) > (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "true > 1n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (literal true)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "1n > true"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal true)) > (singleExpression (literal (bigintLiteral 2n))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "true > 2n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 2n))) > (singleExpression (literal true)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "2n > true"))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal (bigintLiteral 1n))) > (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "1"))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Comparison with Symbol shoud throw TypeError, but executed without exception"))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Comparison with Symbol shoud throw TypeError, but throwed something else"))) )))) (eos ;)))) })))))) <EOF>)