(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 400))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s) = (singleExpression (singleExpression (literal 'a')) + (singleExpression (literal 'a'))))) (eos ;))) (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression s) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) })) (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable _))) in (expressionSequence (singleExpression (objectLiteral { }))) ) (statement (block { })))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (objectLiteral { }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) ** (singleExpression (literal '')))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))))) <EOF>)