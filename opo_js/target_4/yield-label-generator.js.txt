(program (sourceElements (sourceElement (statement (functionDeclaration function testSyntax ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected syntax error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `function *test() {    {        yield: for (var i = 0; i < 1000; ++i) {            break yield;        }    }}`))) , (argument (singleExpression (literal `SyntaxError: Cannot use 'yield' as a label in a generator function.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `function *test() {    {        label: for (var i = 0; i < 1000; ++i) {            break yield;        }    }}`))) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'yield'. Expected an identifier as the target for a break statement.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `function *test() {    {        label: for (var i = 0; i < 1000; ++i) {            continue yield;        }    }}`))) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'yield'. Expected an identifier as the target for a continue statement.`))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `function *test() {    "OK" ? yield : "NG";  // This is not a label.}`))) )))) (eos ;))))) <EOF>)