(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable createBuiltin) = (singleExpression (singleExpression $vm) . (identifierName createBuiltin)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable getGetterSetter) = (singleExpression (singleExpression $vm) . (identifierName getGetterSetter)))) (eos ;)))) (sourceElement (statement (functionDeclaration function tryGetByIdText ( (formalParameterList (formalParameterArg (assignable propertyName))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `(function (base) { return @tryGetById(base, '${propertyName}'); })`))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function tryGetByIdTextStrict ( (formalParameterList (formalParameterArg (assignable propertyName))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `(function (base) { "use strict"; return @tryGetById(base, '${propertyName}'); })`))) (eos ;)))))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName caller)) : (singleExpression (literal (numericLiteral 1)))) })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression func)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression func)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "getterSetter"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "getterSetter"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression (literal "getterSetter"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "should not be called"))) ))))) (eos ;)))))) }))) }))) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (singleExpression getGetterSetter) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression (literal "getterSetter"))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (singleExpression getGetterSetter) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression (literal "getterSetter"))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "getterSetter"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "getterSetter"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "value"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "value"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 1)))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "should not be called"))) ))))) (eos ;)))))) }))) }))) )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression p)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression p)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName caller)) : (singleExpression (literal (numericLiteral 1)))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 100)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression func)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression func)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) })) else (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "caller"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 100)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression func)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression func)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName caller)) : (singleExpression (literal (numericLiteral 1)))) })))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression obj)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "length"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "length"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression arr)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression arr)) ))) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression get) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdText) (arguments ( (argument (singleExpression (literal "length"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getStrict) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (singleExpression tryGetByIdTextStrict) (arguments ( (argument (singleExpression (literal "length"))) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getStrict)) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression get) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression getStrict) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "wrong on iteration: ")) + (singleExpression i))) ))))) (eos ;)))))) }))) })))) <EOF>)