(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable getHiddenValue) = (singleExpression (singleExpression $vm) . (identifierName getHiddenValue)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable setHiddenValue) = (singleExpression (singleExpression $vm) . (identifierName setHiddenValue)))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldEqual ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "ERROR: expect ")) + (singleExpression expected)) + (singleExpression (literal ", actual "))) + (singleExpression actual))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable testAction)) , (formalParameterArg (assignable expectedException))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testAction) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression exception)) , (argument (singleExpression expectedException)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getHiddenValue) (arguments ( )))) (eos ;)))))) })))) , (argument (singleExpression (literal "TypeError: Invalid use of getHiddenValue test function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getHiddenValue) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal "TypeError: Invalid use of getHiddenValue test function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setHiddenValue) (arguments ( )))) (eos ;)))))) })))) , (argument (singleExpression (literal "TypeError: Invalid use of setHiddenValue test function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setHiddenValue) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal "TypeError: Invalid use of setHiddenValue test function"))) )))) (eos ;))))) <EOF>)