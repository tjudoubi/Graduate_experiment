(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrowTypeError ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression TypeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected TypeError!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName push)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ''))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName push)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ''))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName push)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'abc'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName push)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'abc'))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName pop)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ''))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName pop)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'abc'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName shift)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ''))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName shift)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ''))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName shift)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'abc'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName shift)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'abc'))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName unshift)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ''))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName unshift)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'abc'))) )))) (eos ;)))))) })))) )))) (eos ;))))) <EOF>)