(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) eos))) (sourceElement (statement (functionDeclaration function opaqueIdentity ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arg)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIdentity)) )))) eos))) (sourceElement (statement (functionDeclaration function negateWithDoubleSub ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression opaqueIdentity) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 6.4))) - (singleExpression arg))) ))) - (singleExpression (literal (numericLiteral 6.4))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression negateWithDoubleSub)) )))) eos))) (sourceElement (statement (functionDeclaration function opaqueNonZeroIntegerNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueNonZeroIntegerNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testNonZeroInteger ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueNonZeroIntegerNegate) (arguments ( (argument (singleExpression i)) ))) !== (singleExpression (singleExpression negateWithDoubleSub) (arguments ( (argument (singleExpression i)) ))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testNonZeroInteger() at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testNonZeroInteger) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueDoubleNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueDoubleNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDouble() at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testDouble) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueObjectNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueObjectNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testObject ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueObjectNegate) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) eos))))) })))) }))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testObject() at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testObject) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerAndDoubleNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerAndDoubleNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerAndDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndDoubleNegate) (arguments ( (argument (singleExpression i)) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndDouble() on integers at i = ")) + (singleExpression i))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndDoubleNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndDouble() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerAndDouble) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerThenDoubleNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerThenDoubleNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerThenDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerThenDoubleNegate) (arguments ( (argument (singleExpression i)) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerThenDouble() on integers at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerThenDoubleNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerThenDouble() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerThenDouble) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueDoubleThenIntegerNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueDoubleThenIntegerNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testDoubleThenInteger ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleThenIntegerNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDoubleThenInteger() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleThenIntegerNegate) (arguments ( (argument (singleExpression i)) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDoubleThenInteger() on integers at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testDoubleThenInteger) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerAndObjectNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerAndObjectNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerAndObject ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndObjectNegate) (arguments ( (argument (singleExpression i)) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndObjectNegate) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) eos))))) })))) }))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndObject() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerAndObject) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueDoubleAndObjectNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueDoubleAndObjectNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testDoubleAndObject ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleAndObjectNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression i)) + (singleExpression (literal (numericLiteral 0.5)))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDoubleAndObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleAndObjectNegate) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) eos))))) })))) }))) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDoubleAndObject() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testDoubleAndObject) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerThenObjectNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerThenObjectNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerThenObject ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerThenObjectNegate) (arguments ( (argument (singleExpression i)) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerThenObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerThenObjectNegate) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) eos))))) })))) }))) )))) )) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerThenObject() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerThenObject) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueDoubleThenObjectNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueDoubleThenObjectNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testDoubleThenObject ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleThenObjectNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression i)) + (singleExpression (literal (numericLiteral 0.5)))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDoubleThenObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueDoubleThenObjectNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression i)) + (singleExpression (literal (numericLiteral 0.5)))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testDoubleThenObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testDoubleThenObject) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerAndDoubleAndObjectNegate ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerAndDoubleAndObjectNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerAndDoubleAndObject ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndDoubleAndObjectNegate) (arguments ( (argument (singleExpression i)) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndDoubleAndObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndDoubleAndObjectNegate) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )))) )) + (singleExpression i)) + (singleExpression (literal (numericLiteral 0.5)))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndDoubleAndObject() on integers at i = ")) + (singleExpression i))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression opaqueIntegerAndDoubleAndObjectNegate) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) eos))))) })))) }))) )))) )) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerAndDoubleAndObject() on double at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerAndDoubleAndObject) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerNegateOverflow ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerNegateOverflow)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerNegateOverflow ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueIntegerNegateOverflow) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0x80000000))) | (singleExpression (literal (numericLiteral 0))))) ))) !== (singleExpression (literal (numericLiteral 2147483648))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed opaqueIntegerNegateOverflow() at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerNegateOverflow) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueIntegerNegateZero ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueIntegerNegateZero)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerNegateZero ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (singleExpression opaqueIntegerNegateZero) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) !== (singleExpression - (singleExpression Infinity)))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed testIntegerNegateZero() at i = ")) + (singleExpression i))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerNegateZero) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function gatedNegate ( (formalParameterList (formalParameterArg (assignable selector)) , (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression selector) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression selector) == (singleExpression (literal (numericLiteral 42))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression arg))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arg)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression gatedNegate)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testUnusedNegate ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression gatedNegate) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) , (argument (singleExpression i)) ))) !== (singleExpression i))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed first phase of testUnusedNegate"))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression gatedNegate) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression i)) ))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed second phase of testUnusedNegate"))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression gatedNegate) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) ))) + (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression i)) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed third phase of testUnusedNegate"))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testUnusedNegate) (arguments ( )))) (eos ;))))) <EOF>)