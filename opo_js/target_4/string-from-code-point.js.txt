(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad value: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression actual)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "not thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function toCodePoints ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable codePoint))) of (expressionSequence (singleExpression string)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression codePoint) . (identifierName codePointAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( )))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal "\0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal "\0\0"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ""))) , (arrayElement (singleExpression (literal "Hello"))) , (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression (literal "Cappuccino Cocoa"))) , (arrayElement (singleExpression (literal "日本語"))) , (arrayElement (singleExpression (literal "マルチバイト"))) , (arrayElement (singleExpression (literal "吉野屋"))) , (arrayElement (singleExpression (literal "𠮷野家"))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable test))) of (expressionSequence (singleExpression tests)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) . (identifierName apply)) (arguments ( (argument (singleExpression String)) , (argument (singleExpression (singleExpression toCodePoints) (arguments ( (argument (singleExpression test)) )))) )))) , (argument (singleExpression test)) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function passThrough ( (formalParameterList (formalParameterArg (assignable codePoint))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression codePoint)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName codePointAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression codePoint)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable numberTests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0x10FFFF)))) , (arrayElement (singleExpression (literal "\uDBFF\uDFFF")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0x10FFFE)))) , (arrayElement (singleExpression (literal "\uDBFF\uDFFE")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0xFFFF)))) , (arrayElement (singleExpression (literal "\uFFFF")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0x10000)))) , (arrayElement (singleExpression (literal "\uD800\uDC00")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0x10001)))) , (arrayElement (singleExpression (literal "\uD800\uDC01")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 0.0))))) , (arrayElement (singleExpression (literal "\u0000")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0xD800)))) , (arrayElement (singleExpression (literal "\uD800")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0xDC00)))) , (arrayElement (singleExpression (literal "\uDC00")))) ]))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable test))) of (expressionSequence (singleExpression numberTests)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (singleExpression test) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))) , (argument (singleExpression (singleExpression test) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD800)))) , (argument (singleExpression (literal (numericLiteral 0xDC00)))) ))) . (identifierName codePointAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 0x10000)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 17))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable plane) = (singleExpression (singleExpression (literal (numericLiteral 0x10000))) * (singleExpression i)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passThrough) (arguments ( (argument (singleExpression (singleExpression plane) + (singleExpression (literal (numericLiteral 0xFFFE))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passThrough) (arguments ( (argument (singleExpression (singleExpression plane) + (singleExpression (literal (numericLiteral 0xFFFF))))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable start) = (singleExpression (literal (numericLiteral 0xFDD0))))) ; (expressionSequence (singleExpression (singleExpression start) <= (singleExpression (literal (numericLiteral 0xFDEF))))) ; (expressionSequence (singleExpression ++ (singleExpression start))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passThrough) (arguments ( (argument (singleExpression start)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable invalidTests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression (literal (numericLiteral 1.2)))) , (arrayElement (singleExpression (literal (numericLiteral 1.5)))) , (arrayElement (singleExpression (literal (numericLiteral 30.01)))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 11.0))))) , (arrayElement (singleExpression NaN)) , (arrayElement (singleExpression (singleExpression Number) . (identifierName Infinity))) , (arrayElement (singleExpression - (singleExpression (singleExpression Number) . (identifierName Infinity)))) , (arrayElement (singleExpression (singleExpression (literal (numericLiteral 0x10FFFF))) + (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression (literal (numericLiteral 0x7FFFFFFF)))) , (arrayElement (singleExpression (singleExpression (literal (numericLiteral 0x7FFFFFFF))) + (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression (literal (numericLiteral 0xFFFFFFFF)))) , (arrayElement (singleExpression (singleExpression (literal (numericLiteral 0xFFFFFFFF))) + (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression (singleExpression (literal (numericLiteral 0x100000000))) + (singleExpression (literal (numericLiteral 32))))) , (arrayElement (singleExpression (literal "Hello"))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (objectLiteral { }))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable test))) of (expressionSequence (singleExpression invalidTests)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression test)) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "RangeError: Arguments contain a value that is out of range of code points"))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: Cannot convert a symbol to a number"))) )))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toNumberObject) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "valueOf is called"))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression toNumberObject)) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "Error: valueOf is called"))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) , (argument (singleExpression toNumberObject)) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: Cannot convert a symbol to a number"))) )))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable convertAndPassTests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal "\0")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ elementList ]))) , (arrayElement (singleExpression (literal "\0")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "0x41"))) , (arrayElement (singleExpression (literal "A")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ""))) , (arrayElement (singleExpression (literal "\0")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal "\u0001")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal "\u0000")))) ]))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable test))) of (expressionSequence (singleExpression convertAndPassTests)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCodePoint)) (arguments ( (argument (singleExpression (singleExpression test) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))) , (argument (singleExpression (singleExpression test) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) )))) (eos ;)))) })))))) <EOF>)