(program (sourceElements (sourceElement (statement (functionDeclaration function valuesAreClose ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression (singleExpression a) / (singleExpression b))) ))) - (singleExpression (literal (numericLiteral 1)))) < (singleExpression (literal (numericLiteral 1e-10))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowDoubleDoubleTestExponentFifty ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDoubleTestExponentFifty)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleIntTestExponentFifty ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleIntTestExponentFifty)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentFifty ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDoubleTestExponentFifty) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, Math.pow(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected value close to "))) + (singleExpression expected))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleIntTestExponentFifty) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, Math.pow(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected value close to "))) + (singleExpression expected))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testExponentFifty)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentFifty) (arguments ( (argument (singleExpression (literal (numericLiteral 53.70901164133102)))) , (argument (singleExpression (literal (numericLiteral 50.0)))) , (argument (singleExpression (literal (numericLiteral 3.179494118120144e+86)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentFifty) (arguments ( (argument (singleExpression (literal (numericLiteral 53.70901164133102)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 10.0))))) , (argument (singleExpression (literal (numericLiteral 5.006432842621192e-18)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDoubleTestExponentTenThousands ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDoubleTestExponentTenThousands)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleIntTestExponentTenThousands ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleIntTestExponentTenThousands)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentTenThousands ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDoubleTestExponentTenThousands) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, Math.pow(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected value close to "))) + (singleExpression expected))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleIntTestExponentTenThousands) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, Math.pow(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected value close to "))) + (singleExpression expected))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testExponentTenThousands)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentTenThousands) (arguments ( (argument (singleExpression (literal (numericLiteral 1.001)))) , (argument (singleExpression (literal (numericLiteral 10000.0)))) , (argument (singleExpression (literal (numericLiteral 21916.681339048373)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentTenThousands) (arguments ( (argument (singleExpression (literal (numericLiteral 1.001)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1.0))))) , (argument (singleExpression (literal (numericLiteral 0.9990009990009991)))) )))) (eos ;))))) <EOF>)