(program (sourceElements (sourceElement (statement (functionDeclaration function tag ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function testSyntax ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected syntax error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag``"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag`Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag`Hello${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag`${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag`${tag} ${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag`${tag}${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag.prop``"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag.prop`Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag.prop`Hello${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag.prop`${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag.prop`${tag} ${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag.prop`${tag}${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag[prop]``"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag[prop]`Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag[prop]`Hello${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag[prop]`${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag[prop]`${tag} ${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "tag[prop]`${tag}${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(tag())``"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(tag())`Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(tag())`Hello${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(tag())`${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(tag())`${tag} ${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(tag())`${tag}${tag}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class { say() { super.tag`` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class { say() { super.tag`Hello` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class { say() { super.tag`Hello${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class { say() { super.tag`${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class { say() { super.tag`${tag} ${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class { say() { super.tag`${tag}${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class extends Hello { constructor() { super()`` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class extends Hello { constructor() { super()`Hello` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class extends Hello { constructor() { super()`Hello${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class extends Hello { constructor() { super()`${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class extends Hello { constructor() { super()`${tag} ${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(class extends Hello { constructor() { super()`${tag}${tag}` } })"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "super`Hello${tag}`"))) , (argument (singleExpression (literal "SyntaxError: super is not valid in this context."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "(class { say() { super`Hello${tag}` } })"))) , (argument (singleExpression (literal "SyntaxError: Cannot use super as tag for tagged templates."))) )))) (eos ;))))) <EOF>)