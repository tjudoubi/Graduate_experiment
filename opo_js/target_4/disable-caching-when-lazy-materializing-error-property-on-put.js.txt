(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function makeError ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression makeError)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeToStack ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName stack)) = (singleExpression (literal "foo")))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeToStack)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeToStackAlreadyMaterialized ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName stack)) = (singleExpression (literal "bar")))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeToStackAlreadyMaterialized)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) = (singleExpression (singleExpression makeError) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeToStack) (arguments ( (argument (singleExpression e)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression e) . (identifierName stack)) === (singleExpression (literal "foo")))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName fooBar)) = (singleExpression (literal (numericLiteral 25))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeToStackAlreadyMaterialized) (arguments ( (argument (singleExpression e)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression e) . (identifierName stack)) === (singleExpression (literal "bar")))) )))) (eos ;)))) })))) <EOF>)