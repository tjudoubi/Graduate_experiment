(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testFunction ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression func)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression array) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "arguments"))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression array) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "caller"))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName bind)) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))))) })))) )) . (identifierName bind)) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { functionBody }))) )) . (identifierName bind)) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))))) }))) )) . (identifierName bind)) (arguments ( )))) )))) (eos ;))))) <EOF>)