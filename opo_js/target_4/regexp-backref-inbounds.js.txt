(program (sourceElements (sourceElement (statement (functionDeclaration function testRegExp ( (formalParameterList (formalParameterArg (assignable re)) , (formalParameterArg (assignable str)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression match) = (singleExpression (singleExpression (singleExpression re) . (identifierName exec)) (arguments ( (argument (singleExpression str)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errors) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression match)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression expected))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errors) (assignmentOperator +=) (singleExpression (singleExpression (literal "\nExpected no match, but got: ")) + (singleExpression match)))) (eos ;))) else (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression match) . (identifierName length)) != (singleExpression (singleExpression expected) . (identifierName length)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errors) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "\nExpected to match ")) + (singleExpression (singleExpression expected) . (identifierName length))) - (singleExpression (literal (numericLiteral 1)))) + (singleExpression (literal " groups, but matched "))) + (singleExpression (singleExpression match) . (identifierName length))) - (singleExpression (literal (numericLiteral 1)))) + (singleExpression (literal " groups.\n"))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression match) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) != (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errors) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "\nExpected results \"")) + (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) + (singleExpression (literal "\", but got \""))) + (singleExpression (singleExpression match) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) + (singleExpression (literal "\""))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkLength) = (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (singleExpression match) . (identifierName length))) , (argument (singleExpression (singleExpression expected) . (identifierName length))) ))))) (eos ;))) (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression checkLength))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression match) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errors) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "\nExpected group ")) + (singleExpression ( (expressionSequence (singleExpression (singleExpression i) - (singleExpression (literal (numericLiteral 1))))) ))) + (singleExpression (literal " to be \""))) + (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ])) + (singleExpression (literal "\", but got \""))) + (singleExpression (singleExpression match) [ (expressionSequence (singleExpression i)) ])) + (singleExpression (literal "\""))))) (eos ;)))))) }))))) }))))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression expected)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errors) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (literal "\nExpected a match of ")) + (singleExpression expected)) + (singleExpression (literal ", but didn't match"))))) (eos ;)))))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression errors) . (identifierName length))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression errors) . (identifierName substring)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*(\1.)/))) , (argument (singleExpression (literal "    "))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "    "))) , (arrayElement (singleExpression (literal " "))) , (arrayElement (singleExpression (literal "  ")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*(\1+?)a/))) , (argument (singleExpression (literal "    "))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*?(.+)/))) , (argument (singleExpression (literal "xxxx"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "xxxx"))) , (arrayElement (singleExpression (literal "x"))) , (arrayElement (singleExpression (literal "xxx")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.{2})\1*(.+)/))) , (argument (singleExpression (literal "xxxx"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "xxxx"))) , (arrayElement (singleExpression (literal "xx"))) , (arrayElement (singleExpression (literal "xx")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.{2})\1*?(.+)/))) , (argument (singleExpression (literal "xxxx"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "xxxx"))) , (arrayElement (singleExpression (literal "xx"))) , (arrayElement (singleExpression (literal "xx")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.{2})\1*(.+)/))) , (argument (singleExpression (literal "xxx"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "xxx"))) , (arrayElement (singleExpression (literal "xx"))) , (arrayElement (singleExpression (literal "x")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.{2})\1*?(.+)/))) , (argument (singleExpression (literal "xxx"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "xxx"))) , (arrayElement (singleExpression (literal "xx"))) , (arrayElement (singleExpression (literal "x")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*(.+)/s))) , (argument (singleExpression (literal "======="))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "======="))) , (arrayElement (singleExpression (literal "="))) , (arrayElement (singleExpression (literal "=")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*?(.+)/s))) , (argument (singleExpression (literal "======="))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "======="))) , (arrayElement (singleExpression (literal "="))) , (arrayElement (singleExpression (literal "======")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*(X)/s))) , (argument (singleExpression (literal "======X"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "======X"))) , (arrayElement (singleExpression (literal "="))) , (arrayElement (singleExpression (literal "X")))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal /^(.)\1*?(X)/s))) , (argument (singleExpression (literal "======X"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "======X"))) , (arrayElement (singleExpression (literal "="))) , (arrayElement (singleExpression (literal "X")))) ]))) )))) (eos ;))))) <EOF>)