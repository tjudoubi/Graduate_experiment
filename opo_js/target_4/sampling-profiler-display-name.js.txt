(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression platformSupportsSamplingProfiler) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./sampling-profiler/samplingProfiler.js"))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal "p")))) ]) = (singleExpression i))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName displayName)) = (singleExpression (literal "display foo")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression foo)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "display foo")))) ]))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal "p")))) ]) = (singleExpression i))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression baz)) , (argument (singleExpression (literal 'displayName'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "shouldnt be called"))) ))))) (eos ;)))))) }))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression baz)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "baz")))) ]))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal "p")))) ]) = (singleExpression i))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression bar) . (identifierName displayName)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression bar)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "bar")))) ]))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression jaz) (arguments ( )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal "p")))) ]) = (singleExpression i))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression jaz) . (identifierName displayName)) = (singleExpression (literal "")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression jaz)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "jaz")))) ]))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeFunction) (arguments ( (argument (singleExpression displayName)) )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal "p")))) ]) = (singleExpression i))) (eos ;)))) })) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName displayName)) = (singleExpression displayName))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression (singleExpression makeFunction) (arguments ( (argument (singleExpression (literal "hello world"))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "hello world")))) ]))) )))) eos)))) } <EOF>)