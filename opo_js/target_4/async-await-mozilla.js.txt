(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression msg)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeAsync ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable run)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression hadError)) ) (statement (throwStatement throw (expressionSequence (singleExpression actual)) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression actual)) , (argument (singleExpression msg)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable run)) , (formalParameterArg (assignable errorType)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression (singleExpression run) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression hadError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal ", but did not throw.")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression actual) instanceof (singleExpression errorType))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expeced ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal " , but threw '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression message) !== (singleExpression void (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression actual) . (identifierName message)) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw '"))) + (singleExpression message)) + (singleExpression (literal "', but threw '"))) + (singleExpression (singleExpression actual) . (identifierName message))) + (singleExpression (literal "'")))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowAsync ( (formalParameterList (formalParameterArg (assignable run)) , (formalParameterArg (assignable errorType)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression hadError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal ", but did not throw.")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression actual) instanceof (singleExpression errorType))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw "))) + (singleExpression (singleExpression errorType) . (identifierName name))) + (singleExpression (literal ", but threw '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression message) !== (singleExpression void (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression actual) . (identifierName message)) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression run)) + (singleExpression (literal "() to throw '"))) + (singleExpression message)) + (singleExpression (literal "', but threw '"))) + (singleExpression (singleExpression actual) . (identifierName message))) + (singleExpression (literal "'")))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression msg)) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable str)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression message)) === (singleExpression (literal "string")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression e) . (identifierName message)) === (singleExpression message))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected '")) + (singleExpression message)) + (singleExpression (literal "' but threw '"))) + (singleExpression (singleExpression e) . (identifierName message))) + (singleExpression (literal "'")))) )))) (eos ;)))))) }))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression hadError)) , (argument (singleExpression (literal "Did not throw syntax error"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function mozSemantics ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function empty ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function simpleReturn ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function simpleAwait ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression await (singleExpression (literal (numericLiteral 2)))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function simpleAwaitAsync ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression await (singleExpression (singleExpression simpleReturn) (arguments ( )))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 2))) + (singleExpression result))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function returnOtherAsync ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) + (singleExpression await (singleExpression (singleExpression simpleAwaitAsync) (arguments ( )))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function simpleThrower ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function delegatedThrower ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable val) = (singleExpression await (singleExpression (singleExpression simpleThrower) (arguments ( )))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression val)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function tryCatch ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression delegatedThrower) (arguments ( ))))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal 'FAILED'))) (eos ;)))) }) (catchProduction catch ( (assignable _) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 5)))) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function tryCatchThrow ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression delegatedThrower) (arguments ( ))))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal 'FAILED'))) (eos ;)))) }) (catchProduction catch ( (assignable _) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression delegatedThrower) (arguments ( )))) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function wellFinally ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression delegatedThrower) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable _) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal 'FAILED'))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 6)))) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function finallyMayFail ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression delegatedThrower) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable _) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 5)))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression delegatedThrower) (arguments ( )))) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function embedded ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function inner ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 7)))) (eos ;)))))) })))) eos))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression await (singleExpression (singleExpression inner) (arguments ( ))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function fib ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1)))))) )) ? (singleExpression n) : (singleExpression (singleExpression await (singleExpression (singleExpression fib) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) + (singleExpression await (singleExpression (singleExpression fib) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 2))))) ))))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function isOdd ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function isEven ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression n) === (singleExpression (literal (numericLiteral 0)))) || (singleExpression await (singleExpression (singleExpression isOdd) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))))) })))) eos))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression n) !== (singleExpression (literal (numericLiteral 0)))) && (singleExpression await (singleExpression (singleExpression isEven) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hardcoreFib) = (singleExpression (anoymousFunction (functionDeclaration async function fib2 ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1)))))) )) ? (singleExpression n) : (singleExpression (singleExpression await (singleExpression (singleExpression fib2) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) + (singleExpression await (singleExpression (singleExpression fib2) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 2))))) ))))))) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable asyncExpr) = (singleExpression (anoymousFunction async function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 10)))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable namedAsyncExpr) = (singleExpression (anoymousFunction (functionDeclaration async function simple ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 11)))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function executionOrder ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function first ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression (singleExpression value) === (singleExpression (literal (numericLiteral 0)))) ? (singleExpression (literal (numericLiteral 1))) : (singleExpression value)))) ))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function second ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression (singleExpression value) === (singleExpression (literal (numericLiteral 0)))) ? (singleExpression (literal (numericLiteral 2))) : (singleExpression value)))) ))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function third ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression (singleExpression value) === (singleExpression (literal (numericLiteral 0)))) ? (singleExpression (literal (numericLiteral 3))) : (singleExpression value)))) ))) (eos ;)))))) })))) eos))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression await (singleExpression (singleExpression first) (arguments ( )))) + (singleExpression await (singleExpression (singleExpression second) (arguments ( ))))) + (singleExpression await (singleExpression (singleExpression third) (arguments ( ))))) + (singleExpression (literal (numericLiteral 6))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function miscellaneous ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) === (singleExpression (literal (numericLiteral 3)))) && (singleExpression (singleExpression (singleExpression (singleExpression arguments) . (identifierName callee)) . (identifierName name)) === (singleExpression (literal "miscellaneous"))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 14)))) (eos ;)))))))) })))) eos))) (sourceElement (statement (functionDeclaration function thrower ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal (numericLiteral 15)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function defaultArgs ( (formalParameterList (formalParameterArg (assignable arg) = (singleExpression (singleExpression thrower) (arguments ( ))))) ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function Person ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Person) (arguments ( ))))) (eos ;)))))) })))) , (argument (singleExpression TypeError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression empty)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression simpleReturn)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression simpleAwait)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression simpleAwaitAsync)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) , (argument (singleExpression returnOtherAsync)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowAsync) (arguments ( (argument (singleExpression simpleThrower)) , (argument (singleExpression Error)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression tryCatch)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 6)))) , (argument (singleExpression wellFinally)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowAsync) (arguments ( (argument (singleExpression finallyMayFail)) , (argument (singleExpression Error)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression embedded)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 8)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression fib) (arguments ( (argument (singleExpression (literal (numericLiteral 6)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 9)))) , (argument (singleExpression executionOrder)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression asyncExpr)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 11)))) , (argument (singleExpression namedAsyncExpr)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 12)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression isOdd) (arguments ( (argument (singleExpression (literal (numericLiteral 12)))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters v) => (arrowFunctionBody (singleExpression (singleExpression v) ? (singleExpression (literal "oops")) : (singleExpression (literal (numericLiteral 12)))))))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression hardcoreFib) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 14)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression miscellaneous) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 15)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression defaultArgs) (arguments ( ))) . (identifierName (reservedWord (keyword catch)))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters e) => (arrowFunctionBody (singleExpression e))))) ))))))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function mozMethods ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class X (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))))) })) (classElement async (methodDefinition (propertyName (identifierName getValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName value))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName setValue)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression value))) (eos ;)))))) })) (classElement async (methodDefinition (propertyName (identifierName increment)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression await (singleExpression (singleExpression (singleExpression this) . (identifierName getValue)) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName setValue)) (arguments ( (argument (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName getValue)) (arguments ( )))) (eos ;)))))) })) (classElement async (methodDefinition (propertyName (identifierName getBaseClassName)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'X'))) (eos ;)))))) })) (classElement static async (methodDefinition (propertyName (identifierName getStaticValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 44)))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class Y (classTail extends (singleExpression X) { (classElement async (methodDefinition (propertyName (identifierName getBaseClassName)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName getBaseClassName)) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable objLiteral) = (singleExpression (objectLiteral { (propertyAssignment async (propertyName (identifierName get)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 45)))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName someStuff)) : (singleExpression (literal (numericLiteral 5)))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression new (singleExpression (singleExpression X) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y) = (singleExpression new (singleExpression (singleExpression Y) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression x) . (identifierName getValue)) (arguments ( ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 43)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression x) . (identifierName increment)) (arguments ( ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 44)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression X) . (identifierName getStaticValue)) (arguments ( ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal (numericLiteral 45)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression objLiteral) . (identifierName get)) (arguments ( ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal 'X'))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression y) . (identifierName getBaseClassName)) (arguments ( ))))))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function mozFunctionNameInferrence ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function test ( ) { functionBody })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable anon) = (singleExpression (anoymousFunction async function ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "test"))) , (argument (singleExpression (singleExpression test) . (identifierName name))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "anon"))) , (argument (singleExpression (singleExpression anon) . (identifierName name))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function mozSyntaxErrors ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; async function eval() {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; async function arguments() {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function a(k = super.prop) { }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function a() { super.prop(); }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function a() { super(); }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function a(k = await 3) {}"))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;))))) <EOF>)