(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression proxy)) ))) === (singleExpression (literal "[]")))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression target) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "foo")))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression proxy)) ))) === (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression target)) ))))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression target) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 25)))) , (propertyAssignment (propertyName (identifierName bar)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 45)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression proxy)) ))) === (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression target)) ))))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression target) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "baz"))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 45)))) })))) ]))) , (propertyAssignment (propertyName (identifierName bar)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 45)))) , (propertyAssignment (propertyName (identifierName baz)) : (singleExpression (literal "hello world"))) , (propertyAssignment (propertyName (identifierName jaz)) : (singleExpression (literal (numericLiteral 4553.434)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression proxy)) ))) === (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression target)) ))))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression target) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "baz"))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 45)))) })))) ]))) , (propertyAssignment (propertyName (identifierName bar)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 45)))) , (propertyAssignment (propertyName (identifierName baz)) : (singleExpression (literal "hello world"))) , (propertyAssignment (propertyName (identifierName jaz)) : (singleExpression (literal (numericLiteral 4553.434)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression proxy)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression proxy)) ))) === (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression target)) ))))) )))) (eos ;))))) } ) ; test ( function ( ) { let target = [ 20 , 30 , "foo" , { hello : "world" } ] ; let proxy = new Proxy ( target , { } ) ; for ( let i = 0 ; i < 50 ; i ++ ) proxy = new Proxy ( proxy , { } ) ; assert ( JSON . stringify ( proxy ) === JSON . stringify ( target ) ) ; } ) ; test ( function ( ) { let target = { foo : [ "baz" , { foo : 45 } ] , bar : false , 0 : 45 , baz : "hello world" , jaz : 4553.434 } ; let { proxy , revoke } = Proxy . revocable ( target , { } ) ; assert ( JSON . stringify ( proxy ) === JSON . stringify ( target ) ) ; revoke ( ) ; JSON . stringify ( target ) ; let threw = false ; try { JSON . stringify ( proxy ) ; } catch ( e ) { threw = true ; assert ( e . toString ( ) === "TypeError: Proxy has already been revoked. No more operations are allowed to be performed on it" ) ; } assert ( threw ) ; } ) ; test ( function ( ) { let target = [ "foo" , "bar" , 25 , false ] ; let proxy = new Proxy ( target , { } ) ; let revoke ; for ( let i = 0 ; i < 50 ; i ++ ) { if ( i === 25 ) { let result = Proxy . revocable ( proxy , { } ) ; proxy = result . proxy ; revoke = result . revoke ; } else { proxy = new Proxy ( proxy , { } ) ; } } assert ( JSON . stringify ( proxy ) === JSON . stringify ( target ) ) ; revoke ( ) ; JSON . stringify ( target ) ; let threw = false ; try { JSON . stringify ( proxy ) ; } catch ( e ) { threw = true ; assert ( e . toString ( ) === "TypeError: Proxy has already been revoked. No more operations are allowed to be performed on it" ) ; } assert ( threw ) ; } ) ; test ( function ( ) { let arr = [ "foo" , 25 , "bar" ] ; let handler = { get : function ( theTarget , propName ) { assert ( propName === "toJSON" ) ; return function ( ) { return arr ; } } } ; let proxy = new Proxy ( { } , handler ) ; assert ( JSON . stringify ( proxy ) === JSON . stringify ( arr ) ) ; } ) ; test ( function ( ) { let arr = [ "foo" , 25 , "bar" ] ; let handler = { get : function ( theTarget , propName ) { assert ( propName === "toJSON" ) ; return function ( ) { return arr ; } } } ; let proxy = new Proxy ( { } , handler ) ; let o1 = { foo : arr } ; let o2 = { foo : proxy } ; assert ( JSON . stringify ( o1 ) === JSON . stringify ( o2 ) ) ; } ) ; test ( function ( ) { let arr = [ "foo" , 25 , "bar" ] ; let proxy = new Proxy ( function ( ) { return arr ; } , { } ) ; assert ( JSON . stringify ( { toJSON : proxy } ) === JSON . stringify ( arr ) ) ; } ) ; test ( function ( ) { let arr = [ "foo" , 25 , "bar" ] ; let proxy = new Proxy ( { } , { } ) ; let o = { foo : 20 } ; Object . defineProperty ( o , "toJSON" , { enumerable : false , value : proxy } ) ; assert ( JSON . stringify ( o ) === JSON . stringify ( { foo : 20 } ) ) ; } ) ;)