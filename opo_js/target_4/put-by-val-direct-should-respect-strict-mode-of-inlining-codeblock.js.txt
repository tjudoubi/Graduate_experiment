(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression totalFailed) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldEqual ( (formalParameterList (formalParameterArg (assignable testId)) , (formalParameterArg (assignable iteration)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Test #")) + (singleExpression testId)) + (singleExpression (literal ", iteration "))) + (singleExpression iteration)) + (singleExpression (literal ", ERROR: expected \""))) + (singleExpression expected)) + (singleExpression (literal "\", got \""))) + (singleExpression actual)) + (singleExpression (literal "\"")))) ))))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function makeUnwriteableUnconfigurableObject ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal "frozen"))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal false))) }))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testArrayOf ( (formalParameterList (formalParameterArg (assignable obj))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName of)) . (identifierName call)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression obj)) (eos ;)))))) }))) , (argument (singleExpression (literal "no longer frozen"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testArrayOf)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numIterations) = (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (functionDeclaration function runTest ( (formalParameterList (formalParameterArg (assignable testId)) , (formalParameterArg (assignable test)) , (formalParameterArg (assignable sourceMaker)) , (formalParameterArg (assignable expectedException))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numIterations))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception) = (singleExpression (literal "No exception")))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (singleExpression sourceMaker) (arguments ( ))))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression obj)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression (singleExpression (literal "")) + (singleExpression e)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression (singleExpression (singleExpression exception) . (identifierName substr)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 10)))) ))))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression testId)) , (argument (singleExpression i)) , (argument (singleExpression exception)) , (argument (singleExpression expectedException)) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression testArrayOf)) , (argument (singleExpression makeUnwriteableUnconfigurableObject)) , (argument (singleExpression (literal "TypeError:"))) )))) (eos ;))))) <EOF>)