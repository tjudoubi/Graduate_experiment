(program (sourceElements (sourceElement (statement (functionDeclaration function upsilonReferencingItsPhi ( (formalParameterList (formalParameterArg (assignable index)) , (formalParameterArg (assignable input))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outputDouble) = (singleExpression input))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression index)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) & (singleExpression (literal (numericLiteral 0x4))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outputDouble) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression outputDouble)) ))) + (singleExpression (singleExpression Math) . (identifierName PI))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (singleExpression index) >>> (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression outputDouble)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression upsilonReferencingItsPhi)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedNotTaken) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedTaken) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))) + (singleExpression (singleExpression Math) . (identifierName PI)))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression branchNotTakenResult) = (singleExpression (singleExpression upsilonReferencingItsPhi) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression branchNotTakenResult) !== (singleExpression expectedNotTaken))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed upsilonReferencingItsPhi(3, Math.LN2) at i = ")) + (singleExpression i)) + (singleExpression (literal " result = "))) + (singleExpression branchNotTakenResult))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression branchTakenResult) = (singleExpression (singleExpression upsilonReferencingItsPhi) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression branchTakenResult) !== (singleExpression expectedTaken))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed upsilonReferencingItsPhi(7, Math.LN2) at i = ")) + (singleExpression i)) + (singleExpression (literal " result = "))) + (singleExpression branchTakenResult))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function upsilonReferencingItsPhiAllFloat ( (formalParameterList (formalParameterArg (assignable index)) , (formalParameterArg (assignable input))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outputDouble) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression input)) ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression index)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) & (singleExpression (literal (numericLiteral 0x4))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outputDouble) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression outputDouble)) ))) + (singleExpression (singleExpression Math) . (identifierName PI))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (singleExpression index) >>> (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression outputDouble)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression upsilonReferencingItsPhiAllFloat)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression branchNotTakenResult) = (singleExpression (singleExpression upsilonReferencingItsPhiAllFloat) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression branchNotTakenResult) !== (singleExpression expectedNotTaken))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed upsilonReferencingItsPhiAllFloat(3, Math.LN2) at i = ")) + (singleExpression i)) + (singleExpression (literal " result = "))) + (singleExpression branchNotTakenResult))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression branchTakenResult) = (singleExpression (singleExpression upsilonReferencingItsPhiAllFloat) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression branchTakenResult) !== (singleExpression expectedTaken))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed upsilonReferencingItsPhiAllFloat(7, Math.LN2) at i = ")) + (singleExpression i)) + (singleExpression (literal " result = "))) + (singleExpression branchTakenResult))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function upsilonReferencingItsPhiWithoutConversion ( (formalParameterList (formalParameterArg (assignable index)) , (formalParameterArg (assignable input))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outputDouble) = (singleExpression input))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression index)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) & (singleExpression (literal (numericLiteral 0x4))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outputDouble) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression outputDouble)) ))) + (singleExpression (singleExpression Math) . (identifierName PI))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (singleExpression index) >>> (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression outputDouble)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression upsilonReferencingItsPhiWithoutConversion)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedNotTakenWithoutConversion) = (singleExpression (singleExpression Math) . (identifierName LN2)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedTakenWithoutConversion) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))) + (singleExpression (singleExpression Math) . (identifierName PI))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression branchNotTakenResult) = (singleExpression (singleExpression upsilonReferencingItsPhiWithoutConversion) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression branchNotTakenResult) !== (singleExpression expectedNotTakenWithoutConversion))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed upsilonReferencingItsPhiWithoutConversion(3, Math.LN2) at i = ")) + (singleExpression i)) + (singleExpression (literal " result = "))) + (singleExpression branchNotTakenResult))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression branchTakenResult) = (singleExpression (singleExpression upsilonReferencingItsPhiWithoutConversion) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression branchTakenResult) !== (singleExpression expectedTakenWithoutConversion))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed upsilonReferencingItsPhiWithoutConversion(7, Math.LN2) at i = ")) + (singleExpression i)) + (singleExpression (literal " result = "))) + (singleExpression branchTakenResult))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function conversionPropagages ( (formalParameterList (formalParameterArg (assignable flags)) , (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0.5))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression flags) & (singleExpression (literal (numericLiteral 0x1))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression flags) & (singleExpression (literal (numericLiteral 0x2))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression flags) & (singleExpression (literal (numericLiteral 0x4))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression flags) & (singleExpression (literal (numericLiteral 0x8))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression a)) ))) + (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression b)) )))))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 6.5))))) (eos ;)))) }))))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 4.5))))) (eos ;)))) }))))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 2.5))))) (eos ;)))) }))))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 1.5))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression result)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression conversionPropagages)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression conversionPropagageExpectedResult) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))) + (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression conversionPropagages) (arguments ( (argument (singleExpression (literal (numericLiteral 0xf)))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) , (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression conversionPropagageExpectedResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed conversionPropagages(0xf, Math.LN2, Math.PI)"))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function chainedUpsilonBothConvert ( (formalParameterList (formalParameterArg (assignable condition1)) , (formalParameterArg (assignable condition2)) , (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression firstPhi)) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression condition1)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression firstPhi) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression a)) ))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression firstPhi) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression b)) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression secondPhi)) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression condition2)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression secondPhi) = (singleExpression (singleExpression firstPhi) + (singleExpression (literal (numericLiteral 2)))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression secondPhi) = (singleExpression (singleExpression firstPhi) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression secondPhi)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression chainedUpsilonBothConvert)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedChainedUpsilonBothConvert) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))) + (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression chainedUpsilonBothConvert) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression Math) . (identifierName PI))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))) !== (singleExpression expectedChainedUpsilonBothConvert))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed chainedUpsilonBothConvert(1, 0, Math.PI, Math.LN2)"))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function chainedUpsilonFirstConvert ( (formalParameterList (formalParameterArg (assignable condition1)) , (formalParameterArg (assignable condition2)) , (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression firstPhi)) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression condition1)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression firstPhi) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression a)) ))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression firstPhi) = (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression b)) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression secondPhi)) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression condition2)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression secondPhi) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression firstPhi)) ))) + (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (literal (numericLiteral 3))))) )))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression secondPhi) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression firstPhi)) ))) - (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (literal (numericLiteral 3))))) )))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression secondPhi)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression chainedUpsilonFirstConvert)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedChainedUpsilonFirstConvert) = (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))) - (singleExpression (singleExpression (singleExpression Math) . (identifierName fround)) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (literal (numericLiteral 3))))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression chainedUpsilonFirstConvert) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression Math) . (identifierName PI))) , (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))) !== (singleExpression expectedChainedUpsilonFirstConvert))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed chainedUpsilonFirstConvert(1, 0, Math.PI, Math.LN2)"))) (eos ;)))))) })))) <EOF>)