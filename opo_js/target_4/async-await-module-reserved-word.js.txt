(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function checkModuleSyntaxError ( (formalParameterList (formalParameterArg (assignable source)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression source)) ))))))) , (argument (singleExpression errorMessage)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `var await;`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as a variable name in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (literal `export var await;`))) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as a variable name in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `let await;`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as a lexical variable name in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export let await;`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as a lexical variable name in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `const await = 1`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as a lexical variable name in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export const await = 1`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as a lexical variable name in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `function await() {}`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare function named 'await' in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `function* await() {}`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare function named 'await' in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `async function await() {}`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare function named 'await' in a module.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import {await} from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import {foo as await} from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as await from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import await, {x, y, z} from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import await, {x, y, z,} from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import await from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import await, * as foo from 'foo';`)) , (argument (singleExpression (literal `SyntaxError: Cannot use 'await' as an imported binding name.:2`))) )))) (eos ;))))) <EOF>)