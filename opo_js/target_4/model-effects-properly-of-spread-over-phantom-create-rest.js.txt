(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function f1 ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable result) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable key))) of (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression o)) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName push)) (arguments ( (argument (singleExpression key)) )))) eos))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function f2 ( (formalParameterList (formalParameterArg (assignable a1)) , (formalParameterArg (assignable a2)) , (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable r) = (singleExpression (singleExpression f1) (arguments ( (argument (singleExpression a1)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (singleExpression a2) % (singleExpression (singleExpression r) . (identifierName length)))) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) [ (expressionSequence (singleExpression index)) ]) (arguments ( (argument ... (singleExpression args)) )))) eos))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable theObj) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable o2) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) === (singleExpression (literal (numericLiteral 42))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) === (singleExpression theObj))) eos))) (sourceElement (statement (tryStatement try (block { }) (catchProduction catch ( (assignable e) ) (block { }))))))) }))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression (singleExpression j) ++)) ) (statement (block { })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f2) (arguments ( (argument (singleExpression o2)) , (argument (singleExpression (literal (numericLiteral 897989)))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression theObj)) )))) (eos ;)))) })))))) <EOF>)