(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testValue) = (singleExpression (literal 'test-value')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable A) = (singleExpression class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName idValue)) = (singleExpression testValue))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable B) = (singleExpression class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable inArrowFuction)) , (formalParameterArg (assignable inConstructor)) , (formalParameterArg (assignable setProtoToNull))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword if)))) ( (formalParameterList (formalParameterArg (assignable inArrowFuction))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: super() should create this and put value into idValue property"))) )))) (eos ;)))))) }) }))))))))))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression inArrowFuction)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arrow) (arguments ( ))) (arguments ( ))) (arguments ( )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression inConstructor)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: arrow function should return this to constructor"))) )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testException) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression ReferenceError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Exception thrown was not a correct error. Expected ReferenceError but was ")) + (singleExpression (singleExpression e) . (identifierName name)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression exception))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Exception not thrown for an unitialized this at iteration #")) + (singleExpression index))) (eos ;)))))))) })))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testException) (arguments ( (argument (singleExpression i)) , (argument (singleExpression ReferenceError)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable C) = (singleExpression class C (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression __proto__) = (singleExpression (literal 'some-text')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression typeof (singleExpression __proto__))) , (argument (singleExpression (literal 'string'))) , (argument (singleExpression (literal "Erorr: __proto__ variable has wrong type"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: super() should create this and put value into idValue property"))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: arrow function should return this to constructor"))) )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression C) (arguments ( ))))) (eos ;)))) }))))) (sourceElement (statement (classDeclaration class D (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable doReplaceProto))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression super) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression doReplaceProto)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression D) . (identifierName __proto__)) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression D) (arguments ( (argument (singleExpression (literal false))) ))))) )) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: arrow function bound wrong super"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression D) (arguments ( (argument (singleExpression (literal true))) ))))) )) . (identifierName idValue)))) , (argument (singleExpression (literal "undefined"))) , (argument (singleExpression (literal "Error: arrow function bound wrong super"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class E (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable doReplaceProto))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression doReplaceProto)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression E) . (identifierName __proto__)) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression E) (arguments ( (argument (singleExpression (literal false))) ))))) )) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: arrow function bound wrong super #1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression E) (arguments ( (argument (singleExpression (literal true))) ))))) )) . (identifierName idValue)))) , (argument (singleExpression (literal "undefined"))) , (argument (singleExpression (literal "Error: arrow function bound wrong super #1"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class F (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable doReplaceProto))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression F) . (identifierName __proto__)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testTypeErrorException) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression F) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Exception thrown was not a correct error. Expected TypeError but was ")) + (singleExpression (singleExpression e) . (identifierName name)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression exception))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Exception not thrown for an unitialized this at iteration #")) + (singleExpression index))) (eos ;)))))))) })))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeErrorException) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorStack))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ParentClass) = (singleExpression class ParentClass (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName idValue)) = (singleExpression testValue))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Error'))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorStack) = (singleExpression (singleExpression e) . (identifierName stack)))) (eos ;)))) }))))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ChildClass) = (singleExpression class ChildClass (classTail extends (singleExpression ParentClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrowInChildConstructor) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nestedArrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nestedArrow) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrowInChildConstructor) (arguments ( )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorStack) = (singleExpression (literal '')))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression new (singleExpression (singleExpression ChildClass) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression parentClassIndexOf) = (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'ParentClass'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nestedArrowIndexOf) = (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'nestedArrow'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrowInChildConstructorIndexOf) = (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'arrowInChildConstructor'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression childClassIndexOf) = (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'ChildClass'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression parentClassIndexOf) > (singleExpression - (singleExpression (literal (numericLiteral 1))))) && (singleExpression (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'ParentClass'))) , (argument (singleExpression (singleExpression parentClassIndexOf) + (singleExpression (literal (numericLiteral 1))))) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1))))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: stack of error should contain ParentClass text"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression nestedArrowIndexOf) > (singleExpression - (singleExpression (literal (numericLiteral 1))))) && (singleExpression (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'nestedArrow'))) , (argument (singleExpression (singleExpression nestedArrowIndexOf) + (singleExpression (literal (numericLiteral 1))))) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1))))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: stack of error should contain nestedArrow text"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression arrowInChildConstructorIndexOf) > (singleExpression - (singleExpression (literal (numericLiteral 1))))) && (singleExpression (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'arrowInChildConstructor'))) , (argument (singleExpression (singleExpression arrowInChildConstructorIndexOf) + (singleExpression (literal (numericLiteral 1))))) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1))))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: stack of error should contain arrowInChildConstructor text"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression childClassIndexOf) > (singleExpression - (singleExpression (literal (numericLiteral 1))))) && (singleExpression (singleExpression (singleExpression (singleExpression errorStack) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal 'ChildClass'))) , (argument (singleExpression (singleExpression childClassIndexOf) + (singleExpression (literal (numericLiteral 1))))) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1))))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: stack of error should contains ChildClass text"))) )))) (eos ;)))) })))))) <EOF>)