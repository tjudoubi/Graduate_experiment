(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression e))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected: ")) + (singleExpression e)) + (singleExpression (literal " bug got: "))) + (singleExpression a))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression predicate) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression v) = (singleExpression a))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression predicate)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression v) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (singleExpression v) / (singleExpression (literal (numericLiteral 2)))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>))) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal "10"))) )))) , (argument (singleExpression (literal (numericLiteral 5)))) )))) (eos ;)))) })))) } ) ( ) ; ( ( ) => { let predicate = true ; function foo ( a ) { let v = a ; if ( predicate ) v = 10.5 ; let c = v / 2 ; return c ; } noInline ( foo ) ; for ( let i = 0 ; i < 10000 ; i ++ ) { assert ( foo ( "10" ) , 5.25 ) ; } } ) ( ) ;)