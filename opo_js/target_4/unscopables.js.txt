(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable unscopables) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression typeof (singleExpression unscopables))) , (argument (singleExpression (literal "object"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression unscopables) . (identifierName __proto__))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName keys)) (arguments ( (argument (singleExpression unscopables)) ))) . (identifierName sort)) (arguments ( )))) )))) , (argument (singleExpression (literal "copyWithin,entries,fill,find,findIndex,flat,flatMap,includes,keys,values"))) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable find) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable forEach) = (singleExpression (literal "Hidden")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression array) . (identifierName find)))) , (argument (singleExpression (literal "function"))) )))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression array)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression typeof (singleExpression find))) , (argument (singleExpression (literal "string"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression find)) , (argument (singleExpression (literal "Cocoa"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression typeof (singleExpression forEach))) , (argument (singleExpression (literal "function"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression __proto__)) , (argument (singleExpression (singleExpression Array) . (identifierName prototype))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName unscopables)) ]) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName Cappuccino)) : (singleExpression (literal true))) }))) , (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal null))) , (propertyAssignment (propertyName (identifierName Cappuccino)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cappuccino) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toString) = (singleExpression (literal "toString")))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal "Cappuccino"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression toString)) , (argument (singleExpression (literal "toString"))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName Cocoa)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal "Cocoa"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal "Cappuccino"))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable unscopables) = (singleExpression (singleExpression (singleExpression Object) . (identifierName create)) (arguments ( (argument (singleExpression (literal null))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unscopables) . (identifierName Cocoa)) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unscopables) . (identifierName Cappuccino)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName unscopables)) ]) : (singleExpression unscopables)) , (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal null))) , (propertyAssignment (propertyName (identifierName Cappuccino)) : (singleExpression (literal null))) , (propertyAssignment (propertyName (identifierName Matcha)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cappuccino) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Matcha) = (singleExpression (literal "Matcha")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toString) = (singleExpression (literal "toString")))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal "Cappuccino"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Matcha)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression toString)) , (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName Cocoa)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName Cappuccino)) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName toString)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal "Cocoa"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression toString)) , (argument (singleExpression (literal "toString"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Matcha)) , (argument (singleExpression (literal null))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proto) = (singleExpression (singleExpression (singleExpression Object) . (identifierName create)) (arguments ( (argument (singleExpression (literal null))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable unscopables) = (singleExpression (singleExpression (singleExpression Object) . (identifierName create)) (arguments ( (argument (singleExpression proto)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unscopables) . (identifierName Cocoa)) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unscopables) . (identifierName Cappuccino)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName unscopables)) ]) : (singleExpression unscopables)) , (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal null))) , (propertyAssignment (propertyName (identifierName Cappuccino)) : (singleExpression (literal null))) , (propertyAssignment (propertyName (identifierName Matcha)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cappuccino) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Matcha) = (singleExpression (literal "Matcha")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toString) = (singleExpression (literal "toString")))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal "Cappuccino"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Matcha)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression toString)) , (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName Cocoa)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName Cappuccino)) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName toString)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal "Cocoa"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression toString)) , (argument (singleExpression (literal "toString"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Matcha)) , (argument (singleExpression (literal null))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression proto) . (identifierName Matcha)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal "Cocoa"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal null))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression toString)) , (argument (singleExpression (literal "toString"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Matcha)) , (argument (singleExpression (literal "Matcha"))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName Cocoa))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "bad trap"))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName Cappuccino)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName Cappuccino)) : (singleExpression (literal true))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cappuccino) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toString) = (singleExpression (literal "toString")))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal "Cocoa"))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName unscopables))) ]) . (identifierName Cocoa)) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression Cocoa)) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) , (argument (singleExpression (literal "Error: bad trap"))) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal null))) , })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (singleExpression Symbol) . (identifierName unscopables))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "unscopables trap"))) ))))) (eos ;)))))) }))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cappuccino) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression Cocoa)) eos))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) , (argument (singleExpression (literal "Error: unscopables trap"))) )))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal "Cappuccino"))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName unscopables)) ]) : (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName Cocoa))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "unscopables trap"))) ))))) (eos ;)))))) }) }))) , (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal null))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cappuccino) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression Cocoa)) eos))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) , (argument (singleExpression (literal "Error: unscopables trap"))) )))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cappuccino)) , (argument (singleExpression (literal "Cappuccino"))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName unscopables)) ]) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (identifierName Cocoa)) : (singleExpression (literal "OK"))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Cocoa) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression object)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression Cocoa)) , (argument (singleExpression (literal "OK"))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;))))) <EOF>)