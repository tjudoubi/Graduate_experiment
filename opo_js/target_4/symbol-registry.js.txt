(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad value: ")) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hello) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Hello"))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proto) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "__proto__"))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable sym))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression hello)) , (arrayElement (singleExpression proto)) , (arrayElement (singleExpression (singleExpression Symbol) . (identifierName iterator)))) ]))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName keyFor)) (arguments ( (argument (singleExpression sym)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression key)) , (argument (singleExpression undefined)) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName keyFor)) (arguments ( (argument (singleExpression sym)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression key)) , (argument (singleExpression undefined)) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable keys) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Hello"))) , (arrayElement (singleExpression (literal "__proto__"))) , (arrayElement (singleExpression (literal "Symbol.iterator"))) , (arrayElement (singleExpression (literal ''))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 20.5)))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 42))))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 20.5))))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (anoymousFunction function ( ) { functionBody }))) , (arrayElement (singleExpression (arrayLiteral [ elementList ]))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable key))) of (expressionSequence (singleExpression keys)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sym) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression key)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression typeof (singleExpression sym))) , (argument (singleExpression (literal "symbol"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression sym) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (singleExpression (singleExpression (literal "Symbol(")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression key)) )))) + (singleExpression (literal ")")))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sym2) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression key)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression sym) === (singleExpression sym2))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName keyFor)) (arguments ( (argument (singleExpression sym)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression key)) , (argument (singleExpression key)) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName keyFor)) (arguments ( (argument (singleExpression sym2)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression key)) , (argument (singleExpression key)) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'toString'))) ))))) (eos ;)))))) }) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression key)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression (literal 'Error: toString')))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad error: ')) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable elements) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 20.5)))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal 'string'))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (anoymousFunction function ( ) { functionBody }))) , (arrayElement (singleExpression (arrayLiteral [ elementList ]))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression elements)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Symbol) . (identifierName keyFor)) (arguments ( (argument (singleExpression item)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression (literal 'TypeError: Symbol.keyFor requires that the first argument be a symbol')))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad error: ')) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression i)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable symbol) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression symbol)) )))) , (argument (singleExpression (singleExpression (singleExpression (literal "Symbol(")) + (singleExpression i)) + (singleExpression (literal ")")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression symbol)) , (argument (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression i)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable symbols) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable symbol) = (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression symbols) . (identifierName push)) (arguments ( (argument (singleExpression symbol)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for)))) (arguments ( (argument (singleExpression i)) )))) , (argument (singleExpression (singleExpression symbols) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression Symbol) . (identifierName keyFor)) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression i)) )))) )))) , (argument (singleExpression undefined)) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;))))) <EOF>)