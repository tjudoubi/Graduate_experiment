(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function truth ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression truth)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "broke assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable NUM_LOOPS) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal "y")))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal "y")))) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression (literal "error"))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal "y")))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable numFinally) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable a) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable capA) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable b) = (singleExpression (literal (numericLiteral 41))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capB) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capB) (arguments ( ))) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { })) (finallyProduction finally (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable c) = (singleExpression (literal (numericLiteral 42))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capC) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capC) (arguments ( ))) === (singleExpression (literal (numericLiteral 42))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capB) (arguments ( ))) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;)))) })))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 22)))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { })) (finallyProduction finally (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;)))) })))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 23)))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { })) (finallyProduction finally (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression numFinally) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 24)))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 24))))) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable numFinally) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable numErrors) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable a) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable capA) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable b) = (singleExpression (literal (numericLiteral 41))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capB) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capB) (arguments ( ))) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "e"))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capB) (arguments ( ))) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numErrors) ++)) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable c) = (singleExpression (literal (numericLiteral 42))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capC) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) })))) eos)) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable local) = (singleExpression (literal "local")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression local) === (singleExpression (literal "local")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capC) (arguments ( ))) === (singleExpression (literal (numericLiteral 42))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capB) (arguments ( ))) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numErrors) ++)) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable local) = (singleExpression (literal "local")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression local) === (singleExpression (literal "local")))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable local) = (singleExpression (literal "local")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression local) === (singleExpression (literal "local")))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 23)))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { })) (finallyProduction finally (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression numFinally) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression numErrors) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 24)))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 24))))) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable d) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression d) === (singleExpression (literal (numericLiteral 100))))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable numFinally) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable numErrors) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable c) = (singleExpression (literal (numericLiteral 44))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression d) === (singleExpression (literal (numericLiteral 100))))) )))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable d) = (singleExpression (literal (numericLiteral 45))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable a) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capA) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable b) = (singleExpression (literal (numericLiteral 21))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable e) = (singleExpression (literal (numericLiteral 48))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capB) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capB) (arguments ( ))) === (singleExpression (literal (numericLiteral 21))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression d) === (singleExpression (literal (numericLiteral 45))))) )))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "e"))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numErrors) ++)) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capA) (arguments ( ))) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) === (singleExpression (literal (numericLiteral 48))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))) }))))) }))))) }))))) }) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression c) === (singleExpression (literal (numericLiteral 44))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression d) === (singleExpression (literal (numericLiteral 100))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numFinally) ++)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression numFinally) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression numErrors) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 40)))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)