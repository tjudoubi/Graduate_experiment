(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable num))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression (literal /hello world/)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable world) = (singleExpression (literal /World/)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) = (singleExpression world))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression world) . (identifierName lastIndex)) = (singleExpression regexp))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression num) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression regexp)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression num) === (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression regexp) . (identifierName lastIndex))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) . (identifierName lastIndex))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable num) = (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 3)))))) (eos ;))) (statement (switchStatement switch ( (expressionSequence (singleExpression num)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 0)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression num)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression regexp) instanceof (singleExpression RegExp))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal "/hello world/"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) instanceof (singleExpression RegExp))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal "/World/"))) )))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression num)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression regexp) instanceof (singleExpression RegExp))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal "/World/"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) instanceof (singleExpression RegExp))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal "/hello world/"))) )))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression num)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression regexp) instanceof (singleExpression RegExp))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal "/hello world/"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) instanceof (singleExpression RegExp))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal "/World/"))) )))) (eos ;))) (statement (breakStatement break (eos ;)))))) })))) })))))) <EOF>)