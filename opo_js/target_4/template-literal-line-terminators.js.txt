(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value: actual: ")) + (singleExpression actual)) + (singleExpression (literal ", expected: "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testEval ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testEvalLineNumber ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable lineNum))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEval) (arguments ( (argument (singleExpression script)) , (argument (singleExpression expected)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable actualLine))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression script) + (singleExpression (literal ';throw new Error("line");')))) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actualLine) = (singleExpression (singleExpression error) . (identifierName line)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression actualLine)) , (argument (singleExpression lineNum)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello`))) , (argument (singleExpression (literal "Hello"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello World`))) , (argument (singleExpression (literal "Hello World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal ``))) , (argument (singleExpression (literal "\n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `HelloWorld`))) , (argument (singleExpression (literal "Hello\nWorld"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello World`"))) , (argument (singleExpression (literal "Hello World"))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\rWorld`"))) , (argument (singleExpression (literal "Hello\nWorld"))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\nWorld`"))) , (argument (singleExpression (literal "Hello\nWorld"))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\r\rWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\r\nWorld`"))) , (argument (singleExpression (literal "Hello\nWorld"))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\n\nWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\n\rWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\n\r\nWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\r\n\rWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\n\n\nWorld`"))) , (argument (singleExpression (literal "Hello\n\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\n\r\n\rWorld`"))) , (argument (singleExpression (literal "Hello\n\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\n\r\n\nWorld`"))) , (argument (singleExpression (literal "Hello\n\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\r\n\n\nWorld`"))) , (argument (singleExpression (literal "Hello\n\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\\\n\r\rWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\\\r\n\n\nWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\\\n\r\n\nWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`Hello\\\n\r\r\nWorld`"))) , (argument (singleExpression (literal "Hello\n\nWorld"))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`\u2028`"))) , (argument (singleExpression (literal "\u2028"))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`\u2029`"))) , (argument (singleExpression (literal "\u2029"))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`\\u2028`"))) , (argument (singleExpression (literal "\u2028"))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEvalLineNumber) (arguments ( (argument (singleExpression (literal "`\\u2029`"))) , (argument (singleExpression (literal "\u2029"))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))))) <EOF>)