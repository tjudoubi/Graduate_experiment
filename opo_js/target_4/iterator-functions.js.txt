(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) , (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName values))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression Map) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) , (argument (singleExpression (singleExpression (singleExpression Map) . (identifierName prototype)) . (identifierName entries))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression Set) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) , (argument (singleExpression (singleExpression (singleExpression Set) . (identifierName prototype)) . (identifierName values))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function argumentsTests ( (formalParameterList (formalParameterArg (assignable values))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) (eos ;)))))) })) (arguments ( )))) , (argument (singleExpression values)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) (eos ;)))))) })) (arguments ( )))) , (argument (singleExpression values)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) (eos ;)))))) })) (arguments ( )))) , (argument (singleExpression values)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ])) (eos ;)))))) })) (arguments ( )))) , (argument (singleExpression values)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression argumentsTests) (arguments ( (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName values))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrayValues) = (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName values)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName values)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression argumentsTests) (arguments ( (argument (singleExpression arrayValues)) )))) (eos ;))))) <EOF>)