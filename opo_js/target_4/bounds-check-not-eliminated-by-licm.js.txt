(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testInLoopTests) (arguments ( (argument (singleExpression array)) , (argument (singleExpression index)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayLength) = (singleExpression (singleExpression array) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sum) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression index) >= (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression index) < (singleExpression arrayLength)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sum) (assignmentOperator +=) (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) }))))) })) (statement (returnStatement return (expressionSequence (singleExpression sum)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testInLoopTests)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArray) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testInLoopTests) (arguments ( (argument (singleExpression testArray)) , (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression (literal (numericLiteral 20))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testInLoopTests(testArray, 1)"))) eos)))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testInLoopTests) (arguments ( (argument (singleExpression testArray)) , (argument (singleExpression (literal (numericLiteral 2)))) ))) !== (singleExpression (literal (numericLiteral 30))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testInLoopTests(testArray, 2)"))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression largeIntResult) = (singleExpression (singleExpression testInLoopTests) (arguments ( (argument (singleExpression testArray)) , (argument (singleExpression (literal (numericLiteral 2147483647)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression largeIntResult) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testInLoopTests(testArray, 2147483647)"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression smallIntResult) = (singleExpression (singleExpression testInLoopTests) (arguments ( (argument (singleExpression testArray)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483647))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression smallIntResult) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testInLoopTests(testArray, -2147483647)"))) (eos ;))))))) <EOF>)