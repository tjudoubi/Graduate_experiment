(program (sourceElements (sourceElement (statement (functionDeclaration function shouldEqual ( (formalParameterList (formalParameterArg (assignable testId)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testId) + (singleExpression (literal ": ERROR: expect "))) + (singleExpression expected)) + (singleExpression (literal ", actual "))) + (singleExpression actual))) (eos ;)))) }))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s2) = (singleExpression (singleExpression (singleExpression (literal 'x')) . (identifierName repeat)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x3fffffff)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r0) = (singleExpression (literal /((?=\S))/giy)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression s2) . (identifierName replace)) (arguments ( (argument (singleExpression r0)) , (argument (singleExpression (literal ''))) )))) eos))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 10000)))) , (argument (singleExpression exception)) , (argument (singleExpression (literal "Error: Out of memory"))) )))) (eos ;))))) <EOF>)