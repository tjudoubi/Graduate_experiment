(program (sourceElements (sourceElement (statement (functionDeclaration function shouldEqual ( (formalParameterList (formalParameterArg (assignable testId)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testId) + (singleExpression (literal ": ERROR: expect "))) + (singleExpression expected)) + (singleExpression (literal ", actual "))) + (singleExpression actual))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numberOfIterations) = (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (functionDeclaration function testInvokeGetter ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable getter) = (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression Object) . (identifierName prototype))) , (argument (singleExpression (literal "__proto__"))) ))) . (identifierName get)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression getter) (arguments ( )))) (eos ;)))))) }))) )) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testInvokeGetter)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testInvokeSetter ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable setter) = (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression Object) . (identifierName prototype))) , (argument (singleExpression (literal "__proto__"))) ))) . (identifierName set)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression setter) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))))) }))) )) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testInvokeSetter)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function runTest ( (formalParameterList (formalParameterArg (assignable testId)) , (formalParameterArg (assignable test)) , (formalParameterArg (assignable expectedResult)) , (formalParameterArg (assignable expectedException))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numberOfIterations))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression (singleExpression (literal "")) + (singleExpression e)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression testId)) , (argument (singleExpression result)) , (argument (singleExpression expectedResult)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression testId)) , (argument (singleExpression exception)) , (argument (singleExpression expectedException)) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression (literal (numericLiteral 10000)))) , (argument (singleExpression testInvokeGetter)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "TypeError: undefined is not an object (evaluating 'getter()')"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression (literal (numericLiteral 10100)))) , (argument (singleExpression testInvokeSetter)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "TypeError: Object.prototype.__proto__ called on null or undefined"))) )))) (eos ;))))) <EOF>)