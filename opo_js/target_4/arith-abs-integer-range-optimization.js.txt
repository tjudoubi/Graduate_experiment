(program (sourceElements (sourceElement (statement (functionDeclaration function negativeRange ( (formalParameterList (formalParameterArg (assignable results))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) > (singleExpression - (singleExpression (literal (numericLiteral 10)))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression i)) )))) ]) = (singleExpression i))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression negativeRange)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negativeRange) (arguments ( (argument (singleExpression results)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;))))) (statement (continueStatement continue (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression - (singleExpression j)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) }))))) (sourceElement (statement (functionDeclaration function negativeRangeIncludingZero ( (formalParameterList (formalParameterArg (assignable results))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) > (singleExpression - (singleExpression (literal (numericLiteral 10)))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression i)) )))) ]) = (singleExpression i))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression negativeRangeIncludingZero)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negativeRangeIncludingZero) (arguments ( (argument (singleExpression results)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression - (singleExpression j)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) }))))) (sourceElement (statement (functionDeclaration function negativeRangeWithOverflow ( (formalParameterList (formalParameterArg (assignable results)) , (formalParameterArg (assignable limit))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 2147483648)))) + (singleExpression (literal (numericLiteral 10)))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression i)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression i))) (eos ;)))) })) while ( (expressionSequence (singleExpression (singleExpression i) !== (singleExpression limit))) ) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression negativeRangeWithOverflow)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negativeRangeWithOverflow) (arguments ( (argument (singleExpression results)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483647))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 9))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 9))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression (singleExpression (literal (numericLiteral 2147483638))) + (singleExpression j)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negativeRangeWithOverflow) (arguments ( (argument (singleExpression results)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression (singleExpression (literal (numericLiteral 2147483638))) + (singleExpression j)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) }))))) (sourceElement (statement (functionDeclaration function positiveRange ( (formalParameterList (formalParameterArg (assignable results))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression i)) )))) ]) = (singleExpression i))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression positiveRange)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression positiveRange) (arguments ( (argument (singleExpression results)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;))))) (statement (continueStatement continue (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression j))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) }))))) (sourceElement (statement (functionDeclaration function positiveRangeIncludingZero ( (formalParameterList (formalParameterArg (assignable results))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression i)) )))) ]) = (singleExpression i))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression positiveRangeIncludingZero)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression positiveRangeIncludingZero) (arguments ( (argument (singleExpression results)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression j))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) }))))) (sourceElement (statement (functionDeclaration function rangeWithoutOverflow ( (formalParameterList (formalParameterArg (assignable results))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression - (singleExpression (literal (numericLiteral 10)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression i)) ))))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression rangeWithoutOverflow)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rangeWithoutOverflow) (arguments ( (argument (singleExpression results)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName length)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong result length: ")) + (singleExpression (singleExpression results) . (identifierName length)))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression - (singleExpression (literal (numericLiteral 10)))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression - (singleExpression j)) : (singleExpression j)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ]) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result, results[j] = ")) + (singleExpression (singleExpression results) [ (expressionSequence (singleExpression j)) ])) + (singleExpression (literal " at j = "))) + (singleExpression j))) (eos ;)))))) }))))) })))))) <EOF>)