(program (sourceElements (sourceElement (statement (functionDeclaration function narrow ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) << (singleExpression (literal (numericLiteral 24)))) >> (singleExpression (literal (numericLiteral 24))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression narrow)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expected) = (singleExpression (singleExpression i) << (singleExpression (literal (numericLiteral 24)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression got) = (singleExpression (singleExpression narrow) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expected) = (singleExpression (singleExpression expected) >> (singleExpression (literal (numericLiteral 24)))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression expected) != (singleExpression got))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAILURE, expected:")) + (singleExpression expected)) + (singleExpression (literal ", got:"))) + (singleExpression got))) (eos ;)))))) })))))) <EOF>)