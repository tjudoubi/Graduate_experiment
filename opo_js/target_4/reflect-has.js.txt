(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "not thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.has requires the first argument be an object`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal 'hello'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal 'prototype'))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal '__proto__'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal 'hasOwnProperty'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName deleteProperty)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal 'hello'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal 'hello'))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (literal 'length'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (argument (singleExpression (literal (numericLiteral 200)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (literal (numericLiteral 42)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (singleExpression Symbol) . (identifierName unscopables))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName deleteProperty)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toPropertyKey) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'toString called.'))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression toPropertyKey)) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.has requires the first argument be an object`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression toPropertyKey)) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `Error: toString called.`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable toPropertyKey) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'ok'))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName 'ok') : (singleExpression (literal (numericLiteral 42)))) }))) , (argument (singleExpression toPropertyKey)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))))) <EOF>)