(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actualExpr)) , (formalParameterArg (assignable expectedExpr))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function toString ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "")) + (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression actualExpr)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expected) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression expectedExpr)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression actual)) != (singleExpression typeof (singleExpression expected)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "expected type ")) + (singleExpression typeof (singleExpression expected))) + (singleExpression (literal " actual type "))) + (singleExpression typeof (singleExpression actual)))) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toString) (arguments ( (argument (singleExpression actual)) ))) != (singleExpression (singleExpression toString) (arguments ( (argument (singleExpression expected)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "expected: ")) + (singleExpression expected)) + (singleExpression (literal " actual: "))) + (singleExpression actual))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression result)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression visited)) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable parseString)) , (formalParameterArg (assignable clearLength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression visited) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression JSON) . (identifierName parse)) (arguments ( (argument (singleExpression parseString)) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression visited) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal '{')) + (singleExpression key)) + (singleExpression (literal ':'))) + (singleExpression value)) + (singleExpression (literal '}')))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression clearLength)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName length)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (returnStatement return (eos ;)))))) }))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal '[10]'))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{:}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "2"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal '[10]'))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{:}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "2"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal '[ [ 10, 11 ], 12, [13, 14, 15], 16, 17]'))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:11}','{0:,}','{1:12}','{0:13}','{1:14}','{2:15}','{2:,,}','{3:16}','{4:17}','{:,,,,}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "11"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal '[ [ 10, 11 ], 12, [13, 14, 15], 16, 17]'))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:undefined}','{0:}','{1:undefined}','{2:undefined}','{3:undefined}','{4:undefined}','{:}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "8"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal '[ { "a": [ 10, 11 ], "b": 12 } , [ 13, { "c": 14 }, 15], 16, 17]'))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:11}','{a:,}','{b:12}','{0:[object Object]}','{0:13}','{c:14}','{1:[object Object]}','{2:15}','{1:,,}','{2:16}','{3:17}','{:,,,}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "13"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal '[ { "a": [ 10, 11 ], "b": 12 } , [ 13, { "c": 14 }, 15], 16, 17]'))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:undefined}','{a:}','{b:12}','{0:[object Object]}','{1:undefined}','{2:undefined}','{3:undefined}','{:}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "9"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test2 ( (formalParameterList (formalParameterArg (assignable parseString)) , (formalParameterArg (assignable clearLength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression visited) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression JSON) . (identifierName parse)) (arguments ( (argument (singleExpression parseString)) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression visited) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal '{')) + (singleExpression key)) + (singleExpression (literal ':'))) + (singleExpression value)) + (singleExpression (literal '}')))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression clearLength)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName length)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression value)) === (singleExpression (literal "number")))) )) ? (singleExpression (singleExpression value) * (singleExpression (literal (numericLiteral 2)))) : (singleExpression value))) (eos ;)))))) }))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal '[10]'))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "[20]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{:20}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "2"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal '[10]'))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "[20]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{:20}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "2"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal '[ [ 10, 11 ], 12, [13, 14, 15], 16, 17]'))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "[20,22,24,26,28,30,32,34]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:11}','{0:20,22}','{1:12}','{0:13}','{1:14}','{2:15}','{2:26,28,30}','{3:16}','{4:17}','{:20,22,24,26,28,30,32,34}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "11"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal '[ [ 10, 11 ], 12, [13, 14, 15], 16, 17]'))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "[]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:undefined}','{0:}','{1:undefined}','{2:undefined}','{3:undefined}','{4:undefined}','{:}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "8"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal '[ { "a": [ 10, 11 ], "b": 12 } , [ 13, { "c": 14 }, 15], 16, 17]'))) , (argument (singleExpression (literal false))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "['[object Object]',26,'[object Object]',30,32,34]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:11}','{a:20,22}','{b:12}','{0:[object Object]}','{0:13}','{c:14}','{1:[object Object]}','{2:15}','{1:26,[object Object],30}','{2:16}','{3:17}','{:[object Object],26,[object Object],30,32,34}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "13"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal '[ { "a": [ 10, 11 ], "b": 12 } , [ 13, { "c": 14 }, 15], 16, 17]'))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "result"))) , (argument (singleExpression (literal "[]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited"))) , (argument (singleExpression (literal "['{0:10}','{1:undefined}','{a:}','{b:12}','{0:[object Object]}','{1:undefined}','{2:undefined}','{3:undefined}','{:}']"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "visited.length"))) , (argument (singleExpression (literal "9"))) )))) (eos ;))))) <EOF>)