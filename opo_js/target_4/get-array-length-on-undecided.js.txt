(program (sourceElements (sourceElement (statement (functionDeclaration function forceTransition ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 100001)))) ]) = (singleExpression (literal "WebKit!")))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression forceTransition) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueGetArrayLength ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression array) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueGetArrayLength)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmptyArray) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueGetArrayLength) (arguments ( (argument (singleExpression array)) ))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testEmptyArray"))) (eos ;)))) }))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueGetArrayLength) (arguments ( (argument (singleExpression array)) ))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testEmptyArray"))) (eos ;)))) }))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmptyArray) (arguments ( )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testUnitializedArray) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 32)))) )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueGetArrayLength) (arguments ( (argument (singleExpression array)) ))) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testUnitializedArray"))) (eos ;)))) }))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName length)) = (singleExpression (literal (numericLiteral 64))))) eos)) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueGetArrayLength) (arguments ( (argument (singleExpression array)) ))) !== (singleExpression (literal (numericLiteral 64))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testUnitializedArray"))) (eos ;)))) }))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testUnitializedArray) (arguments ( )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOversizedArray) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 100001)))) )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueGetArrayLength) (arguments ( (argument (singleExpression array)) ))) !== (singleExpression (literal (numericLiteral 100001))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testOversizedArray"))) (eos ;)))) }))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOversizedArray) (arguments ( )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSparseArray) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 100001)))) ]) = (singleExpression (literal "WebKit!")))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression opaqueGetArrayLength) (arguments ( (argument (singleExpression array)) ))) !== (singleExpression (literal (numericLiteral 100002))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed testOversizedArray"))) (eos ;)))) }))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSparseArray) (arguments ( )))) (eos ;))))) <EOF>)