(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression typeof (singleExpression value))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal "undefined"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "object"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "function"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 2)))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "boolean"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 3)))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "number"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 4)))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "string"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 5)))) (eos ;)))))) (defaultClause default : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 6)))) (eos ;))))) })))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression value)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad type code for ")) + (singleExpression value)) + (singleExpression (literal ": "))) + (singleExpression result)) + (singleExpression (literal " (expected "))) + (singleExpression expected)) + (singleExpression (literal ")")))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) }))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 42.5)))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression (literal (numericLiteral 5)))) )))) (eos ;)))) })))))) <EOF>)