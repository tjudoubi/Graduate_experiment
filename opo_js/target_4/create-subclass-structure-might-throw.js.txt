(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "bad assertion."))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression targets) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Function)) , (arrayElement (singleExpression String)) , (arrayElement (singleExpression Array)) , (arrayElement (singleExpression Set)) , (arrayElement (singleExpression Map)) , (arrayElement (singleExpression WeakSet)) , (arrayElement (singleExpression WeakMap)) , (arrayElement (singleExpression RegExp)) , (arrayElement (singleExpression Number)) , (arrayElement (singleExpression Promise)) , (arrayElement (singleExpression Date)) , (arrayElement (singleExpression Boolean)) , (arrayElement (singleExpression Error)) , (arrayElement (singleExpression TypeError)) , (arrayElement (singleExpression SyntaxError)) , (arrayElement (singleExpression ArrayBuffer)) , (arrayElement (singleExpression Int32Array)) , (arrayElement (singleExpression Int8Array)) , (arrayElement (singleExpression Uint8Array)) , (arrayElement (singleExpression Uint8ClampedArray)) , (arrayElement (singleExpression Int16Array)) , (arrayElement (singleExpression Uint16Array)) , (arrayElement (singleExpression Uint32Array)) , (arrayElement (singleExpression Float32Array)) , (arrayElement (singleExpression Float64Array)) , (arrayElement (singleExpression DataView))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) target))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression targets)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (literal null)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression handler) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable theTarget)) , (formalParameterArg (assignable propName))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression propName) === (singleExpression (literal "prototype")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression new (singleExpression Error)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression error)) (eos ;)))))) }))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression target)) , (argument (singleExpression handler)) )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression target) === (singleExpression Promise))) ) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression proxy) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) ))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression proxy))) (eos ;)))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) === (singleExpression error))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (literal null)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression threw)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;)))) }))) })))) <EOF>)