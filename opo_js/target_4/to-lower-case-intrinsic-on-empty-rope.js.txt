(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "bad!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function returnEmptyString ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function helper ( (formalParameterList (formalParameterArg (assignable r)) , (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression s) . (identifierName match)) (arguments ( (argument (singleExpression r)) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression helper)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression helper) (arguments ( (argument (singleExpression (literal /(b*)fo/))) , (argument (singleExpression (literal "fo"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression returnEmptyString)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function lower ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName toLowerCase)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression lower)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression notRope) = (singleExpression (singleExpression returnEmptyString) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression notRope) . (identifierName length)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isRope) (arguments ( (argument (singleExpression notRope)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression lower) (arguments ( (argument (singleExpression notRope)) )))) (eos ;)))) })))) <EOF>)