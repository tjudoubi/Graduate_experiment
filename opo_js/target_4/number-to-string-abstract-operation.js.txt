(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: expected:(${expected}),actual:(${actual})`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function expected ( (formalParameterList (formalParameterArg (assignable num)) , (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression characters) = (singleExpression (literal "0123456789abcdefghijklmnopqrstuvwxyz")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negative) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression num) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negative) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression num) = (singleExpression - (singleExpression num)))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable index) = (singleExpression (singleExpression num) % (singleExpression radix)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression characters) [ (expressionSequence (singleExpression index)) ]) + (singleExpression result)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression num) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression num) - (singleExpression index))) )) / (singleExpression radix)))) (eos ;)))) })) while ( (expressionSequence (singleExpression num)) ) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression negative)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal '-')) + (singleExpression result))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function int32ToString ( (formalParameterList (formalParameterArg (assignable num))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `${num}`))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression int32ToString)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int32ToString) (arguments ( (argument (singleExpression i)) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 10)))) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int32ToString) (arguments ( (argument (singleExpression - (singleExpression i))) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression - (singleExpression i))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int32ToString) (arguments ( (argument (singleExpression (literal (numericLiteral 0xffffffffff)))) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression (literal (numericLiteral 0xffffffffff)))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int32ToString) (arguments ( (argument (singleExpression (literal (numericLiteral 0.1)))) )))) , (argument (singleExpression (literal `0.1`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int32ToString) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.1))))) )))) , (argument (singleExpression (literal `-0.1`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int32ToString) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Number) (arguments ( (argument (singleExpression (literal (numericLiteral 0xff)))) ))))) )))) , (argument (singleExpression (literal `255`))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function int52ToString ( (formalParameterList (formalParameterArg (assignable num))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `${fiatInt52(num)}`))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression int52ToString)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int52ToString) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0xffffffff))) + (singleExpression i))) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0xffffffff))) + (singleExpression i))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int52ToString) (arguments ( (argument (singleExpression - (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 0xffffffff))) + (singleExpression i))) )))) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression - (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 0xffffffff))) + (singleExpression i))) )))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int52ToString) (arguments ( (argument (singleExpression (literal (numericLiteral 0xff)))) )))) , (argument (singleExpression (literal `255`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int52ToString) (arguments ( (argument (singleExpression (literal (numericLiteral 0.1)))) )))) , (argument (singleExpression (literal `0.1`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int52ToString) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.1))))) )))) , (argument (singleExpression (literal `-0.1`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression int52ToString) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Number) (arguments ( (argument (singleExpression (literal (numericLiteral 0xff)))) ))))) )))) , (argument (singleExpression (literal `255`))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function doubleToString ( (formalParameterList (formalParameterArg (assignable num))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `${num}`))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression doubleToString)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression doubleToString) (arguments ( (argument (singleExpression (literal (numericLiteral 1.01)))) )))) , (argument (singleExpression (literal `1.01`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression doubleToString) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1.01))))) )))) , (argument (singleExpression (literal `-1.01`))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression doubleToString) (arguments ( (argument (singleExpression (literal (numericLiteral 0xff)))) )))) , (argument (singleExpression (literal `255`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression doubleToString) (arguments ( (argument (singleExpression (literal (numericLiteral 0.1)))) )))) , (argument (singleExpression (literal `0.1`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression doubleToString) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.1))))) )))) , (argument (singleExpression (literal `-0.1`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression doubleToString) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Number) (arguments ( (argument (singleExpression (literal (numericLiteral 0xff)))) ))))) )))) , (argument (singleExpression (literal `255`))) )))) (eos ;)))) })))) <EOF>)