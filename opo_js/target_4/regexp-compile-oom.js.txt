(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable failures) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (classDeclaration class TestAndExpectedException (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable exception))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName func)) = (singleExpression func))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName exception)) = (singleExpression exception))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName runTest)) ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName func)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression failures) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Running ")) + (singleExpression (singleExpression this) . (identifierName func))) + (singleExpression (literal ", expected OOM exception, but didn't get one")))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errStr) = (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression errStr) != (singleExpression (singleExpression this) . (identifierName exception)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression failures) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Running ")) + (singleExpression (singleExpression this) . (identifierName func))) + (singleExpression (literal ", expected: \""))) + (singleExpression (singleExpression this) . (identifierName exception))) + (singleExpression (literal "\" but got \""))) + (singleExpression errStr)) + (singleExpression (literal "\"")))) )))) (eos ;)))))) }))))))) })) })))) (sourceElement (statement (functionDeclaration function recurseAndTest ( (formalParameterList (formalParameterArg (assignable depth)) , (formalParameterArg (assignable testList))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression recurseAndTest) (arguments ( (argument (singleExpression (singleExpression depth) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression testList)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable test))) of (expressionSequence (singleExpression testList)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression test) . (identifierName runTest)) (arguments ( )))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression result) + (singleExpression (literal (numericLiteral 1))))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 24))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression deepRE) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal "((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((x))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression deepGlobalRE) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression deepRE)) , (argument (singleExpression (literal "g"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression matchLen) = (singleExpression (literal (numericLiteral 401))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression regExpOOMError) = (singleExpression (literal "Error: Out of memory: Invalid regular expression: too many nested disjunctions")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression deepRE) . (identifierName exec)) (arguments ( (argument (singleExpression (literal "x"))) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression deepRE) . (identifierName test)) (arguments ( (argument (singleExpression (literal "x"))) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "x")) . (identifierName match)) (arguments ( (argument (singleExpression deepRE)) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "x")) . (identifierName match)) (arguments ( (argument (singleExpression deepGlobalRE)) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "x")) . (identifierName replace)) (arguments ( (argument (singleExpression deepGlobalRE)) , (argument (singleExpression (literal ""))) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "x")) . (identifierName replace)) (arguments ( (argument (singleExpression deepGlobalRE)) , (argument (singleExpression (literal "X"))) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "x")) . (identifierName replace)) (arguments ( (argument (singleExpression deepGlobalRE)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "X"))) eos))))) })))) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testList) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TestAndExpectedException) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "x")) . (identifierName search)) (arguments ( (argument (singleExpression deepRE)) )))) (eos ;)))))) })))) , (argument (singleExpression regExpOOMError)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression recurseAndTest) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression testList)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression failures) . (identifierName length))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "Got the following failures:"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable failure))) of (expressionSequence (singleExpression failures)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression failure)) )))) (eos ;))))) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Got failures"))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression m) = (singleExpression (singleExpression (singleExpression deepRE) . (identifierName exec)) (arguments ( (argument (singleExpression (literal "x"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression matched) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression m) . (identifierName length)) != (singleExpression matchLen))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression matched) = (singleExpression falseelse))) eos))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression matchLen))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression m) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (literal "x")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression matched) = (singleExpression (literal false)))) (eos ;)))))) }))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression matched))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedMatch) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression matchLen))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expectedMatch) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal "x")))) (eos ;))))) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected RegExp.exec(...) to be [")) + (singleExpression expectedMatch)) + (singleExpression (literal "] but got ["))) + (singleExpression m)) + (singleExpression (literal "]")))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression deepRE) . (identifierName test)) (arguments ( (argument (singleExpression (literal "x"))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Expected RegExp.test(...) to be true, but was false"))) (eos ;))))))) <EOF>)