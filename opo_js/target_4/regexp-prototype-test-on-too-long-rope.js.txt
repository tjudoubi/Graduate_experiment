(program (sourceElements (sourceElement (statement (functionDeclaration function shouldEqual ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "ERROR: expect ")) + (singleExpression expected)) + (singleExpression (literal ", actual "))) + (singleExpression actual))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s0) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s1) = (singleExpression (literal "NaNxxxxx")))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression count) < (singleExpression (literal (numericLiteral 27))))) ; (expressionSequence (singleExpression (singleExpression count) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable oldS1) = (singleExpression s1))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s1) (assignmentOperator +=) (singleExpression s1))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s0) = (singleExpression oldS1))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s1) (assignmentOperator +=) (singleExpression s0))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal /x/)) . (identifierName test)) (arguments ( (argument (singleExpression s1)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression exception)) , (argument (singleExpression (literal "Error: Out of memory"))) )))) (eos ;))))) <EOF>)