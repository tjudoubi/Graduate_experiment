(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function Foo ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) === (singleExpression a))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal '')) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x)) + (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 8))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Foo) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Foo) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;))))) <EOF>)