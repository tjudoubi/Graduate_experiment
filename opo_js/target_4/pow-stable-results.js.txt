(program (sourceElements (sourceElement (statement (functionDeclaration function opaquePow ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) ** (singleExpression b))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaquePow)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression caseStrings) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "0"))) , (arrayElement (singleExpression (literal "-0."))) , (arrayElement (singleExpression (literal "0.5"))) , (arrayElement (singleExpression (literal "1"))) , (arrayElement (singleExpression (literal "2"))) , (arrayElement (singleExpression (literal "-0.5"))) , (arrayElement (singleExpression (literal "-1"))) , (arrayElement (singleExpression (literal "999"))) , (arrayElement (singleExpression (literal "1000"))) , (arrayElement (singleExpression (literal "1001"))) , (arrayElement (singleExpression (literal "NaN"))) , (arrayElement (singleExpression (literal "Infinity"))) , (arrayElement (singleExpression (literal "-Infinity"))) , (arrayElement (singleExpression (literal "Math.PI"))) , (arrayElement (singleExpression (literal "Math.LN2"))) , (arrayElement (singleExpression (literal "Math.LN10"))) , (arrayElement (singleExpression (literal "Math.E"))) , (arrayElement (singleExpression (literal "Math.LOG10E"))) , (arrayElement (singleExpression (literal "Math.LOG2E"))) , (arrayElement (singleExpression (literal "Math.SQRT2")))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cases) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) caseString))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression caseStrings)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression cases) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression caseString)) )))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedResults) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression constantBaseFunctions) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression constantExponentFunctions) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression cases) . (identifierName length)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression base) = (singleExpression (singleExpression cases) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expectedResults) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression cases) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression j))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exponent) = (singleExpression (singleExpression cases) [ (expressionSequence (singleExpression j)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression expectedResults) [ (expressionSequence (singleExpression i)) ]) [ (expressionSequence (singleExpression j)) ]) = (singleExpression (singleExpression base) ** (singleExpression exponent)))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "constantBaseFunctions[i] = function (exponent) { return (")) + (singleExpression (singleExpression caseStrings) [ (expressionSequence (singleExpression i)) ])) + (singleExpression (literal ") ** exponent; }")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "constantExponentFunctions[i] = function (base) { return base ** (")) + (singleExpression (singleExpression caseStrings) [ (expressionSequence (singleExpression i)) ])) + (singleExpression (literal "); }")))) )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function isIdentical ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression expected) === (singleExpression expected))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ! (singleExpression expected)) && (singleExpression (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression expected)) === (singleExpression - (singleExpression Infinity)))) && (singleExpression (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression result)) !== (singleExpression - (singleExpression Infinity))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression result) !== (singleExpression result))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) tierUpLoopCounter =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tierUpLoopCounter) < (singleExpression (literal (numericLiteral 1e3))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression tierUpLoopCounter))) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression cases) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression base) = (singleExpression (singleExpression cases) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression cases) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression j))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exponent) = (singleExpression (singleExpression cases) [ (expressionSequence (singleExpression j)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedResult) = (singleExpression (singleExpression (singleExpression expectedResults) [ (expressionSequence (singleExpression i)) ]) [ (expressionSequence (singleExpression j)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression opaquePow) (arguments ( (argument (singleExpression base)) , (argument (singleExpression exponent)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isIdentical) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expectedResult)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal `Failed opaquePow with base = ${base} exponent = ${exponent} expected (${expectedResult}) got (${result})`))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression constantBaseFunctions) [ (expressionSequence (singleExpression i)) ]) (arguments ( (argument (singleExpression exponent)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isIdentical) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expectedResult)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal `Failed constantBaseFunctions with base = ${base} exponent = ${exponent} expected (${expectedResult}) got (${result})`))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression constantExponentFunctions) [ (expressionSequence (singleExpression j)) ]) (arguments ( (argument (singleExpression base)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isIdentical) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expectedResult)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal `Failed constantExponentFunctions with base = ${base} exponent = ${exponent} expected (${expectedResult}) got (${result})`))) (eos ;)))))) }))) }))) })))) <EOF>)