(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_print_debug ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_print) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression arguments)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_JS_GLOBALS) = (singleExpression this))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable __sc_LINE) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable __sc_FILE) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_alert ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable len) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable s) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression len))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s) (assignmentOperator +=) (singleExpression (singleExpression sc_toDisplayString) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression s)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_typeof ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression typeof (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_error ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression sc_jsstring2symbol) (arguments ( (argument (singleExpression (literal "*error*"))) ))))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) }))))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_raise ( (formalParameterList (formalParameterArg (assignable obj))) ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression obj)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_withHandlerLambda ( (formalParameterList (formalParameterArg (assignable handler)) , (formalParameterArg (assignable body))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression body) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression e) . (identifierName _internalException)))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression handler) (arguments ( (argument (singleExpression e)) )))) (eos ;))) else (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))))) }))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_properties) = (singleExpression new (singleExpression (singleExpression Object) (arguments ( )))))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_putpropBang ( (formalParameterList (formalParameterArg (assignable sym)) , (formalParameterArg (assignable key)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ht) = (singleExpression (singleExpression sc_properties) [ (expressionSequence (singleExpression sym)) ]))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ht))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ht) = (singleExpression new (singleExpression (singleExpression Object) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_properties) [ (expressionSequence (singleExpression sym)) ]) = (singleExpression ht))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression key)) ]) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_getprop ( (formalParameterList (formalParameterArg (assignable sym)) , (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ht) = (singleExpression (singleExpression sc_properties) [ (expressionSequence (singleExpression sym)) ]))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ht)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) in (singleExpression ht))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression key)) ])) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })) else (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_rempropBang ( (formalParameterList (formalParameterArg (assignable sym)) , (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ht) = (singleExpression (singleExpression sc_properties) [ (expressionSequence (singleExpression sym)) ]))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ht)) ) (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression key)) ]))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_any2String ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression jsstring2string) (arguments ( (argument (singleExpression (singleExpression sc_toDisplayString) (arguments ( (argument (singleExpression o)) )))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isEqv ( (formalParameterList (formalParameterArg (assignable o1)) , (formalParameterArg (assignable o2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression o1) === (singleExpression o2))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isEq ( (formalParameterList (formalParameterArg (assignable o1)) , (formalParameterArg (assignable o2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression o1) === (singleExpression o2))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isNumber ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression n)) === (singleExpression (literal "number")))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isComplex ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_isNumber) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isReal ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_isNumber) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isRational ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_isReal) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isInteger ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression n)) ))) === (singleExpression n))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isExact ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isInexact ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_equal ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) !== (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_less ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) >= (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_greater ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) <= (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_lessEqual ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) > (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_greaterEqual ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) < (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isZero ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isPositive ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression x) > (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isNegative ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isOdd ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression x) % (singleExpression (literal (numericLiteral 2)))) === (singleExpression (literal (numericLiteral 1))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isEven ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression x) % (singleExpression (literal (numericLiteral 2)))) === (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_max) = (singleExpression (singleExpression Math) . (identifierName max)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_min) = (singleExpression (singleExpression Math) . (identifierName min)))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_plus ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sum) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sum) (assignmentOperator +=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression sum)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_multi ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable product) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression product) (assignmentOperator *=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression product)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_minus ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression x))) (eos ;))) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression x))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator -=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_div ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression x))) (eos ;))) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression x))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator /=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))) }))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_abs) = (singleExpression (singleExpression Math) . (identifierName abs)))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_quotient ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression (singleExpression x) / (singleExpression y))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_remainder ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) % (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_modulo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable remainder) = (singleExpression (singleExpression x) % (singleExpression y)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression remainder) * (singleExpression y))) )) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression remainder) + (singleExpression y))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression remainder)) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_euclid_gcd ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable temp))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression - (singleExpression a)))) (eos ;)))) }))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression - (singleExpression b)))) (eos ;)))) }))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) > (singleExpression a))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression temp) = (singleExpression a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression b))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression temp))) (eos ;)))) }))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) (assignmentOperator %=) (singleExpression b))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))) })))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) (assignmentOperator %=) (singleExpression a))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))) })))) (statement (emptyStatement ;))) }))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_gcd ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable gcd) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gcd) = (singleExpression (singleExpression sc_euclid_gcd) (arguments ( (argument (singleExpression gcd)) , (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression gcd)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_lcm ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable lcm) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]) / (singleExpression (singleExpression sc_euclid_gcd) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression lcm)) ))))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression lcm) (assignmentOperator *=) (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression f)) ))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression lcm)) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_floor) = (singleExpression (singleExpression Math) . (identifierName floor)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_ceiling) = (singleExpression (singleExpression Math) . (identifierName ceil)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_truncate) = (singleExpression parseInt))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_round) = (singleExpression (singleExpression Math) . (identifierName round)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_exp) = (singleExpression (singleExpression Math) . (identifierName exp)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_log) = (singleExpression (singleExpression Math) . (identifierName log)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_sin) = (singleExpression (singleExpression Math) . (identifierName sin)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_cos) = (singleExpression (singleExpression Math) . (identifierName cos)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_tan) = (singleExpression (singleExpression Math) . (identifierName tan)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_asin) = (singleExpression (singleExpression Math) . (identifierName asin)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_acos) = (singleExpression (singleExpression Math) . (identifierName acos)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_atan) = (singleExpression (singleExpression Math) . (identifierName atan)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_sqrt) = (singleExpression (singleExpression Math) . (identifierName sqrt)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_expt) = (singleExpression (singleExpression Math) . (identifierName pow)))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_exact2inexact ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_inexact2exact ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_number2jsstring ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression radix)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName toString)) (arguments ( (argument (singleExpression radix)) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName toString)) (arguments ( )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_jsstring2number ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression s) === (singleExpression (literal "")))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression radix)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression radix)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression t)) && (singleExpression (singleExpression t) !== (singleExpression (literal (numericLiteral 0)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable allowedChars) = (singleExpression (singleExpression (singleExpression (literal "01234567890abcdefghijklmnopqrstuvwxyz")) . (identifierName substring)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression radix) + (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "^[")) + (singleExpression allowedChars)) + (singleExpression (literal "]*$")))) , (argument (singleExpression (literal "i"))) ))))) )) . (identifierName test)) (arguments ( (argument (singleExpression s)) )))) ) (statement (returnStatement return (expressionSequence (singleExpression t)) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression + (singleExpression s)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression t)) && (singleExpression (singleExpression t) !== (singleExpression (literal (numericLiteral 0)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression s) . (identifierName charAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression + (singleExpression c)) === (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression c) !== (singleExpression (literal "0"))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression t)) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_not ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression b) === (singleExpression (literal false)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isBoolean ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression b) === (singleExpression (literal true)))) )) || (singleExpression ( (expressionSequence (singleExpression (singleExpression b) === (singleExpression (literal false)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_Pair ( (formalParameterList (formalParameterArg (assignable car)) , (formalParameterArg (assignable cdr))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName car)) = (singleExpression car))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName cdr)) = (singleExpression cdr))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Pair) . (identifierName prototype)) . (identifierName toString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_toDisplayString) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Pair) . (identifierName prototype)) . (identifierName sc_toWriteOrDisplayString)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable writeOrDisplay))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable current) = (singleExpression this))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal "(")))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (singleExpression writeOrDisplay) (arguments ( (argument (singleExpression (singleExpression current) . (identifierName car))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sc_isPair) (arguments ( (argument (singleExpression (singleExpression current) . (identifierName cdr))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal " ")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression (singleExpression current) . (identifierName cdr)))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression current) . (identifierName cdr)) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (singleExpression (literal " . ")) + (singleExpression (singleExpression writeOrDisplay) (arguments ( (argument (singleExpression (singleExpression current) . (identifierName cdr))) )))))) (eos ;))) (statement (breakStatement break (eos ;)))) })) else (statement (breakStatement break (eos ;)))))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal ")")))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Pair) . (identifierName prototype)) . (identifierName sc_toDisplayString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName sc_toWriteOrDisplayString)) (arguments ( (argument (singleExpression sc_toDisplayString)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Pair) . (identifierName prototype)) . (identifierName sc_toWriteString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName sc_toWriteOrDisplayString)) (arguments ( (argument (singleExpression sc_toWriteString)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_isPair ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression p) instanceof (singleExpression sc_Pair))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isPairEqual ( (formalParameterList (formalParameterArg (assignable p1)) , (formalParameterArg (assignable p2)) , (formalParameterArg (assignable comp))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression comp) (arguments ( (argument (singleExpression (singleExpression p1) . (identifierName car))) , (argument (singleExpression (singleExpression p2) . (identifierName car))) ))) && (singleExpression (singleExpression comp) (arguments ( (argument (singleExpression (singleExpression p1) . (identifierName cdr))) , (argument (singleExpression (singleExpression p2) . (identifierName cdr))) ))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cons ( (formalParameterList (formalParameterArg (assignable car)) , (formalParameterArg (assignable cdr))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Pair) (arguments ( (argument (singleExpression car)) , (argument (singleExpression cdr)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_consStar ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1))))) ]))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 2)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression new (singleExpression (singleExpression sc_Pair) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression res)) )))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_car ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression p) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression p) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_setCarBang ( (formalParameterList (formalParameterArg (assignable p)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName car)) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_setCdrBang ( (formalParameterList (formalParameterArg (assignable p)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caaar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cadar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdaar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cddar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caaaar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car)) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caadar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr)) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caaadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car)) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caaddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr)) . (identifierName car)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdaaar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car)) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdadar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr)) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdaadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car)) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdaddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr)) . (identifierName car)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cadaar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car)) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_caddar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr)) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cadadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car)) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cadddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr)) . (identifierName cdr)) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cddaar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName car)) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cdddar ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName car)) . (identifierName cdr)) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cddadr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName car)) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_cddddr ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p) . (identifierName cdr)) . (identifierName cdr)) . (identifierName cdr)) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_lastPair ( (formalParameterList (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression sc_isPair) (arguments ( (argument (singleExpression l)) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sc_error) (arguments ( (argument (singleExpression (literal "sc_lastPair: pair expected"))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression l))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cdr) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression sc_isPair) (arguments ( (argument (singleExpression cdr)) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression cdr))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cdr) = (singleExpression (singleExpression res) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isNull ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression o) === (singleExpression (literal null)))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isList ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rabbit))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable turtle))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rabbit) = (singleExpression o))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable turtle) = (singleExpression o))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression rabbit) === (singleExpression (literal null))) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression rabbit) instanceof (singleExpression sc_Pair)) && (singleExpression (singleExpression (singleExpression rabbit) . (identifierName cdr)) === (singleExpression (literal null))))) )))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression rabbit) instanceof (singleExpression sc_Pair))) )) && (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression rabbit) . (identifierName cdr)) instanceof (singleExpression sc_Pair))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rabbit) = (singleExpression (singleExpression (singleExpression rabbit) . (identifierName cdr)) . (identifierName cdr)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression turtle) = (singleExpression (singleExpression turtle) . (identifierName cdr)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression rabbit) === (singleExpression turtle))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })) else (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_list ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression arguments))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression a) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression new (singleExpression (singleExpression sc_Pair) (arguments ( (argument (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression res)) )))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_iota ( (formalParameterList (formalParameterArg (assignable num)) , (formalParameterArg (assignable init))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression init))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression init) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression num) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression new (singleExpression (singleExpression sc_Pair) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression init))) , (argument (singleExpression res)) )))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_makeList ( (formalParameterList (formalParameterArg (assignable nbEls)) , (formalParameterArg (assignable fill))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression nbEls))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression new (singleExpression (singleExpression sc_Pair) (arguments ( (argument (singleExpression fill)) , (argument (singleExpression res)) )))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_length ( (formalParameterList (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) ++)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_remq ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dummy) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cdr)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tail) = (singleExpression dummy))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression l) . (identifierName car)) !== (singleExpression o))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) , (argument (singleExpression (literal null))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tail) = (singleExpression (singleExpression tail) . (identifierName cdr)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression dummy) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_remqBang ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dummy) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cdr)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tail) = (singleExpression dummy))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable needsAssig) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression l) . (identifierName car)) === (singleExpression o))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression needsAssig) = (singleExpression (literal true)))) (eos ;)))) })) else (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression needsAssig)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression l))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression needsAssig) = (singleExpression (literal false)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tail) = (singleExpression l))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression dummy) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_delete ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dummy) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cdr)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tail) = (singleExpression dummy))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression sc_isEqual) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) , (argument (singleExpression o)) ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) , (argument (singleExpression (literal null))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tail) = (singleExpression (singleExpression tail) . (identifierName cdr)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression dummy) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_deleteBang ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dummy) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cdr)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tail) = (singleExpression dummy))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable needsAssig) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sc_isEqual) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) , (argument (singleExpression o)) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression needsAssig) = (singleExpression (literal true)))) (eos ;)))) })) else (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression needsAssig)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression l))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression needsAssig) = (singleExpression (literal false)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tail) = (singleExpression l))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression dummy) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_reverseAppendBang ( (formalParameterList (formalParameterArg (assignable l1)) , (formalParameterArg (assignable l2))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression l2))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression res))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression l1))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l1) = (singleExpression (singleExpression l1) . (identifierName cdr)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression res) . (identifierName cdr)) = (singleExpression tmp))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_dualAppend ( (formalParameterList (formalParameterArg (assignable l1)) , (formalParameterArg (assignable l2))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l1) === (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression l2)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l2) === (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression l1)) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rev) = (singleExpression (singleExpression sc_reverse) (arguments ( (argument (singleExpression l1)) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_reverseAppendBang) (arguments ( (argument (singleExpression rev)) , (argument (singleExpression l2)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_append ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1))))) ]))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 2)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_dualAppend) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression res)) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_dualAppendBang ( (formalParameterList (formalParameterArg (assignable l1)) , (formalParameterArg (assignable l2))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l1) === (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression l2)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l2) === (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression l1)) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression l1))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName cdr)) !== (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tmp) = (singleExpression (singleExpression tmp) . (identifierName cdr)))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName cdr)) = (singleExpression l2))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression l1)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_appendBang ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_dualAppendBang) (arguments ( (argument (singleExpression res)) , (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_reverse ( (formalParameterList (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression l1) . (identifierName car))) , (argument (singleExpression res)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l1) = (singleExpression (singleExpression l1) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_reverseBang ( (formalParameterList (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_reverseAppendBang) (arguments ( (argument (singleExpression l)) , (argument (singleExpression (literal null))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_listTail ( (formalParameterList (formalParameterArg (assignable l)) , (formalParameterArg (assignable k))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression l))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression k))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression res) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_listRef ( (formalParameterList (formalParameterArg (assignable l)) , (formalParameterArg (assignable k))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression sc_listTail) (arguments ( (argument (singleExpression l)) , (argument (singleExpression k)) ))) . (identifierName car))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_memq ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression l) . (identifierName car)) === (singleExpression o))) ) (statement (returnStatement return (expressionSequence (singleExpression l)) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_memv ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression l) . (identifierName car)) === (singleExpression o))) ) (statement (returnStatement return (expressionSequence (singleExpression l)) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_member ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sc_isEqual) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) , (argument (singleExpression o)) )))) ) (statement (returnStatement return (expressionSequence (singleExpression l)) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_assq ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable al))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression al) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression al) . (identifierName car)) . (identifierName car)) === (singleExpression o))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression al) . (identifierName car))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression al) = (singleExpression (singleExpression al) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_assv ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable al))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression al) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression al) . (identifierName car)) . (identifierName car)) === (singleExpression o))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression al) . (identifierName car))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression al) = (singleExpression (singleExpression al) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_assoc ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable al))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression al) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sc_isEqual) (arguments ( (argument (singleExpression (singleExpression (singleExpression al) . (identifierName car)) . (identifierName car))) , (argument (singleExpression o)) )))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression al) . (identifierName car))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression al) = (singleExpression (singleExpression al) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringEqual ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) === (singleExpression (singleExpression cs2) . (identifierName val)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringLess ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) < (singleExpression (singleExpression cs2) . (identifierName val)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringGreater ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) > (singleExpression (singleExpression cs2) . (identifierName val)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringLessEqual ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) <= (singleExpression (singleExpression cs2) . (identifierName val)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringGreaterEqual ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) >= (singleExpression (singleExpression cs2) . (identifierName val)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringCIEqual ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))) === (singleExpression (singleExpression (singleExpression (singleExpression cs2) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringCILess ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))) < (singleExpression (singleExpression (singleExpression (singleExpression cs2) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringCIGreater ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))) > (singleExpression (singleExpression (singleExpression (singleExpression cs2) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringCILessEqual ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))) <= (singleExpression (singleExpression (singleExpression (singleExpression cs2) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharStringCIGreaterEqual ( (formalParameterList (formalParameterArg (assignable cs1)) , (formalParameterArg (assignable cs2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression cs1) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))) >= (singleExpression (singleExpression (singleExpression (singleExpression cs2) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_Char ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cached) = (singleExpression (singleExpression (singleExpression sc_Char) . (identifierName lazy)) [ (expressionSequence (singleExpression c)) ]))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression cached)) ) (statement (returnStatement return (expressionSequence (singleExpression cached)) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName val)) = (singleExpression c))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Char) . (identifierName lazy)) [ (expressionSequence (singleExpression c)) ]) = (singleExpression this))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Char) . (identifierName lazy)) = (singleExpression new (singleExpression (singleExpression Object) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Char) . (identifierName prototype)) . (identifierName toString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName val))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Char) . (identifierName prototype)) . (identifierName sc_toWriteString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "#\\")) + (singleExpression (singleExpression this) . (identifierName val)))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_isChar ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression c) instanceof (singleExpression sc_Char))) ))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharEqual) = (singleExpression sc_isCharStringEqual))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharLess) = (singleExpression sc_isCharStringLess))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharGreater) = (singleExpression sc_isCharStringGreater))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharLessEqual) = (singleExpression sc_isCharStringLessEqual))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharGreaterEqual) = (singleExpression sc_isCharStringGreaterEqual))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharCIEqual) = (singleExpression sc_isCharStringCIEqual))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharCILess) = (singleExpression sc_isCharStringCILess))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharCIGreater) = (singleExpression sc_isCharStringCIGreater))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharCILessEqual) = (singleExpression sc_isCharStringCILessEqual))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_isCharCIGreaterEqual) = (singleExpression sc_isCharStringCIGreaterEqual))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_NUMBER_CLASS) = (singleExpression (literal "0123456789")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_WHITESPACE_CLASS) = (singleExpression (literal ' \r\n\t\f')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_LOWER_CLASS) = (singleExpression (literal 'abcdefghijklmnopqrstuvwxyz')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_UPPER_CLASS) = (singleExpression (literal 'ABCDEFGHIJKLMNOPQRSTUVWXYZ')))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_isCharOfClass ( (formalParameterList (formalParameterArg (assignable c)) , (formalParameterArg (assignable cl))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression cl) . (identifierName indexOf)) (arguments ( (argument (singleExpression c)) ))) != (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharAlphabetic ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression sc_isCharOfClass) (arguments ( (argument (singleExpression (singleExpression c) . (identifierName val))) , (argument (singleExpression SC_LOWER_CLASS)) ))) || (singleExpression (singleExpression sc_isCharOfClass) (arguments ( (argument (singleExpression (singleExpression c) . (identifierName val))) , (argument (singleExpression SC_UPPER_CLASS)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharNumeric ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_isCharOfClass) (arguments ( (argument (singleExpression (singleExpression c) . (identifierName val))) , (argument (singleExpression SC_NUMBER_CLASS)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharWhitespace ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression c) . (identifierName val)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression tmp) === (singleExpression (literal " "))) || (singleExpression (singleExpression tmp) === (singleExpression (literal "\r")))) || (singleExpression (singleExpression tmp) === (singleExpression (literal "\n")))) || (singleExpression (singleExpression tmp) === (singleExpression (literal "\t")))) || (singleExpression (singleExpression tmp) === (singleExpression (literal "\f"))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharUpperCase ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_isCharOfClass) (arguments ( (argument (singleExpression (singleExpression c) . (identifierName val))) , (argument (singleExpression SC_UPPER_CLASS)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isCharLowerCase ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_isCharOfClass) (arguments ( (argument (singleExpression (singleExpression c) . (identifierName val))) , (argument (singleExpression SC_LOWER_CLASS)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_char2integer ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression c) . (identifierName val)) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_integer2char ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Char) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression n)) )))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_charUpcase ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Char) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression c) . (identifierName val)) . (identifierName toUpperCase)) (arguments ( )))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_charDowncase ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Char) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression c) . (identifierName val)) . (identifierName toLowerCase)) (arguments ( )))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_makeJSStringOfLength ( (formalParameterList (formalParameterArg (assignable k)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fill))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression c) === (singleExpression undefined))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fill) = (singleExpression (literal " ")))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fill) = (singleExpression c))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable len) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression k) >= (singleExpression len))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression k) & (singleExpression len))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression (singleExpression res) . (identifierName concat)) (arguments ( (argument (singleExpression fill)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fill) = (singleExpression (singleExpression (singleExpression fill) . (identifierName concat)) (arguments ( (argument (singleExpression fill)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression len) (assignmentOperator *=) (singleExpression (literal (numericLiteral 2))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_makejsString ( (formalParameterList (formalParameterArg (assignable k)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fill))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression c)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fill) = (singleExpression (singleExpression c) . (identifierName val)))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fill) = (singleExpression (literal " ")))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_makeJSStringOfLength) (arguments ( (argument (singleExpression k)) , (argument (singleExpression fill)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_jsstring2list ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression s) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression new (singleExpression (singleExpression sc_Char) (arguments ( (argument (singleExpression (singleExpression (singleExpression s) . (identifierName charAt)) (arguments ( (argument (singleExpression i)) )))) ))))) , (argument (singleExpression res)) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_list2jsstring ( (formalParameterList (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression l) . (identifierName car)) . (identifierName val))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "")) . (identifierName concat)) . (identifierName apply)) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression a)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sc_Vector) = (singleExpression Array))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Vector) . (identifierName prototype)) . (identifierName sc_toWriteOrDisplayString)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable writeOrDisplay))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal "#()"))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (singleExpression (literal "#(")) + (singleExpression (singleExpression writeOrDisplay) (arguments ( (argument (singleExpression (singleExpression this) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (singleExpression (literal " ")) + (singleExpression (singleExpression writeOrDisplay) (arguments ( (argument (singleExpression (singleExpression this) [ (expressionSequence (singleExpression i)) ])) )))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal ")")))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Vector) . (identifierName prototype)) . (identifierName sc_toDisplayString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName sc_toWriteOrDisplayString)) (arguments ( (argument (singleExpression sc_toDisplayString)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Vector) . (identifierName prototype)) . (identifierName sc_toWriteString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName sc_toWriteOrDisplayString)) (arguments ( (argument (singleExpression sc_toWriteString)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_isVector ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression v) instanceof (singleExpression sc_Vector))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isVectorEqual ( (formalParameterList (formalParameterArg (assignable v1)) , (formalParameterArg (assignable v2)) , (formalParameterArg (assignable comp))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression v1) . (identifierName length)) !== (singleExpression (singleExpression v2) . (identifierName length)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression v1) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression comp) (arguments ( (argument (singleExpression (singleExpression v1) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression v2) [ (expressionSequence (singleExpression i)) ])) ))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_makeVector ( (formalParameterList (formalParameterArg (assignable size)) , (formalParameterArg (assignable fill))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression new (singleExpression (singleExpression sc_Vector) (arguments ( (argument (singleExpression size)) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression fill) !== (singleExpression undefined))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sc_vectorFillBang) (arguments ( (argument (singleExpression a)) , (argument (singleExpression fill)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vector ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression new (singleExpression (singleExpression sc_Vector) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vectorLength ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression v) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vectorRef ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable pos))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression v) [ (expressionSequence (singleExpression pos)) ])) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vectorSetBang ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable pos)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression v) [ (expressionSequence (singleExpression pos)) ]) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vector2list ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression a) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression res)) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_list2vector ( (formalParameterList (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression new (singleExpression (singleExpression sc_Vector) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vectorFillBang ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable fill))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ]) = (singleExpression fill))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_copyVector ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable len))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression len) <= (singleExpression (singleExpression a) . (identifierName length)))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression len)) )))) (eos ;))) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression a) . (identifierName concat)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName length)) = (singleExpression len))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression tmp)) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_vectorCopy ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable start)) , (formalParameterArg (assignable end))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName slice)) (arguments ( (argument (singleExpression start)) , (argument (singleExpression end)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_vectorCopyBang ( (formalParameterList (formalParameterArg (assignable target)) , (formalParameterArg (assignable tstart)) , (formalParameterArg (assignable source)) , (formalParameterArg (assignable sstart)) , (formalParameterArg (assignable send))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression sstart))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sstart) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression send))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression send) = (singleExpression (singleExpression source) . (identifierName length)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tstart) <= (singleExpression sstart))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression tstart)) , (variableDeclaration (assignable j) = (singleExpression sstart))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression send))) ; (expressionSequence (singleExpression (singleExpression i) ++) , (singleExpression (singleExpression j) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression target) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression source) [ (expressionSequence (singleExpression j)) ]))) (eos ;)))) }))))) })) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable diff) = (singleExpression (singleExpression send) - (singleExpression sstart)))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression tstart) + (singleExpression diff)) - (singleExpression (literal (numericLiteral 1))))) , (variableDeclaration (assignable j) = (singleExpression (singleExpression send) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression j) >= (singleExpression sstart))) ; (expressionSequence (singleExpression (singleExpression i) --) , (singleExpression (singleExpression j) --)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression target) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression source) [ (expressionSequence (singleExpression j)) ]))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression target)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isProcedure ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression o)) === (singleExpression (literal "function")))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_apply ( (formalParameterList (formalParameterArg (assignable proc))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable args) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1))))) ]))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression proc) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression args)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_map ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l1) === (singleExpression undefined))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nbApplyArgs) = (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable applyArgs) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression nbApplyArgs)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable revres) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression nbApplyArgs))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression applyArgs) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName car)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName cdr)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression revres) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression (singleExpression proc) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression applyArgs)) )))) , (argument (singleExpression revres)) ))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_reverseAppendBang) (arguments ( (argument (singleExpression revres)) , (argument (singleExpression (literal null))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_mapBang ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l1) === (singleExpression undefined))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l1_orig) = (singleExpression l1))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nbApplyArgs) = (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable applyArgs) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression nbApplyArgs)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression l1))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression nbApplyArgs))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression applyArgs) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName car)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName cdr)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName car)) = (singleExpression (singleExpression (singleExpression proc) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression applyArgs)) ))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression l1_orig)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_forEach ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l1) === (singleExpression undefined))) ) (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nbApplyArgs) = (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable applyArgs) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression nbApplyArgs)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression nbApplyArgs))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression applyArgs) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName car)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName cdr)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression proc) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression applyArgs)) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_filter ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dummy) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cdr)) : (singleExpression (literal null))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tail) = (singleExpression dummy))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression (singleExpression l1) . (identifierName car))) ))) !== (singleExpression (literal false)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tail) . (identifierName cdr)) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression l1) . (identifierName car))) , (argument (singleExpression (literal null))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tail) = (singleExpression (singleExpression tail) . (identifierName cdr)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l1) = (singleExpression (singleExpression l1) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression dummy) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_filterBang ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable head) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (literal "dummy"))) , (argument (singleExpression l1)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable it) = (singleExpression head))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable next) = (singleExpression l1))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression next) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression (singleExpression next) . (identifierName car))) ))) !== (singleExpression (literal false)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression it) . (identifierName cdr)) = (singleExpression next))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression it) = (singleExpression next))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression next) = (singleExpression (singleExpression next) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression it) . (identifierName cdr)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression head) . (identifierName cdr))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_filterMap1 ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable revres) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression (singleExpression l1) . (identifierName car))) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) !== (singleExpression (literal false)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression revres) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression tmp)) , (argument (singleExpression revres)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l1) = (singleExpression (singleExpression l1) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_reverseAppendBang) (arguments ( (argument (singleExpression revres)) , (argument (singleExpression (literal null))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_filterMap2 ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1)) , (formalParameterArg (assignable l2))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable revres) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression (singleExpression l1) . (identifierName car))) , (argument (singleExpression (singleExpression l2) . (identifierName car))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) !== (singleExpression (literal false)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression revres) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression tmp)) , (argument (singleExpression revres)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l1) = (singleExpression (singleExpression l1) . (identifierName cdr)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l2) = (singleExpression (singleExpression l2) . (identifierName cdr)))) eos))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_reverseAppendBang) (arguments ( (argument (singleExpression revres)) , (argument (singleExpression (literal null))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_filterMap ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l1)) , (formalParameterArg (assignable l2)) , (formalParameterArg (assignable l3))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l2) === (singleExpression undefined))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_filterMap1) (arguments ( (argument (singleExpression proc)) , (argument (singleExpression l1)) )))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l3) === (singleExpression undefined))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_filterMap2) (arguments ( (argument (singleExpression proc)) , (argument (singleExpression l1)) , (argument (singleExpression l2)) )))) (eos ;)))))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nbApplyArgs) = (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable applyArgs) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression nbApplyArgs)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable revres) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l1) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression nbApplyArgs))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression applyArgs) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName car)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]) . (identifierName cdr)))) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression proc) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression applyArgs)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) !== (singleExpression (literal false)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression revres) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression tmp)) , (argument (singleExpression revres)) ))))) (eos ;)))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_reverseAppendBang) (arguments ( (argument (singleExpression revres)) , (argument (singleExpression (literal null))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_any ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable revres) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) !== (singleExpression (literal false)))) ) (statement (returnStatement return (expressionSequence (singleExpression tmp)) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_anyPred ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression sc_any) (arguments ( (argument (singleExpression proc)) , (argument (singleExpression l)) ))) !== (singleExpression (literal false)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_every ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable revres) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression l) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tmp) = (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression (singleExpression l) . (identifierName car))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) === (singleExpression (literal false)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression l) . (identifierName cdr)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression tmp)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_everyPred ( (formalParameterList (formalParameterArg (assignable proc)) , (formalParameterArg (assignable l))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression sc_every) (arguments ( (argument (singleExpression proc)) , (argument (singleExpression l)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) !== (singleExpression (literal false)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_force ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_makePromise ( (formalParameterList (formalParameterArg (assignable proc))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable isResultReady) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression isResultReady))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression proc) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression isResultReady))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isResultReady) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression tmp))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_Values ( (formalParameterList (formalParameterArg (assignable values))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName values)) = (singleExpression values))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_values ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Values) (arguments ( (argument (singleExpression arguments)) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_callWithValues ( (formalParameterList (formalParameterArg (assignable producer)) , (formalParameterArg (assignable consumer))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable produced) = (singleExpression (singleExpression producer) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression produced) instanceof (singleExpression sc_Values))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression consumer) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (singleExpression produced) . (identifierName values))) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression consumer) (arguments ( (argument (singleExpression produced)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_dynamicWind ( (formalParameterList (formalParameterArg (assignable before)) , (formalParameterArg (assignable thunk)) , (formalParameterArg (assignable after))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression before) (arguments ( )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (singleExpression thunk) (arguments ( ))))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))) }) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression after) (arguments ( )))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_Struct ( (formalParameterList (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName name)) = (singleExpression name))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Struct) . (identifierName prototype)) . (identifierName sc_toDisplayString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (literal "#<struct")) + (singleExpression (singleExpression sc_hash) (arguments ( (argument (singleExpression this)) )))) + (singleExpression (literal ">")))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Struct) . (identifierName prototype)) . (identifierName sc_toWriteString)) = (singleExpression (singleExpression (singleExpression sc_Struct) . (identifierName prototype)) . (identifierName sc_toDisplayString)))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_makeStruct ( (formalParameterList (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Struct) (arguments ( (argument (singleExpression name)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isStruct ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression o) instanceof (singleExpression sc_Struct))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_isStructNamed ( (formalParameterList (formalParameterArg (assignable name)) , (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression s) instanceof (singleExpression sc_Struct))) )) && (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression s) . (identifierName name)) === (singleExpression name))) )))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_getStructField ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable field))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression s) [ (expressionSequence (singleExpression field)) ])) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_setStructFieldBang ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable field)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression s) [ (expressionSequence (singleExpression field)) ]) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitNot ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ~ (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitAnd ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) & (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitOr ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) | (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitXor ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ^ (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitLsh ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) << (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitRsh ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) >> (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_bitUrsh ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) >>> (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_jsField ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable field))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) [ (expressionSequence (singleExpression field)) ])) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_setJsFieldBang ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable field)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression field)) ]) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_deleteJsFieldBang ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable field))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression o) [ (expressionSequence (singleExpression field)) ]))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_jsCall ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable fun))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable args) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression (singleExpression i) - (singleExpression (literal (numericLiteral 2))))) ]) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression fun) . (identifierName apply)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression args)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_jsMethodCall ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable field))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable args) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression (singleExpression i) - (singleExpression (literal (numericLiteral 2))))) ]) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression field)) ]) . (identifierName apply)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression args)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_jsNew ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable evalStr) = (singleExpression (literal "new c(")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression evalStr) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) > (singleExpression (literal (numericLiteral 1)))) ? (singleExpression (literal "arguments[1]")) : (singleExpression (literal ""))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression evalStr) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (literal ", arguments[")) + (singleExpression i)) + (singleExpression (literal "]"))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression evalStr) (assignmentOperator +=) (singleExpression (literal ")")))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression evalStr)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_pregexp ( (formalParameterList (formalParameterArg (assignable re))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression re)) )))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_pregexpMatch ( (formalParameterList (formalParameterArg (assignable re)) , (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable reg) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression re) instanceof (singleExpression RegExp))) )) ? (singleExpression re) : (singleExpression (singleExpression sc_pregexp) (arguments ( (argument (singleExpression re)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression reg) . (identifierName exec)) (arguments ( (argument (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression s)) )))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) == (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression tmp) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression tmp) [ (expressionSequence (singleExpression i)) ]) !== (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (singleExpression sc_jsstring2string) (arguments ( (argument (singleExpression (singleExpression tmp) [ (expressionSequence (singleExpression i)) ])) )))) , (argument (singleExpression res)) ))))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (singleExpression sc_cons) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression res)) ))))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_pregexpReplace ( (formalParameterList (formalParameterArg (assignable re)) , (formalParameterArg (assignable s1)) , (formalParameterArg (assignable s2))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable reg))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable jss1) = (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression s1)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable jss2) = (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression s2)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression re) instanceof (singleExpression RegExp))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression re) . (identifierName global))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reg) = (singleExpression re))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reg) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression re) . (identifierName source))) )))))) (eos ;)))))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reg) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression re)) )))) )))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression jss1) . (identifierName replace)) (arguments ( (argument (singleExpression reg)) , (argument (singleExpression jss2)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_pregexpReplaceAll ( (formalParameterList (formalParameterArg (assignable re)) , (formalParameterArg (assignable s1)) , (formalParameterArg (assignable s2))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable reg))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable jss1) = (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression s1)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable jss2) = (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression s2)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression re) instanceof (singleExpression RegExp))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression re) . (identifierName global))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reg) = (singleExpression re))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reg) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression re) . (identifierName source))) , (argument (singleExpression (literal "g"))) )))))) (eos ;)))))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reg) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression re)) )))) , (argument (singleExpression (literal "g"))) )))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression jss1) . (identifierName replace)) (arguments ( (argument (singleExpression reg)) , (argument (singleExpression jss2)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_pregexpSplit ( (formalParameterList (formalParameterArg (assignable re)) , (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable reg) = (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression re) instanceof (singleExpression RegExp))) )) ? (singleExpression re) : (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression re)) )))) )))))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable jss) = (singleExpression (singleExpression sc_string2jsstring) (arguments ( (argument (singleExpression s)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression jss) . (identifierName split)) (arguments ( (argument (singleExpression reg)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression tmp) == (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression sc_vector2list) (arguments ( (argument (singleExpression tmp)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_random ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName random)) (arguments ( ))) * (singleExpression n))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_currentDate ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Date) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_Hashtable ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Hashtable) . (identifierName prototype)) . (identifierName toString)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "#{%hashtable}"))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_HashtableElement ( (formalParameterList (formalParameterArg (assignable key)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName key)) = (singleExpression key))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName val)) = (singleExpression val))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_makeHashtable ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Hashtable) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_hashtablePutBang ( (formalParameterList (formalParameterArg (assignable ht)) , (formalParameterArg (assignable key)) , (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hash) = (singleExpression (singleExpression sc_hash) (arguments ( (argument (singleExpression key)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression hash)) ]) = (singleExpression new (singleExpression (singleExpression sc_HashtableElement) (arguments ( (argument (singleExpression key)) , (argument (singleExpression val)) )))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_hashtableGet ( (formalParameterList (formalParameterArg (assignable ht)) , (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hash) = (singleExpression (singleExpression sc_hash) (arguments ( (argument (singleExpression key)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression hash) in (singleExpression ht))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression hash)) ]) . (identifierName val))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sc_hashtableForEach ( (formalParameterList (formalParameterArg (assignable ht)) , (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable v))) in (expressionSequence (singleExpression ht)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression v)) ]) instanceof (singleExpression sc_HashtableElement))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression v)) ]) . (identifierName key))) , (argument (singleExpression (singleExpression (singleExpression ht) [ (expressionSequence (singleExpression v)) ]) . (identifierName val))) )))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_hashtableContains ( (formalParameterList (formalParameterArg (assignable ht)) , (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hash) = (singleExpression (singleExpression sc_hash) (arguments ( (argument (singleExpression key)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression hash) in (singleExpression ht))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_HASH_COUNTER) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_hash ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression o) === (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal "null"))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression o) === (singleExpression undefined))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal "undefined"))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression o) === (singleExpression (literal true)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal "true"))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression o) === (singleExpression (literal false)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal "false"))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression o)) === (singleExpression (literal "number")))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "num-")) + (singleExpression o))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression o)) === (singleExpression (literal "string")))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "jsstr-")) + (singleExpression o))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression o) . (identifierName sc_getHash))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName sc_getHash)) (arguments ( )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression sc_counterHash) . (identifierName call)) (arguments ( (argument (singleExpression o)) )))) (eos ;)))))))))))))))))))) }))) (sourceElement (statement (functionDeclaration function sc_counterHash ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression this) . (identifierName sc_hash)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName sc_hash)) = (singleExpression (singleExpression (literal "hash-")) + (singleExpression SC_HASH_COUNTER)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression SC_HASH_COUNTER) ++)) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName sc_hash))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sc_Trampoline ( (formalParameterList (formalParameterArg (assignable args)) , (formalParameterArg (assignable maxTailCalls))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) [ (expressionSequence (singleExpression (literal '__trampoline return__'))) ]) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName args)) = (singleExpression args))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName MAX_TAIL_CALLs)) = (singleExpression maxTailCalls))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Trampoline) . (identifierName prototype)) . (identifierName restart)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression this))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression SC_TAIL_OBJECT) . (identifierName calls)) = (singleExpression (singleExpression (singleExpression o) . (identifierName MAX_TAIL_CALLs)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fun) = (singleExpression (singleExpression (singleExpression o) . (identifierName args)) . (identifierName callee)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable res) = (singleExpression (singleExpression (singleExpression fun) . (identifierName apply)) (arguments ( (argument (singleExpression SC_TAIL_OBJECT)) , (argument (singleExpression (singleExpression o) . (identifierName args))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression res) instanceof (singleExpression sc_Trampoline))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression res))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression res)) (eos ;)))))) }))))))) })))) eos))) (sourceElement (statement (functionDeclaration function sc_bindExitLambda ( (formalParameterList (formalParameterArg (assignable proc))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable escape_obj) = (singleExpression new (singleExpression (singleExpression sc_BindExitException) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable escape) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable res))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression escape_obj) . (identifierName res)) = (singleExpression res))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression escape_obj)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression proc) (arguments ( (argument (singleExpression escape)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) === (singleExpression escape_obj))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression e) . (identifierName res))) (eos ;)))) })))) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function sc_BindExitException ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _internalException)) = (singleExpression (literal true)))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_SCM2JS_GLOBALS) = (singleExpression new (singleExpression (singleExpression Object) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_TAIL_OBJECT) = (singleExpression new (singleExpression (singleExpression Object) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression SC_SCM2JS_GLOBALS) . (identifierName TAIL_OBJECT)) = (singleExpression SC_TAIL_OBJECT))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_EOF ( ) { functionBody }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_EOF_OBJECT) = (singleExpression new (singleExpression (singleExpression sc_EOF) (arguments ( )))))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_Port ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function sc_InputPort ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_InputPort) . (identifierName prototype)) = (singleExpression new (singleExpression (singleExpression sc_Port) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_InputPort) . (identifierName prototype)) . (identifierName peekChar)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal "peeked")) in (singleExpression this))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName peeked)) = (singleExpression (singleExpression (singleExpression this) . (identifierName getNextChar)) (arguments ( ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName peeked))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_InputPort) . (identifierName prototype)) . (identifierName readChar)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression this) . (identifierName peekChar)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression this) . (identifierName peeked)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression tmp)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_InputPort) . (identifierName prototype)) . (identifierName isCharReady)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_InputPort) . (identifierName prototype)) . (identifierName close)) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (functionDeclaration function sc_ErrorInputPort ( ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_ErrorInputPort) . (identifierName prototype)) = (singleExpression new (singleExpression (singleExpression sc_InputPort) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_ErrorInputPort) . (identifierName prototype)) . (identifierName getNextChar)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "can't read from error-port."))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_ErrorInputPort) . (identifierName prototype)) . (identifierName isCharReady)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_StringInputPort ( (formalParameterList (formalParameterArg (assignable jsStr))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName str)) = (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression jsStr)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName pos)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_StringInputPort) . (identifierName prototype)) = (singleExpression new (singleExpression (singleExpression sc_InputPort) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_StringInputPort) . (identifierName prototype)) . (identifierName getNextChar)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName pos)) >= (singleExpression (singleExpression (singleExpression this) . (identifierName str)) . (identifierName length)))) ) (statement (returnStatement return (expressionSequence (singleExpression SC_EOF_OBJECT)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName str)) . (identifierName charAt)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName pos)) ++)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_Token ( (formalParameterList (formalParameterArg (assignable type)) , (formalParameterArg (assignable val)) , (formalParameterArg (assignable pos))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName type)) = (singleExpression type))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName val)) = (singleExpression val))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName pos)) = (singleExpression pos))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName EOF)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName OPEN_PAR)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName CLOSE_PAR)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName OPEN_BRACE)) = (singleExpression (literal (numericLiteral 3))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName CLOSE_BRACE)) = (singleExpression (literal (numericLiteral 4))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName OPEN_BRACKET)) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName CLOSE_BRACKET)) = (singleExpression (literal (numericLiteral 6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName WHITESPACE)) = (singleExpression (literal (numericLiteral 7))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName QUOTE)) = (singleExpression (literal (numericLiteral 8))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName ID)) = (singleExpression (literal (numericLiteral 9))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName DOT)) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName STRING)) = (singleExpression (literal (numericLiteral 11))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName NUMBER)) = (singleExpression (literal (numericLiteral 12))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName ERROR)) = (singleExpression (literal (numericLiteral 13))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName VECTOR_BEGIN)) = (singleExpression (literal (numericLiteral 14))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName TRUE)) = (singleExpression (literal (numericLiteral 15))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName FALSE)) = (singleExpression (literal (numericLiteral 16))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName UNSPECIFIED)) = (singleExpression (literal (numericLiteral 17))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName REFERENCE)) = (singleExpression (literal (numericLiteral 18))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName STORE)) = (singleExpression (literal (numericLiteral 19))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sc_Token) . (identifierName CHAR)) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable SC_ID_CLASS) = (singleExpression (singleExpression (singleExpression SC_LOWER_CLASS) + (singleExpression SC_UPPER_CLASS)) + (singleExpression (literal "!$%*+-./:<=>?@^_~"))))) (eos ;)))) (sourceElement (statement (functionDeclaration function sc_Tokenizer ( (formalParameterList (formalParameterArg (assignable port))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName port)) = (singleExpression port))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Tokenizer) . (identifierName prototype)) . (identifierName peekToken)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression this) . (identifierName peeked))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName peeked))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newToken) = (singleExpression (singleExpression (singleExpression this) . (identifierName nextToken)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName peeked)) = (singleExpression newToken))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression newToken)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Tokenizer) . (identifierName prototype)) . (identifierName readToken)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression this) . (identifierName peekToken)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression this) . (identifierName peeked)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression tmp)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression sc_Tokenizer) . (identifierName prototype)) . (identifierName nextToken)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable port) = (singleExpression (singleExpression this) . (identifierName port)))) (eos ;)))) (sourceElement (statement (functionDeclaration function isNumberChar ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression c) >= (singleExpression (literal "0"))) && (singleExpression (singleExpression c) <= (singleExpression (literal "9"))))) ))) (eos ;)))))) }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function isIdOrNumberChar ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression SC_ID_CLASS) . (identifierName indexOf)) (arguments ( (argument (singleExpression c)) ))) != (singleExpression - (singleExpression (literal (numericLiteral 1))))) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression c) >= (singleExpression (literal "0"))) && (singleExpression (singleExpression c) <= (singleExpression (literal "9"))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function isWhitespace ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression c) === (singleExpression (literal " "))) || (singleExpression (singleExpression c) === (singleExpression (literal "\r")))) || (singleExpression (singleExpression c) === (singleExpression (literal "\n")))) || (singleExpression (singleExpression c) === (singleExpression (literal "\t")))) || (singleExpression (singleExpression c) === (singleExpression (literal "\f"))))) (eos ;)))))) }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function isWhitespaceOrEOF ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression isWhitespace) (arguments ( (argument (singleExpression c)) ))) || (singleExpression (singleExpression c) === (singleExpression SC_EOF_OBJECT)))) (eos ;)))))) }))) (sourceElement (statement (emptyStatement ;))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression readString) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) = (singleExpression (literal "")))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression port) . (identifierName readChar)) (arguments ( ))))) (eos ;))) (statement (switchStatement switch ( (expressionSequence (singleExpression c)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal '"'))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression sc_Token) (arguments ( (argument (singleExpression (literal (numericLiteral 11)))) , (argument (singleExpression res)) ))))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "\\"))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression (singleExpression port) . (identifierName readChar)) (arguments ( ))))) (eos ;))) (statement (switchStatement switch ( (expressionSequence (singleExpression tmp)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal '0'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\0")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'a'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\a")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'b'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\b")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'f'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\f")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'n'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\n")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'r'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\r")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 't'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\t")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'v'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal "\v")))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal '"'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal '"')))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal '\\'))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression res) (assignmentOperator +=) (singleExpression (literal '\\')))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal 'x'))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nb) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hexC) = (singleExpression (singleExpression (singleExpression port) . (identifierName peekChar)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression hexC) >= (singleExpression (literal '0'))) && (singleExpression (singleExpression hexC) <= (singleExpression (literal '9'))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression port) . (identifierName readChar)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nb) = (singleExpression (singleExpression (singleExpression (singleExpression nb) * (singleExpression (literal (numericLiteral 16)))) + (singleExpression (singleExpression (singleExpression hexC) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) - (singleExpression (singleExpression (singleExpression (literal '0')) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression hexC) >= (singleExpression (literal 'a'))) && (singleExpression (singleExpression hexC) <= (singleExpression (literal 'f'))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression port) . (identifierName readChar)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nb) = (singleExpression (singleExpression (singleExpression (singleExpression nb) * (singleExpression (literal (numericLiteral 16)))) + (singleExpression (singleExpression (singleExpression hexC) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) - (singleExpression (singleExpression (singleExpression (literal 'a')) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression hexC) >= (singleExpression (literal 'A'))) && (singleExpression (singleExpression hexC) <= (singleExpression (literal 'F'))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression port) . (identifierName readChar)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nb) = (singleExpression (singleExpression (singleExpression (singleExpression nb) * (singleExpression (literal (numericLiteral 16)))) + (singleExpression (singleExpression (singleExpression hexC) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) - (singleExpression (singleExpression (singleExpression (literal 'A')) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))))) (eos ;)))) })) else statement)))))) (statement {))))))))))))))) <EOF>)))) <EOF>))))) <EOF>))))) <missing '}'>)))) (eos <EOF>))))) <EOF>)