(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) eos))) (sourceElement (statement (functionDeclaration function unreachableCodeTest ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) == (singleExpression b))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression unreachableCodeTest)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression unreachableCodeTest) (arguments ( ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed unreachableCodeTest() with i = ")) + (singleExpression i))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function inlinedCompareToNull ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function inlinedComparedToUndefined ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) == (singleExpression undefined))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function warmupInlineFunctions ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable returnValue) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression (literal "foo"))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression (literal null))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression Math)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression (literal (numericLiteral 5.5)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedComparedToUndefined) (arguments ( (argument (singleExpression (literal "foo"))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedComparedToUndefined) (arguments ( (argument (singleExpression (literal null))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedComparedToUndefined) (arguments ( (argument (singleExpression Math)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedComparedToUndefined) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) (assignmentOperator +=) (singleExpression (singleExpression inlinedComparedToUndefined) (arguments ( (argument (singleExpression (literal (numericLiteral 5.5)))) ))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression returnValue)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression warmupInlineFunctions)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression warmupInlineFunctions) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testInlineFunctions ( (formalParameterList (formalParameterArg (assignable undefinedArg)) , (formalParameterArg (assignable nullArg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression (literal "foo"))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed inlinedCompareToNull(\"foo\")"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression (literal null))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed !inlinedCompareToNull(null)"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression undefined)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed !inlinedCompareToNull(undefined)"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression undefinedArg)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed !inlinedCompareToNull(undefinedArg)"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression inlinedCompareToNull) (arguments ( (argument (singleExpression nullArg)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed !inlinedCompareToNull(nullArg)"))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testInlineFunctions)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testInlineFunctions) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal null))) )))) (eos ;)))) })))))) <EOF>)