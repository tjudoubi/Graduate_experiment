(program (sourceElements (sourceElement (statement (functionDeclaration function arithAddIdentityWrittenAsInteger ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression x) + (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression (literal (numericLiteral 0))) + (singleExpression x)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression x)) ))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression a)) )))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression b)) ))))) ))) && (singleExpression (singleExpression a) !== (singleExpression b)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Internal error on arithAddIdentityWrittenAsInteger, a = ")) + (singleExpression a)) + (singleExpression (literal " b = "))) + (singleExpression b))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arithAddIdentityWrittenAsInteger)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testArithAddIdentityWrittenAsInteger ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsInteger) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression i))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsInteger(i) = ")) + (singleExpression result)) + (singleExpression (literal ", expected "))) + (singleExpression i))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression - (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsInteger(-0) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -0")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testValue) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral .5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsInteger) (arguments ( (argument (singleExpression testValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression testValue))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsInteger(i) = ")) + (singleExpression result)) + (singleExpression (literal ", expected "))) + (singleExpression testValue))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsInteger) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsInteger(NaN) = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsInteger) (arguments ( (argument (singleExpression Infinity)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) )))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsInteger(Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected Infinity")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsInteger) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) ))) || (singleExpression (singleExpression result) >= (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsInteger(-Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -Infinity")))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArithAddIdentityWrittenAsInteger) (arguments ( )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression x)) )))) eos))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression x) + (singleExpression (literal (numericLiteral 0.0)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression (literal (numericLiteral 0))) . + (identifierName x)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression x)) ))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression a)) )))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression b)) ))))) ))) && (singleExpression (singleExpression a) !== (singleExpression b)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Internal error on arithAddIdentityWrittenAsDouble, a = ")) + (singleExpression a)) + (singleExpression (literal " b = "))) + (singleExpression b))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arithAddIdentityWrittenAsDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testArithAddIdentityWrittenAsDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression i))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsDouble(i) = ")) + (singleExpression result)) + (singleExpression (literal ", expected "))) + (singleExpression i))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression - (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsDouble(-0) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -0 ")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testValue) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral .5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression testValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression testValue))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsDouble(i) = ")) + (singleExpression result)) + (singleExpression (literal ", expected "))) + (singleExpression testValue))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsDouble(NaN) = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression Infinity)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) )))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsDouble(Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected Infinity")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAddIdentityWrittenAsDouble) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) ))) || (singleExpression (singleExpression result) >= (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAddIdentityWrittenAsDouble(-Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -Infinity")))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArithAddIdentityWrittenAsDouble) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function arithAdd42WrittenAsInteger ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression x) + (singleExpression (literal (numericLiteral 42)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression (literal (numericLiteral 42))) + (singleExpression x)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression x)) ))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression a)) )))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression b)) ))))) ))) && (singleExpression (singleExpression a) !== (singleExpression b)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Internal error on arithAdd42WrittenAsInteger, a = ")) + (singleExpression a)) + (singleExpression (literal " b = "))) + (singleExpression b))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arithAdd42WrittenAsInteger)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testArithAdd42WrittenAsInteger ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 13)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 55))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(13) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 55")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(-0) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 42")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 13.3)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 55.3))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(13.3) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 55.3")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(NaN) = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression Infinity)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) )))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected Infinity")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) ))) || (singleExpression (singleExpression result) >= (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(-Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -Infinity")))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArithAdd42WrittenAsInteger) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function arithAdd42WrittenAsInteger ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression x) + (singleExpression (literal (numericLiteral 42)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression (literal (numericLiteral 42))) + (singleExpression x)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression x)) ))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression a)) )))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression b)) ))))) ))) && (singleExpression (singleExpression a) !== (singleExpression b)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Internal error on arithAdd42WrittenAsInteger, a = ")) + (singleExpression a)) + (singleExpression (literal " b = "))) + (singleExpression b))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arithAdd42WrittenAsInteger)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testArithAdd42WrittenAsInteger ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 13)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 55))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(13) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 55")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(-0) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 42")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 13.3)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 55.3))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(13.3) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 55.3")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(NaN) = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression Infinity)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) )))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected Infinity")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (emptyStatement ;)) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithAdd42WrittenAsInteger) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression isFinite) (arguments ( (argument (singleExpression result)) ))) || (singleExpression (singleExpression result) >= (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithAdd42WrittenAsInteger(-Infinity) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -Infinity")))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArithAdd42WrittenAsInteger) (arguments ( )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arithSub42WrittenAsDouble) (arguments ( (argument (singleExpression x)) )))) eos))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) | (singleExpression (literal (numericLiteral 0))))) )) - (singleExpression (literal (numericLiteral 42.0)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 42)))) .))) eos)) (statement (expressionStatement (expressionSequence (singleExpression + (singleExpression ( (expressionSequence (singleExpression (singleExpression x) | (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression x)) ))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression a)) )))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression b)) ))))) ))) && (singleExpression (singleExpression a) !== (singleExpression b)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Internal error on arithSub42WrittenAsDouble, a = ")) + (singleExpression a)) + (singleExpression (literal " b = "))) + (singleExpression b))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arithSub42WrittenAsDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testArithSub42WrittenAsDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithSub42WrittenAsDouble) (arguments ( (argument (singleExpression (literal (numericLiteral 13)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression - (singleExpression (literal (numericLiteral 29)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithSub42WrittenAsDouble(13) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -29")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithSub42WrittenAsDouble) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression - (singleExpression (literal (numericLiteral 42)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithSub42WrittenAsDouble(-0) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -42")))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression arithSub42WrittenAsDouble) (arguments ( (argument (singleExpression (literal (numericLiteral 13.3)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression - (singleExpression (literal (numericLiteral 29)))))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "arithSub42WrittenAsDouble(13.3) = ")) + (singleExpression result)) + (singleExpression (literal ", expected -29")))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArithSub42WrittenAsDouble) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function doubleConstant ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (literal (numericLiteral 0.0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression + (singleExpression (literal (numericLiteral 0.0))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression doubleConstant)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testDoubleConstant ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression doubleConstant) (arguments ( )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testDoubleConstant) (arguments ( )))) (eos ;))))) <EOF>)