(program (sourceElements (sourceElement (statement (functionDeclaration function testWithoutFTL ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal (numericLiteral 0)))))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression g) . (identifierName apply)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression a)) )))))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noFTL) (arguments ( (argument (singleExpression f)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 1e6))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ; ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) )))) eos))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 1e10)))) }))) )))) eos))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression RangeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Expected RangeError due to stack overflow"))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testWithFTL ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal (numericLiteral 0)))))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression g) . (identifierName apply)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression a)) )))))))) eos))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 1e6))))) ; (expressionSequence (singleExpression (singleExpression i) --)) ; ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) )))) eos))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 1e10)))) }))) )))) eos))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression RangeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Expected RangeError due to stack overflow"))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithoutFTL) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithFTL) (arguments ( )))) (eos ;))))) <EOF>)