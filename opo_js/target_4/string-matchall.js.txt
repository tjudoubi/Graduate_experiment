(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `expected ${expected} but got ${actual}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldNotThrow ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowTypeError ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression TypeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected TypeError!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression (literal /a/))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal 'a'))) ))))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName match)) ]) ( ) { functionBody }) }))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName match)) ]) ( ) { functionBody }) , (propertyAssignment (propertyName (identifierName flags)) : (singleExpression (literal 'g'))) }))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression (literal /a/g))) ))))) ])) . (identifierName join)) (arguments ( )))) , (argument (singleExpression (literal 'a,a,a'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal 'a'))) , (argument (singleExpression (literal 'g'))) ))))) ))))) ])) . (identifierName join)) (arguments ( )))) , (argument (singleExpression (literal 'a,a,a'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression (singleExpression (singleExpression (literal 'abaca')) . (identifierName matchAll)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName matchAll)) ]) : (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression RegExp) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName matchAll))) ]) . (identifierName bind)) (arguments ( (argument (singleExpression (literal /a/g))) )))) }))) ))))) ])) . (identifierName join)) (arguments ( )))) , (argument (singleExpression (literal 'a,a,a'))) )))) (eos ;))))) <EOF>)