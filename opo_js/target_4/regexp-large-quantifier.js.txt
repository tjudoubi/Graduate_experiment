(program (sourceElements (sourceElement (statement (functionDeclaration function testRegExp ( (formalParameterList (formalParameterArg (assignable pattern)) , (formalParameterArg (assignable string)) , (formalParameterArg (assignable expectedMatch))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable r) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression pattern)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable actualResult) = (singleExpression (singleExpression (singleExpression r) . (identifierName exec)) (arguments ( (argument (singleExpression string)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression expectedMatch) === (singleExpression undefined))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actualResult) !== (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression r)) + (singleExpression (literal ".exec(\""))) + (singleExpression string)) + (singleExpression (literal "\") to be null")))) ))) (eos ;)))))) })) else (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression actualResult) === (singleExpression (literal null))) || (singleExpression (singleExpression (singleExpression actualResult) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression expectedMatch)))) ) (statement (throwStatement throw (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression r)) + (singleExpression (literal ".exec(\""))) + (singleExpression string)) + (singleExpression (literal "\")[0] to be "))) + (singleExpression expectedMatch)) + (singleExpression (literal ".")))) ))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal "a{0,4294967295}"))) , (argument (singleExpression (literal "a"))) , (argument (singleExpression (literal "a"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal "a{0,4294967296}"))) , (argument (singleExpression (literal "a"))) , (argument (singleExpression (literal "a"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal "^a{0,4294967296}$"))) , (argument (singleExpression (literal "a{0,4294967296}"))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExp) (arguments ( (argument (singleExpression (literal "(?:a{0,340282366920}?){0,1}a"))) , (argument (singleExpression (literal "aa"))) , (argument (singleExpression (literal "aa"))) )))) (eos ;))))) <EOF>)