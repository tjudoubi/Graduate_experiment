(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./resources/typedarray-test-helper-functions.js"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression description) (arguments ( (argument (singleExpression (literal "This test checks the behavior of the TypedArray.prototype.find function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.prototype.find.length"))) , (argument (singleExpression (literal "1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.prototype.find.name"))) , (argument (singleExpression (literal "'find'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "isSameFunctionForEachTypedArrayPrototype('find')"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeReceivesArray('find', [undefined, this, { }, [ ], true, ''])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "testPrototypeFunction has the following arg list (name, args, init, result [ , expectedArray ])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "1.0 Single Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function keepEven ( (formalParameterList (formalParameterArg (assignable e)) , (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) & (singleExpression (literal (numericLiteral 1))))) ))) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName keep)) ? (singleExpression (singleExpression (singleExpression this) . (identifierName keep)) === (singleExpression i)) : (singleExpression (literal false)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(keepEven)', [12, 5, 8, 13, 44], 12)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(keepEven)', [11, 13, 17, 13, 22], 22)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(keepEven)', [11, 13, 17, 13, 11], undefined)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "2.0 Two Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable thisValue) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName keep)) : (singleExpression (literal (numericLiteral 3)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(keepEven, thisValue)', [11, 23, 11, 1, 44], 1)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "3.0 Array Element Changing"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function keepEvenAndChange ( (formalParameterList (formalParameterArg (assignable e)) , (formalParameterArg (assignable i)) , (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression a) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))) - (singleExpression i))) ]) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) & (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(keepEvenAndChange)', [11, 15, 3, 12, 44], undefined, [5, 5, 5, 5, 5])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "4.0 Exception Test"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function isBigEnoughAndException ( (formalParameterList (formalParameterArg (assignable element)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) == (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "exception from function"))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression element) >= (singleExpression (literal (numericLiteral 10))))) ))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(isBigEnoughAndException)', [12, 15, 10, 13, 44], 12)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(isBigEnoughAndException)', [9, 15, 10, 13, 44], false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "5.0 Wrong Type for Callback Test"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(8)', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.find callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(\"wrong\")', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.find callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(new Object())', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.find callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '(null)', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.find callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('find', '()', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.find callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression finishJSTest) (arguments ( )))) (eos ;))))) <EOF>)