(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable object)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (singleExpression object)) , (propertyAssignment (propertyName (identifierName name)) : (singleExpression (singleExpression (singleExpression (literal '[object ')) + (singleExpression name)) + (singleExpression (literal ']')))) }))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function iter ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression iter) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) )))) , (argument (singleExpression (literal "Array Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression iter) (arguments ( (argument (singleExpression new (singleExpression Array))) )))) , (argument (singleExpression (literal "Array Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName keys)) (arguments ( )))) , (argument (singleExpression (literal "Array Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName entries)) (arguments ( )))) , (argument (singleExpression (literal "Array Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression iter) (arguments ( (argument (singleExpression new (singleExpression Map))) )))) , (argument (singleExpression (literal "Map Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Map) (arguments ( ))))) )) . (identifierName keys)) (arguments ( )))) , (argument (singleExpression (literal "Map Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Map) (arguments ( ))))) )) . (identifierName entries)) (arguments ( )))) , (argument (singleExpression (literal "Map Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression iter) (arguments ( (argument (singleExpression new (singleExpression Set))) )))) , (argument (singleExpression (literal "Set Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Set) (arguments ( ))))) )) . (identifierName keys)) (arguments ( )))) , (argument (singleExpression (literal "Set Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Set) (arguments ( ))))) )) . (identifierName entries)) (arguments ( )))) , (argument (singleExpression (literal "Set Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression iter) (arguments ( (argument (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal ""))) ))))) )))) , (argument (singleExpression (literal "String Iterator"))) )))) , (arrayElement (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression iter) (arguments ( (argument (singleExpression (literal ""))) )))) , (argument (singleExpression (literal "String Iterator"))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function check ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression object)) , (propertyAssignment (singleExpression name)) })))) of (expressionSequence (singleExpression tests)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression check) (arguments ( (argument (singleExpression (singleExpression (singleExpression object) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression name)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression check) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression object)) )))) , (argument (singleExpression name)) )))) (eos ;)))) })))))) <EOF>)