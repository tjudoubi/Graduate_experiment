(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'bad assertion'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testStackOverflowGet ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression p)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) . (identifierName anyField))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) === (singleExpression (literal "RangeError: Maximum call stack size exceeded.")))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression threw)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testStackOverflowIndexedGet ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression p)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) [ (expressionSequence (singleExpression i)) ])) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) === (singleExpression (literal "RangeError: Maximum call stack size exceeded.")))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression threw)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testStackOverflowSet ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression p)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression p) . (identifierName anyField)) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) === (singleExpression (literal "RangeError: Maximum call stack size exceeded.")))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression threw)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testStackOverflowIndexedSet ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression p)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression p) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) === (singleExpression (literal "RangeError: Maximum call stack size exceeded.")))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression threw)) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 250))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testStackOverflowGet) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testStackOverflowIndexedGet) (arguments ( (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testStackOverflowSet) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testStackOverflowIndexedSet) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) })))) <EOF>)