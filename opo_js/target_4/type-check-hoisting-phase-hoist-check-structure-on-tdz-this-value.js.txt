(program (sourceElements (sourceElement (statement (functionDeclaration function __isPropertyOfType ( (formalParameterList (formalParameterArg (assignable obj)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable type))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression desc) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression name)) ))))) eos))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression typeof (singleExpression type)) === (singleExpression (literal 'undefined'))) || (singleExpression (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName value))) === (singleExpression type)))) (eos ;)))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression __getProperties) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression type)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression properties) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) name)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression obj)) )))) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression __isPropertyOfType) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression name)) , (argument (singleExpression type)) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression properties) . (identifierName push)) (arguments ( (argument (singleExpression name)) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proto) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression obj)) ))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression proto) && (singleExpression (singleExpression proto) != (singleExpression (singleExpression Object) . (identifierName prototype))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression proto)) ))) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters name) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proto) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression proto)) ))))) (eos ;)))) })))) (statement (returnStatement return (expressionSequence (singleExpression properties)) (eos ;)))) }))) (sourceElement statement) (sourceElement (statement function *)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression __getObjects) (arguments ( (argument (singleExpression (singleExpression root) = (singleExpression this))) , (argument (singleExpression (singleExpression level) = (singleExpression (literal (numericLiteral 0))))) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression level) > (singleExpression (literal (numericLiteral 4))))) ) (statement (returnStatement return (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj_names) = (singleExpression (singleExpression __getProperties) (arguments ( (argument (singleExpression root)) , (argument (singleExpression (literal 'object'))) ))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) obj_name)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression obj_names)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (singleExpression root) [ (expressionSequence (singleExpression obj_name)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression (singleExpression __getObjects) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression (singleExpression level) + (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) }))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression __getRandomObject) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) obj)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression __getObjects) (arguments ( )))) (eos )))) (statement (block { }))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable theClass) = (singleExpression class (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 242487))) != (singleExpression (literal null))) && (singleExpression (singleExpression typeof (singleExpression (singleExpression __getRandomObject) (arguments ( )))) == (singleExpression (literal "object"))))) ) (statement (tryStatement try (block { }) (catchProduction catch ( (assignable e) ) (block { }))))))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable childClass) = (singleExpression class Class (classTail extends (singleExpression theClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression this) . (identifierName idValue))) eos))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arrow) (arguments ( ))) (arguments ( ))) (arguments ( )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression counter) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression counter) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression childClass) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) })))))) <EOF>)