(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test1) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function foo ( (formalParameterList (lastFormalParameterArg ... (singleExpression c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression foo) (arguments ( (argument ... (singleExpression arr)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) . (identifierName length)) === (singleExpression (singleExpression arr) . (identifierName length)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) )))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (singleExpression Array) . (identifierName prototype))) , (argument (singleExpression (literal "10"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 35)))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName set)) ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))))) }) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called2) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (singleExpression Array) . (identifierName prototype))) , (argument (singleExpression (literal "0"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "In get!"))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 35)))) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called2) = (singleExpression (literal true)))) (eos ;)))))) }))) }))) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression foo) (arguments ( (argument ... (singleExpression arr)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 10)))) ]) = (singleExpression (literal (numericLiteral 25))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 10)))) ]) === (singleExpression (literal (numericLiteral 35))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal "foo")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression called2))) )))) (eos ;)))) })) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression foo) (arguments ( (argument ... (singleExpression arr)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) === (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 11)))) ]) = (singleExpression (literal (numericLiteral 35))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) . (identifierName length)) === (singleExpression (literal (numericLiteral 12))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 10)))) ]) = (singleExpression (literal (numericLiteral 25))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 10)))) ]) === (singleExpression (literal (numericLiteral 35))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal "foo")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression called2))) )))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test1) (arguments ( )))) (eos ;))))) <EOF>)