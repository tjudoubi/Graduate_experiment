(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression (singleExpression (anoymousFunction (functionDeclaration function foo ( ) { functionBody }))) . (identifierName bind)) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) . (identifierName name)) === (singleExpression (literal "bound foo")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression (singleExpression (anoymousFunction function ( ) { functionBody })) . (identifierName bind)) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) . (identifierName name)) === (singleExpression (literal "bound ")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression (singleExpression (anoymousFunction (functionDeclaration function foo ( ) { functionBody }))) . (identifierName bind)) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression f)) ))) . (identifierName includes)) (arguments ( (argument (singleExpression (literal "name"))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) . (identifierName name)) === (singleExpression (literal "bound foo")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression f)) ))) . (identifierName includes)) (arguments ( (argument (singleExpression (literal "name"))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression (singleExpression (anoymousFunction (functionDeclaration function foo ( ) { functionBody }))) . (identifierName bind)) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) . (identifierName name)) === (singleExpression (literal "bound foo")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression f)) ))) . (identifierName includes)) (arguments ( (argument (singleExpression (literal "name"))) )))) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)