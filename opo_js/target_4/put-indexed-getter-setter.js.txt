(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setterValue) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (classDeclaration class X (classTail { (classElement static (methodDefinition (setter set (propertyName (numericLiteral 7))) ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setterValue) = (singleExpression x))) (eos ;)))))) })) (classElement static (methodDefinition (getter get (propertyName (numericLiteral 7))) ( ) { functionBody })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression X) [ (expressionSequence (singleExpression (literal (numericLiteral 7)))) ]) = (singleExpression (literal (numericLiteral 27))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression setterValue) !== (singleExpression (literal (numericLiteral 27))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (singleExpression Object) . (identifierName prototype))) , (argument (singleExpression (literal "7"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 500)))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName set)) ( (formalParameterList (formalParameterArg (assignable x))) ) { functionBody }) }))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))))) <EOF>)