(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (functionDeclaration function func ( (formalParameterList (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression count) ++) > (singleExpression (literal (numericLiteral 300))))) ) (statement (returnStatement return (eos ;)))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName __defineGetter__)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName isConcatSpreadable))) , (argument (singleExpression val)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) = (singleExpression arr))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName concat)) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) ))))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression func)) , (argument (singleExpression (arrayLiteral [ elementList ]))) ))))) )))) (eos ;)))) })))))) <EOF>)