(program (sourceElements (sourceElement (statement (functionDeclaration function exponentIsZero ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsZero)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsZero ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsZero) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: zeroExponent(5) should be 1, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsZero) (arguments ( (argument (singleExpression (literal (numericLiteral 5.5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: zeroExponent(5.5) should be 1, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsZero) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function exponentIsOne ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsOne)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsOne ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsOne) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 5))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsOne(5) should be 5, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsOne) (arguments ( (argument (singleExpression (literal (numericLiteral 5.5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 5.5))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsOne(5.5) should be 5.5, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsOne) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function powUsedAsSqrt ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 0.5)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression powUsedAsSqrt)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPowUsedAsSqrt) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsSqrt) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: powUsedAsSqrt(4) should be 2, was = ")) + (singleExpression result))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsSqrt) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: powUsedAsSqrt(4) should be ")) + (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) )))) + (singleExpression (literal ", was = "))) + (singleExpression result))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsSqrt) (arguments ( (argument (singleExpression Infinity)) ))) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSqrt(Infinity)"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsSqrt) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSqrt(-Infinity)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nanResult) = (singleExpression (singleExpression powUsedAsSqrt) (arguments ( (argument (singleExpression NaN)) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression nanResult) === (singleExpression nanResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSqrt(NaN)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression zeroResult) = (singleExpression powUsedAsSqrt))) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . ) (identifierName (reservedWord (keyword if)))) (arguments ( (argument (singleExpression (singleExpression zeroResult) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression zeroResult))) )) !== (singleExpression Infinity)))) )))) <missing ')'>) throw) eos)) (statement (expressionStatement (expressionSequence (singleExpression (literal "Failed powUsedAsSqrt(0.)"))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negativeZeroResult) = (singleExpression (singleExpression powUsedAsSqrt) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression negativeZeroResult) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression negativeZeroResult))) )) !== (singleExpression Infinity)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSqrt(-0)"))) (eos ;)))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPowUsedAsSqrt) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function powUsedAsOneOverSqrt ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0.5))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression powUsedAsOneOverSqrt)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPowUsedAsOneOverSqrt) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsOneOverSqrt) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0.5))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: powUsedAsOneOverSqrt(4) should be 0.5, was = ")) + (singleExpression result))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsOneOverSqrt) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) )))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: powUsedAsOneOverSqrt(4) should be ")) + (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) ))))) + (singleExpression (literal ", was = "))) + (singleExpression result))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsOneOverSqrt) (arguments ( (argument (singleExpression Infinity)) ))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsOneOverSqrt(Infinity)"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsOneOverSqrt) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsOneOverSqrt(-Infinity)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nanResult) = (singleExpression (singleExpression powUsedAsOneOverSqrt) (arguments ( (argument (singleExpression NaN)) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression nanResult) === (singleExpression nanResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsOneOverSqrt(NaN)"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsOneOverSqrt) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsOneOverSqrt(0)"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression powUsedAsOneOverSqrt)) <missing ')'> (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 0)))) .)) )) !== (singleExpression Infinity))) (eos )))))) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsOneOverSqrt(-0.)"))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPowUsedAsOneOverSqrt) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function powUsedAsSquare ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression powUsedAsSquare)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPowUsedAsSquare) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 4))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: powUsedAsSquare(4) should be 2, was = ")) + (singleExpression result))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression (literal (numericLiteral 4.4)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 19.360000000000003))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: powUsedAsSquare(4) should be ")) + (singleExpression (literal (numericLiteral 19.360000000000003)))) + (singleExpression (literal ", was = "))) + (singleExpression result))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 9.869604401089358))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: powUsedAsSquare(4) should be ")) + (singleExpression (literal (numericLiteral 9.869604401089358)))) + (singleExpression (literal ", was = "))) + (singleExpression result))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression Infinity)) ))) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSquare(Infinity)"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression - (singleExpression Infinity))) ))) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSquare(-Infinity)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nanResult) = (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression NaN)) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression nanResult) === (singleExpression nanResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSquare(NaN)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression zeroResult) = (singleExpression powUsedAsSquare))) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . ) (identifierName (reservedWord (keyword if)))) (arguments ( (argument (singleExpression (singleExpression zeroResult) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression zeroResult))) )) !== (singleExpression Infinity)))) )))) <missing ')'>) throw) eos)) (statement (expressionStatement (expressionSequence (singleExpression (literal "Failed powUsedAsSquare(0.)"))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negativeZeroResult) = (singleExpression (singleExpression powUsedAsSquare) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression negativeZeroResult) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression negativeZeroResult))) )) !== (singleExpression Infinity)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed powUsedAsSquare(-0)"))) (eos ;)))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPowUsedAsSquare) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function intIntConstantsSmallNumbers ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function intIntConstantsLargeNumbers ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function intIntSmallConstants ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function intDoubleConstants ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 14)))) , (argument (singleExpression (literal (numericLiteral 42.5)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function doubleDoubleConstants ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 13.5)))) , (argument (singleExpression (literal (numericLiteral 42.5)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function doubleIntConstants ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 13.5)))) , (argument (singleExpression (literal (numericLiteral 52)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression intIntConstantsSmallNumbers)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression intIntConstantsLargeNumbers)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression intDoubleConstants)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression doubleDoubleConstants)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression doubleIntConstants)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testBaseAndExponentConstantLiterals ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression intIntConstantsSmallNumbers) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 74088))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: intIntConstantsSmallNumbers() should be 74088, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression intIntConstantsLargeNumbers) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1.5013093754529656e+68))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: intIntConstantsLargeNumbers() should be 1.5013093754529656e+68, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression intDoubleConstants) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 5.1338303882015765e+48))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: intDoubleConstants() should be 5.1338303882015765e+48, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression doubleDoubleConstants) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1.0944228729647829e+48))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: doubleDoubleConstants() should be 1.0944228729647829e+48, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression doubleIntConstants) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 5.989022735311158e+58))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: doubleIntConstants() should be 5.989022735311158e+58, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBaseAndExponentConstantLiterals) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function exponentIsIntegerConstant ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsIntegerConstant)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsIntegerConstant ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsIntegerConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 4398046511104))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsIntegerConstant(2) should be 4398046511104, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsIntegerConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 2.2737367544323207e+29))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsIntegerConstant(5) should be 2.2737367544323207e+29, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsIntegerConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2.1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 34135823067412.42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsIntegerConstant(2.1) should be 34135823067412.42, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsIntegerConstant) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function exponentIsDoubleConstant ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 42.5)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsDoubleConstant)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsDoubleConstant ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsDoubleConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 6219777023950.95))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsDoubleConstant(2) should be 6219777023950.95, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsDoubleConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 5.084229945850415e+29))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsDoubleConstant(5) should be 5.084229945850415e+29, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsDoubleConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2.1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 49467507261113.805))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsDoubleConstant(2.1) should be 49467507261113.805, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsDoubleConstant) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function exponentIsInfinityConstant ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression Infinity)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsInfinityConstant)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsInfinityConstant ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsInfinityConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsInfinityConstant(2) should be Infinity, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsInfinityConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsInfinityConstant(5) should be Infinity, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsInfinityConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2.1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsInfinityConstant(2.1) should be Infinity, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsInfinityConstant) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function exponentIsNegativeInfinityConstant ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsNegativeInfinityConstant)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsNegativeInfinityConstant ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsNegativeInfinityConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsNegativeInfinityConstant(2) should be zero, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsNegativeInfinityConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsNegativeInfinityConstant(5) should be zero, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsNegativeInfinityConstant) (arguments ( (argument (singleExpression (literal (numericLiteral 2.1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsNegativeInfinityConstant(2.1) should be zero, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsNegativeInfinityConstant) (arguments ( )))) (eos ;))))) <EOF>)