(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression msg)) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) eos))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression hadError)) , (argument (singleExpression (literal "Did not throw"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression shouldThrow)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable str))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression hadError)) , (argument (singleExpression (literal "Did not throw syntax error"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression shouldThrowSyntaxError)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldThrowTDZ ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hasThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName name)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "ReferenceError"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hasThrown) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression hasThrown)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression shouldThrowTDZ)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function basic ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y) = (singleExpression x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression x))) , (argument (singleExpression (literal "basics don't work."))) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basic) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basic) (arguments ( (argument (singleExpression (literal "hello"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basic) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 20)))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basic) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable scopeVariable) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal "world"))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function basicScope ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression scopeVariable))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression scopeVariable))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basicScope) (arguments ( )))) (eos ;)))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function basicFunctionCaptureInDefault ( (formalParameterList (formalParameterArg (assignable theArg) = (singleExpression (literal (numericLiteral 20)))) , (formalParameterArg (assignable y) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression theArg)) eos))))) })))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression theArg) === (singleExpression (singleExpression y) (arguments ( ))))) , (argument (singleExpression (literal "y should return x."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression theArg) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression theArg) === (singleExpression (singleExpression y) (arguments ( ))))) , (argument (singleExpression (literal "y should return x."))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basicFunctionCaptureInDefault) (arguments ( )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basicFunctionCaptureInDefault) (arguments ( (argument (singleExpression undefined)) )))) eos))) (sourceElement (statement (functionDeclaration function basicCaptured ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 20)))) , (formalParameterArg (assignable y) = (singleExpression x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression y))) , (argument (singleExpression (literal "y should equal x"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mutate ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal "mutation")))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression mutate) (arguments ( )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) !== (singleExpression y))) , (argument (singleExpression (literal "y should not equal x"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basicCaptured) (arguments ( )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression basicCaptured) (arguments ( (argument (singleExpression undefined)) )))) eos))) (sourceElement (statement (functionDeclaration function tricky ( (formalParameterList (formalParameterArg (assignable globalX) = (singleExpression ( (expressionSequence (singleExpression (singleExpression globalX) = (singleExpression (literal "x")))) ))) , (formalParameterArg (assignable y) = (singleExpression ( (expressionSequence (singleExpression (singleExpression globalX) = (singleExpression (literal (numericLiteral 20))))) )))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression globalX) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression globalX) === (singleExpression y))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression tricky)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strict ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y) = (singleExpression x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression y))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression strict) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression strict) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function playground ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal "foo"))) , (formalParameterArg (assignable y) = (singleExpression (literal "bar")))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (singleExpression x)) , (propertyAssignment (singleExpression y)) }))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( ))) . (identifierName x)) === (singleExpression (literal "foo")))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName x)) === (singleExpression (literal "foo")))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 20)))) ))) . (identifierName x)) === (singleExpression (literal "foo")))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression (literal null))) ))) . (identifierName x)) === (singleExpression (literal null)))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( ))) . (identifierName y)) === (singleExpression (literal "bar")))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression undefined)) ))) . (identifierName y)) === (singleExpression (literal "bar")))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression undefined)) ))) . (identifierName y)) === (singleExpression (literal "bar")))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression (literal "bar"))) ))) . (identifierName x)) === (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression undefined)) ))) . (identifierName y)))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) ))) . (identifierName x)) === (singleExpression (literal (numericLiteral 10))))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 20)))) ))) . (identifierName y)) === (singleExpression (literal (numericLiteral 20))))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression playground) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal null))) ))) . (identifierName y)) === (singleExpression (literal null)))) )))) eos))) (sourceElement (statement (functionDeclaration function scoping ( (formalParameterList (formalParameterArg (assignable f) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression local)) (eos ;)))))) })))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression f)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable local) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression f)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression scoping) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function augmentsArguments1 ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 20))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 15))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 15))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 10))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augmentsArguments1) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function augmentsArguments2 ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 20))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 10))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 15))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 15))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 10))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function augment ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 40))))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augment) (arguments ( )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 10))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augmentsArguments2) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function augmentsArguments3 ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 10))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 10))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression undefined))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression undefined))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augmentsArguments3) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function augmentsArguments4 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function inner ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 10))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 10))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression undefined))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression undefined))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inner) (arguments ( (argument (singleExpression x)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augmentsArguments4) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augmentsArguments4) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function augmentsArguments5 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function inner ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 10))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inner) (arguments ( (argument (singleExpression x)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression augmentsArguments5) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable outer) = (singleExpression (literal "outer")))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression outer)) , (formalParameterArg (assignable b) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) , (formalParameterArg (assignable c) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression v))) (eos ;)))))) })))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a) === (singleExpression (literal "outer")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) (arguments ( ))) === (singleExpression (literal "outer")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (arguments ( (argument (singleExpression (literal "hello"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) (arguments ( ))) === (singleExpression (literal "hello")))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression outer)) , (formalParameterArg (assignable b) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) , (formalParameterArg (assignable c) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression v))) (eos ;)))))) })))) ) { (functionBody (sourceElements (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression (objectLiteral { }))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a) === (singleExpression (literal "outer")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) (arguments ( ))) === (singleExpression (literal "outer")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (arguments ( (argument (singleExpression (literal "hello"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) (arguments ( ))) === (singleExpression (literal "hello")))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) }))) , (formalParameterArg (assignable y) = (singleExpression (literal "y")))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression x) (arguments ( ))) === (singleExpression (literal "y")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression x) (arguments ( ))) === (singleExpression y))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression y))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function jaz ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) }))) , (formalParameterArg (assignable y) = (singleExpression (literal "y")))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function taz ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable y) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x + 1"))) ))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 11))))) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression jaz) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 20)))) ))) (arguments ( ))) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression jaz) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression undefined)) ))) (arguments ( ))) === (singleExpression (literal "y")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression jaz) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal "x"))) }))) ))) (arguments ( ))) . (identifierName x)) === (singleExpression (literal "x")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression taz) (arguments ( )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function named1 ( (formalParameterList (formalParameterArg (assignable a))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named2 ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named3 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named4 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named5 ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named6 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named7 ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named8 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named9 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named10 ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named11 ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function named12 ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named1) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named2) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named3) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named4) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named5) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named6) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named7) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named8) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named9) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named10) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named11) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression named12) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) ) { functionBody }))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (setter set (propertyName (identifierName setter))) ( (formalParameterArg (assignable a)) ) { functionBody }) }))) , (argument (singleExpression (literal "setter"))) ))) . (identifierName set)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (setter set (propertyName (identifierName setter))) ( (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) ) { functionBody }) }))) , (argument (singleExpression (literal "setter"))) ))) . (identifierName set)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment * (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) ) { functionBody }) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b) = (singleExpression (literal (numericLiteral 1)))) , (formalParameterArg (assignable c))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 1))))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 1)))) , (lastFormalParameterArg ... (singleExpression b))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { (classElement static (methodDefinition (propertyName (identifierName method)) ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c) = (singleExpression (literal (numericLiteral 20)))) , (lastFormalParameterArg ... (singleExpression r))) ) { functionBody })) }))) )) . (identifierName method)) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function basicError ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression y)) , (formalParameterArg (assignable y))) ) { functionBody }))) (sourceElement (statement (functionDeclaration function basicError2 ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression x))) ) { functionBody }))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable z) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName p)) : (singleExpression x)) }))) , (formalParameterArg (assignable x) = (singleExpression z))) ) { functionBody }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName p)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression x))) ]))) })))) ) { functionBody }))) (sourceElement (statement (functionDeclaration function jaz ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "y"))) )))) , (formalParameterArg (assignable y))) ) { functionBody }))) (sourceElement (statement (functionDeclaration function kaz ( (formalParameterList (formalParameterArg (assignable x) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal ";(function() { return y})();"))) )))) , (formalParameterArg (assignable y))) ) { functionBody }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression basicError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression basicError2)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression baz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression jaz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression kaz)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) , (formalParameterArg (assignable (objectLiteral { (propertyAssignment (singleExpression b)) })))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression a) (arguments ( ))) === (singleExpression (literal (numericLiteral 34))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 34))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression a) (arguments ( ))) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression x))) (eos ;)))))) }))) , (formalParameterArg (assignable (objectLiteral { (propertyAssignment (singleExpression b)) })))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 34))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) (arguments ( (argument (singleExpression (literal (numericLiteral 50)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable f1) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression x))) (eos ;)))))) }))) , (formalParameterArg (assignable f2) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) , (formalParameterArg (assignable (objectLiteral { (propertyAssignment (singleExpression b)) })))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 34))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f2) (arguments ( ))) === (singleExpression (literal (numericLiteral 34))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f1) (arguments ( (argument (singleExpression (literal (numericLiteral 50)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression b) === (singleExpression (literal (numericLiteral 34))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f2) (arguments ( ))) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 34)))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 34)))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression undefined)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 34)))) }))) )))) (eos ;)))) })))) } ) ( ) ; shouldThrowSyntaxError ( "function b(a = 20, a = 40) {}" ) ; shouldThrowSyntaxError ( "function b(aaaaa = 20,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v, aaaaa = 40) {}" ) ; shouldThrowSyntaxError ( "function b(a = 20, {a}) {}" ) ; shouldThrowSyntaxError ( "function b(a = 20, a) {}" ) ; shouldThrowSyntaxError ( "function b(a, a = 20) {}" ) ; shouldThrowSyntaxError ( "function b(a, a, b = 20) {}" ) ; shouldThrowSyntaxError ( "function b({a, a} = 20) {}" ) ; shouldThrowSyntaxError ( "function b({a, a} = 20) {}" ) ;)