(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedException) = (singleExpression (literal "RangeError: Maximum call stack size exceeded.")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actualException) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { functionBody }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 5000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (singleExpression (singleExpression foo) . (identifierName bind)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression foo)) , (argument (singleExpression (literal "name"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal "bar"))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) }))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "x"))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actualException) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression actualException))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Expected \"")) + (singleExpression expectedException)) + (singleExpression (literal "\" exception, but no exceptoion was thrown")))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actualException) != (singleExpression expectedException))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected \"")) + (singleExpression expectedException)) + (singleExpression (literal "\", but got \""))) + (singleExpression actualException)) + (singleExpression (literal "\"")))) (eos ;))))))))) <EOF>)