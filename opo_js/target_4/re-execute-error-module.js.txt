(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable abort) = (singleExpression (singleExpression $vm) . (identifierName abort)))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: ${String(actual)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction async function ( ) { (functionBody (sourceElements (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorMessage) = (singleExpression (literal null)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression import ( (singleExpression (literal "./resources/error-module.js")) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorMessage) = (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression errorMessage)) , (argument (singleExpression (literal `SyntaxError: Importing binding name 'x' is not found.`))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorMessage) = (singleExpression (literal null)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression import ( (singleExpression (literal "./resources/error-module.js")) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorMessage) = (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression errorMessage)) , (argument (singleExpression (literal `SyntaxError: Importing binding name 'x' is not found.`))) )))) (eos ;)))) }))))) })) (arguments ( )))) )) . (identifierName (reservedWord (keyword catch)))) (arguments ( (argument (singleExpression abort)) )))) (eos ;))))) <EOF>)