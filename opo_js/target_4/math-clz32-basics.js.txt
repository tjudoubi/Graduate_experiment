(program (sourceElements (sourceElement (statement (functionDeclaration function mathClz32OnInteger ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathClz32OnInteger)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testMathClz32OnIntegers ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzZero) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzZero) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(0) = ")) + (singleExpression clzZero))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzIntMin) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzIntMin) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(-2147483648) = ")) + (singleExpression clzIntMin))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzIntMax) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 2147483647)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzIntMax) != (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(2147483647) = ")) + (singleExpression clzIntMax))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzMinusOne) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzMinusOne) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(-1) = ")) + (singleExpression clzMinusOne))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzUltimateAnswer) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzUltimateAnswer) != (singleExpression (literal (numericLiteral 26))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(42) = ")) + (singleExpression clzUltimateAnswer))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzMinusUltimateAnswer) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 42))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzMinusUltimateAnswer) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(-42) = ")) + (singleExpression clzMinusUltimateAnswer))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testMathClz32OnIntegers)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testMathClz32OnIntegers) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function verifyMathClz32OnIntegerWithOtherTypes ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzPi) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzPi) != (singleExpression (literal (numericLiteral 30))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(Math.PI) = ")) + (singleExpression clzPi))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzString) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression (literal "42"))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzString) != (singleExpression (literal (numericLiteral 26))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(\"42\") = ")) + (singleExpression clzString))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzString) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression (literal "WebKit"))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzString) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(\"WebKit\") = ")) + (singleExpression clzString))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzMinusZero) = (singleExpression (singleExpression mathClz32OnInteger) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzMinusZero) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnInteger(-0) = ")) + (singleExpression clzMinusZero))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression verifyMathClz32OnIntegerWithOtherTypes)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression verifyMathClz32OnIntegerWithOtherTypes) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function mathClz32OnDouble ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathClz32OnDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testMathClz32OnDoubles ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 30))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(Math.PI) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName E))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 30))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(Math.E) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(Math.LN2) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(-0) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(NaN) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(Number.POSITIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(Number.NEGATIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testMathClz32OnDoubles)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testMathClz32OnDoubles) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function verifyMathClz32OnDoublesWithOtherTypes ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzOne) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzOne) != (singleExpression (literal (numericLiteral 31))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(1) = ")) + (singleExpression clzOne))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzString) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (literal "42"))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzString) != (singleExpression (literal (numericLiteral 26))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(\"42\") = ")) + (singleExpression clzString))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzString) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (literal "WebKit"))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzString) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble(\"WebKit\") = ")) + (singleExpression clzString))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clzMinusZero) = (singleExpression (singleExpression mathClz32OnDouble) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression clzMinusZero) != (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32OnDouble({}) = ")) + (singleExpression clzMinusZero))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression verifyMathClz32OnDoublesWithOtherTypes)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression verifyMathClz32OnDoublesWithOtherTypes) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function mathClz32NoArguments ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathClz32NoArguments)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathClz32TooManyArguments ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) , (argument (singleExpression c)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathClz32TooManyArguments)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32NoArguments) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32NoArguments() = ")) + (singleExpression value))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32TooManyArguments) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 30))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32TooManyArguments() = ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function testMathClz32OnConstants ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(0) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(-0) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 31))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(1) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(-1) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 26))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(42) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 42))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(-42) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(NaN) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(Number.POSITIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(Number.NEGATIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName E))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 30))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.clz32(Math.E) = ")) + (singleExpression value))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testMathClz32OnConstants)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testMathClz32OnConstants) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function mathClz32StructTransition ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathClz32StructTransition)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32StructTransition) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 26))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32StructTransition(42) = ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName clz32)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal (numericLiteral 5))))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathClz32StructTransition) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 47))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathClz32StructTransition(42) after transition = ")) + (singleExpression value))) (eos ;))))))) <EOF>)