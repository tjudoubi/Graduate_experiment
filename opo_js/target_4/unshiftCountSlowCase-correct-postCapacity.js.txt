(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression temp) (arguments ( (argument (singleExpression i)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a1) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { })))) ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo1)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo2)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo3)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo4)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo5)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo6)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo8)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo10)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a1) . (identifierName foo11)) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression a1) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression args) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 15))))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal 'foo'))) , (arrayElement (singleExpression (literal (numericLiteral 20)))) , (arrayElement (singleExpression (literal 'bar')))) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression i))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression j))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName push)) (arguments ( (argument (singleExpression j)) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 31)))) - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName splice)) . (identifierName apply)) (arguments ( (argument (singleExpression a1)) , (argument (singleExpression args)) )))) (eos ;)))) }))) }) (catchProduction catch ( (assignable e) ) (block { }))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 62))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression temp) (arguments ( (argument (singleExpression i)) )))) (eos ;))))) <EOF>)