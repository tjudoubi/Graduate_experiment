(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))) )))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable symbol) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression symbol)) ]) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (literal 'Cappuccino'))) ]) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression object)) )))) , (argument (singleExpression (literal '{"Cappuccino":42}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) ))))) ]))) )))) , (argument (singleExpression (literal "{}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cocoa)) : (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))) , (propertyAssignment (propertyName (identifierName cappuccino)) : (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cappuccino'))) )))) }))) )))) , (argument (singleExpression (literal '{}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cocoa)) : (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))) , (propertyAssignment (propertyName (identifierName cappuccino)) : (singleExpression (literal 'cappuccino'))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Matcha'))) ))) ]) : (singleExpression (literal 'matcha'))) }))) )))) , (argument (singleExpression (literal '{"cappuccino":"cappuccino"}'))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (singleExpression Symbol) (arguments ( )))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (singleExpression Symbol) (arguments ( )))) ]) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression object)) )))) , (argument (singleExpression (literal '{}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) ))))) ]))) )))) , (argument (singleExpression (literal '[null]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "hello"))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))) , (arrayElement (singleExpression (literal 'world')))) ]))) )))) , (argument (singleExpression (literal '["hello",null,"world"]'))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression Symbol) (arguments ( ))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal '[null]'))) )))) (eos ;))))) <EOF>)