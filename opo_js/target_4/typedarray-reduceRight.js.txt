(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./resources/typedarray-test-helper-functions.js"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression description) (arguments ( (argument (singleExpression (literal "This test checks the behavior of the TypedArray.prototype.reduceRight function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.prototype.reduceRight.length"))) , (argument (singleExpression (literal "1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.prototype.reduceRight.name"))) , (argument (singleExpression (literal "'reduceRight'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "isSameFunctionForEachTypedArrayPrototype('reduceRight')"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeReceivesArray('reduceRight', [undefined, this, { }, [ ], true, ''])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "testPrototypeFunction has the following arg list (name, args, init, result [ , expectedArray ])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "1.0 Single Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function createArray ( (formalParameterList (formalParameterArg (assignable acc)) , (formalParameterArg (assignable e)) , (formalParameterArg (assignable i)) , (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression acc)) !== (singleExpression (literal "object")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression acc) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression acc))) ])))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression acc) . (identifierName push)) (arguments ( (argument (singleExpression e)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression acc)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function sum ( (formalParameterList (formalParameterArg (assignable acc)) , (formalParameterArg (assignable e)) , (formalParameterArg (assignable i)) , (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression acc) + (singleExpression e))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(createArray)', [12, 5, 8, 13, 44], [12, 5, 8, 13, 44].reverse(), [12, 5, 8, 13, 44])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(sum)', [1, 2, 3, 4, 5], 15)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "2.0 Two Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(createArray, [1])', [12, 23, 11, 1, 45], [1, 45, 1, 11, 23, 12], [12, 23, 11, 1, 45])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "3.0 Array Element Changing"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function createArrayAndChange ( (formalParameterList (formalParameterArg (assignable acc)) , (formalParameterArg (assignable e)) , (formalParameterArg (assignable i)) , (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression a) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))) - (singleExpression i))) ]) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression acc) . (identifierName push)) (arguments ( (argument (singleExpression e)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression acc)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(createArrayAndChange, [])', [12, 15, 2, 13, 44], [44, 13, 2, 5, 5], [5, 5, 5, 5, 5])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "4.0 Exception Test"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function isBigEnoughAndException ( (formalParameterList (formalParameterArg (assignable acc)) , (formalParameterArg (assignable element)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) == (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "exception from function"))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression element) >= (singleExpression (literal (numericLiteral 10))))) ))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(isBigEnoughAndException)', [12, 15, 10, 13, 44], false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "5.0 Wrong Type for Callback Test"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(8)', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.reduceRight callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(\"wrong\")', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.reduceRight callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(new Object())', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.reduceRight callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(null)', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.reduceRight callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '()', [12, 15, 10, 13, 44], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.reduceRight callback must be a function'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('reduceRight', '(new Function())', [], false)"))) , (argument (singleExpression (literal "'TypeError: TypedArray.prototype.reduceRight of empty array with no initial value'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression finishJSTest) (arguments ( )))) (eos ;))))) <EOF>)