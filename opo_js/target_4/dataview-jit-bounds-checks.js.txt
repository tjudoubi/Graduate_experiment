(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable m) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad: ")) + (singleExpression m))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable getOps) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName getUint8)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName getUint16)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName getUint32)) : (singleExpression (literal (numericLiteral 4)))) , (propertyAssignment (propertyName (identifierName getInt8)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName getInt16)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName getInt32)) : (singleExpression (literal (numericLiteral 4)))) , (propertyAssignment (propertyName (identifierName getFloat32)) : (singleExpression (literal (numericLiteral 4)))) , (propertyAssignment (propertyName (identifierName getFloat64)) : (singleExpression (literal (numericLiteral 8)))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable setOps) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName setUint8)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName setUint16)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName setUint32)) : (singleExpression (literal (numericLiteral 4)))) , (propertyAssignment (propertyName (identifierName setInt8)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName setInt16)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName setInt32)) : (singleExpression (literal (numericLiteral 4)))) , (propertyAssignment (propertyName (identifierName setFloat32)) : (singleExpression (literal (numericLiteral 4)))) , (propertyAssignment (propertyName (identifierName setFloat64)) : (singleExpression (literal (numericLiteral 8)))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable getFuncs) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable p))) of (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName keys)) (arguments ( (argument (singleExpression getOps)) )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable endOfCall) = (singleExpression (singleExpression (singleExpression (singleExpression getOps) [ (expressionSequence (singleExpression p)) ]) === (singleExpression (literal (numericLiteral 1)))) ? (singleExpression (literal ");")) : (singleExpression (literal ", true);"))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable str) = (singleExpression (literal `        (function ${p}(dv, index) {            return dv.${p}(index${endOfCall}        })    `)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable func) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression func)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression getFuncs) . (identifierName push)) (arguments ( (argument (singleExpression func)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable setFuncs) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable p))) of (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName keys)) (arguments ( (argument (singleExpression setOps)) )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable endOfCall) = (singleExpression (singleExpression (singleExpression (singleExpression setOps) [ (expressionSequence (singleExpression p)) ]) === (singleExpression (literal (numericLiteral 1)))) ? (singleExpression (literal ");")) : (singleExpression (literal ", true);"))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable str) = (singleExpression (literal `        (function ${p}(dv, index, value) {            return dv.${p}(index, value${endOfCall}        })    `)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable func) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression func)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression setFuncs) . (identifierName push)) (arguments ( (argument (singleExpression func)) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function assertThrowsRangeError ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable e) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable err) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) = (singleExpression err))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression RangeError))) , (argument (singleExpression e)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable warmup))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable size) = (singleExpression (singleExpression (literal (numericLiteral 16))) * (singleExpression (literal (numericLiteral 1024)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable ab) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression size)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression ab)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression warmup))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression getFuncs)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) })))) (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression setFuncs)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression getFuncs)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowsRangeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression (singleExpression (singleExpression size) - (singleExpression (singleExpression getOps) [ (expressionSequence (singleExpression (singleExpression f) . (identifierName name))) ])) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression index)) )))) (eos ;)))))) })))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowsRangeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression index)) )))) (eos ;)))))) })))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowsRangeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression - (singleExpression (literal (numericLiteral 2147483648)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression index)) )))) (eos ;)))))) })))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression setFuncs)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowsRangeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression (singleExpression (singleExpression size) - (singleExpression (singleExpression setOps) [ (expressionSequence (singleExpression (singleExpression f) . (identifierName name))) ])) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression index)) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))))) })))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowsRangeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression index)) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))))) })))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowsRangeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression - (singleExpression (literal (numericLiteral 2147483648)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression index)) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))))) })))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 2000)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 10000)))) )))) (eos ;))))) <EOF>)