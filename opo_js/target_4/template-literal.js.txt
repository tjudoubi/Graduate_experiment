(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad value: ")) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testEval ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testEmbedded ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable template) = (singleExpression (literal `Hello ${value} World`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression template)) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal ``))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `${""}`))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (literal `${`)) `}`)) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal `${`)) `}${`) `}${`) `}${""}`)) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello World`))) , (argument (singleExpression (literal "Hello World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello        World`))) , (argument (singleExpression (literal "Hello\n        World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\uFEFF`))) , (argument (singleExpression (literal "\uFEFF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEval) (arguments ( (argument (singleExpression (literal "`\uFEFF`"))) , (argument (singleExpression (literal "\uFEFF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\x20`))) , (argument (singleExpression (literal "\x20"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\x2020`))) , (argument (singleExpression (literal "\x2020"))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable ch))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '\''))) , (arrayElement (singleExpression (literal '"'))) , (arrayElement (singleExpression (literal '\\'))) , (arrayElement (singleExpression (literal 'b'))) , (arrayElement (singleExpression (literal 'f'))) , (arrayElement (singleExpression (literal 'n'))) , (arrayElement (singleExpression (literal 'r'))) , (arrayElement (singleExpression (literal 't'))) , (arrayElement (singleExpression (literal 'v')))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEval) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "`\\")) + (singleExpression ch)) + (singleExpression (literal "`")))) , (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "'\\")) + (singleExpression ch)) + (singleExpression (literal "'")))) )))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\Hello World`))) , (argument (singleExpression (literal "Hello World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\Hello World`))) , (argument (singleExpression (literal "\nHello World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\u2028\u2029\r\n`))) , (argument (singleExpression (literal "\u2028\u2029\r\n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\u2028\u2029\n\r\n`))) , (argument (singleExpression (literal "\u2028\u2029\n\r\n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `\u2028200`))) , (argument (singleExpression (literal "\u2028200"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmbedded) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal "Hello 42 World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmbedded) (arguments ( (argument (singleExpression (literal "ISUCA"))) , (argument (singleExpression (literal "Hello ISUCA World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmbedded) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal "Hello null World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmbedded) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal "Hello undefined World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testEmbedded) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal "Hello [object Object] World"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "Cocoa"))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cappuccino")))) ])))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello ${object.name} and ${array[0]} :D`))) , (argument (singleExpression (literal "Hello Cocoa and Cappuccino :D"))) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function ok ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "Cocoa"))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello ${ ok() }`))) , (argument (singleExpression (literal "Hello Cocoa"))) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'Cocoa'))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal `Hello ${object} :D`))) , (argument (singleExpression (literal "Hello Cocoa :D"))) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;))))) <EOF>)