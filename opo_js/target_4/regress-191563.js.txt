(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable str)) , (formalParameterArg (assignable count))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression str) . (identifierName length)) < (singleExpression count))) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) (assignmentOperator +=) (singleExpression str))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression str) . (identifierName substring)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal "1"))) , (argument (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression (literal (numericLiteral 20))))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal "$1"))) , (argument (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression (literal (numericLiteral 16))))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable __v_6623) = (singleExpression (singleExpression (singleExpression x) . (identifierName replace)) (arguments ( (argument (singleExpression (literal /(.+)/g))) , (argument (singleExpression y)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;))))))) <EOF>)