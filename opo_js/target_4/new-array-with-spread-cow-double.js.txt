(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeArray ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression actual) . (identifierName length))) , (argument (singleExpression (singleExpression expected) . (identifierName length))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression expected) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression actual) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression actual)) )))) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable flags))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0.1)))) , (arrayElement (singleExpression (literal (numericLiteral 0.2)))) , (arrayElement (singleExpression (literal (numericLiteral 0.3))))) ])))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression flags)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression OSRExit) (arguments ( )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cloned) = (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression array))) ])))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression cloned)) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal false))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0.1)))) , (arrayElement (singleExpression (literal (numericLiteral 0.2)))) , (arrayElement (singleExpression (literal (numericLiteral 0.3))))) ]))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal true))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0.1)))) , (arrayElement (singleExpression (literal (numericLiteral 0.2)))) , (arrayElement (singleExpression (literal (numericLiteral 0.3))))) ]))) )))) (eos ;))))) <EOF>)