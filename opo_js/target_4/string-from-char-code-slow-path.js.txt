(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testWithLength ( (formalParameterList (formalParameterArg (assignable length)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression length) >= (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression length))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression i) & (singleExpression (literal (numericLiteral 0xff)))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ]) = (singleExpression (literal (numericLiteral 0xffef))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) . (identifierName apply)) (arguments ( (argument (singleExpression String)) , (argument (singleExpression array)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) . (identifierName length))) , (argument (singleExpression length)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression length))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) === (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xffef)))) )))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression string) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (singleExpression i) & (singleExpression (literal (numericLiteral 0xff))))) )))) )))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1e4)))) , (argument (singleExpression (singleExpression (literal (numericLiteral 1e4))) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1e4)))) , (argument (singleExpression (literal (numericLiteral 1e3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithLength) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testWithLength) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) <EOF>)