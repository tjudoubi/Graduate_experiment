(program (sourceElements (sourceElement (statement (functionDeclaration function testArrayConcat ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (singleExpression (singleExpression (literal 'abc')) . (identifierName match)) (arguments ( (argument (singleExpression (literal /(a)(b)(c)/))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression array) . (identifierName concat)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expectedResult) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "abc"))) , (arrayElement (singleExpression (literal "a"))) , (arrayElement (singleExpression (literal "b"))) , (arrayElement (singleExpression (literal "c")))) ])))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName length)) != (singleExpression (literal (numericLiteral 4))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Runtime array length is incorrect"))) ))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression result) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (singleExpression expectedResult) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Runtime array concat result is incorrect"))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArrayConcat) (arguments ( )))) (eos ;))))) <EOF>)