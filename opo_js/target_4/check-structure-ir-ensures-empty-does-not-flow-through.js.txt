(program (sourceElements (sourceElement (statement (functionDeclaration function runNearStackLimit ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function t ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression t) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression t) (arguments ( )))) eos))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function f ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loc) = (singleExpression arg))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression loc) . (identifierName p)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arg) . (identifierName p)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runNearStackLimit) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression obj)) )))) (eos ;)))))) })))) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)