(program (sourceElements (sourceElement (statement (functionDeclaration function f2 ( (formalParameterList (lastFormalParameterArg ... (singleExpression a1))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a1)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function f3 ( (formalParameterList (lastFormalParameterArg ... (singleExpression a2))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression v1) = (singleExpression (singleExpression f2) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f2) (arguments ( (argument ... (singleExpression a2)) , (argument ... (singleExpression v1)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f3)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v3) = (singleExpression (singleExpression f3) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression Array) . (identifierName isArray)) (arguments ( (argument (singleExpression (singleExpression v3) [ (expressionSequence (singleExpression (singleExpression (singleExpression v3) . (identifierName length)) - (singleExpression (literal (numericLiteral 1))))) ])) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Should be an array'))) ))))) (eos ;)))))) })))) <EOF>)