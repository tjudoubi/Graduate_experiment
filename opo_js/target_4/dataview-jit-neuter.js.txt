(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function load ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName getUint8)) (arguments ( (argument (singleExpression i)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression load)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable ab) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable ta) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression ab)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ta) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 0xa070fa01))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression ab)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression load) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) ))) === (singleExpression (literal (numericLiteral 0x01))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression ab)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable e) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) }) (catchProduction catch ( (assignable err) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) = (singleExpression err))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression RangeError))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test2 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function load ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName getUint8)) (arguments ( (argument (singleExpression i)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression load)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable ab) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable ta) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression ab)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ta) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 0xa070fa01))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression ab)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression load) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) ))) === (singleExpression (literal (numericLiteral 0x01))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression ab)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable e) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) }) (catchProduction catch ( (assignable err) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) = (singleExpression err))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression RangeError))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test2) (arguments ( )))) (eos ;))))) <EOF>)