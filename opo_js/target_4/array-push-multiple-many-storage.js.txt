(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable val1)) , (formalParameterArg (assignable val2)) , (formalParameterArg (assignable val3)) , (formalParameterArg (assignable val4)) , (formalParameterArg (assignable val5)) , (formalParameterArg (assignable val6)) , (formalParameterArg (assignable val7)) , (formalParameterArg (assignable val8)) , (formalParameterArg (assignable val9)) , (formalParameterArg (assignable val10)) , (formalParameterArg (assignable val11)) , (formalParameterArg (assignable val12))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression val1)) , (argument (singleExpression val2)) , (argument (singleExpression val3)) , (argument (singleExpression val4)) , (argument (singleExpression val5)) , (argument (singleExpression val6)) , (argument (singleExpression val7)) , (argument (singleExpression val8)) , (argument (singleExpression val9)) , (argument (singleExpression val10)) , (argument (singleExpression val11)) , (argument (singleExpression val12)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable values) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "AB"))) , (arrayElement (singleExpression (literal "BC"))) , (arrayElement (singleExpression (literal "CD"))) , (arrayElement (singleExpression (literal "DE"))) , (arrayElement (singleExpression (literal "EF"))) , (arrayElement (singleExpression (literal "FG"))) , (arrayElement (singleExpression (literal "GH"))) , (arrayElement (singleExpression (literal "HI"))) , (arrayElement (singleExpression (literal "IJ"))) , (arrayElement (singleExpression (literal "JK"))) , (arrayElement (singleExpression (literal "KL"))) , (arrayElement (singleExpression (literal "LM")))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression values) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 12)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ensureArrayStorage) (arguments ( (argument (singleExpression array)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( (argument (singleExpression array)) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 6)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 7)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 8)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 9)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 10)))) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression (literal (numericLiteral 11)))) ])) )))) , (argument (singleExpression (literal (numericLiteral 12)))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression values) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression array) [ (expressionSequence (singleExpression j)) ])) , (argument (singleExpression (singleExpression values) [ (expressionSequence (singleExpression j)) ])) )))) (eos ;)))))) })))))) <EOF>)