(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) = (singleExpression (literal '')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (singleExpression let) z =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) < (singleExpression (literal (numericLiteral 30))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) = (singleExpression (singleExpression (singleExpression arr) . (identifierName join)) (arguments ( (argument (singleExpression str)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Failed"))) )))) (eos ;))))))) <EOF>)