(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assert) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error in assert. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but was "'))) + (singleExpression result)) + (singleExpression (literal '":'))) + (singleExpression message))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'first declaration'))) (eos ;)))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal '{ function f() { return "second declaration"; } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression typeof (singleExpression f))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal ' #1'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression f) (arguments ( )))) , (argument (singleExpression (literal 'second declaration'))) , (argument (singleExpression (literal ' #2'))) )))) (eos ;))))) <EOF>)