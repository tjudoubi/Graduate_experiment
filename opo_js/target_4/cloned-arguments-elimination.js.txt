(program (sourceElements (sourceElement (statement (functionDeclaration function testModifyLength ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testModifyLength)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testAddOtherProperty ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName foo)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testAddOtherProperty)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testAddOtherPropertyInBranch ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) % (singleExpression (literal (numericLiteral 2))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName foo)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testAddOtherPropertyInBranch)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testModifyLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "bad"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testAddOtherProperty) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "bad"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testAddOtherPropertyInBranch) (arguments ( (argument (singleExpression i)) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "bad"))) (eos ;)))))) })))))) <EOF>)