(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable primitives) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "string"))) , (arrayElement (singleExpression (literal (numericLiteral 6))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression undefined))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "symbol"))) )))) , (arrayElement (singleExpression undefined))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression undefined))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression undefined))) ])))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression primitive)) , (arrayElement (singleExpression expected))) ])))) of (expressionSequence (singleExpression primitives)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ret) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression primitive)) , (argument (singleExpression (literal 'length'))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression expected) === (singleExpression undefined))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ret) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value for ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression primitive)) )))) + (singleExpression (literal ": "))) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression ret)) ))))) ))))) (eos ;)))))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ret) . (identifierName value)) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value for ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression primitive)) )))) + (singleExpression (literal ": "))) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression ret)) ))))) ))))) (eos ;)))))))) }))))) (sourceElement (statement (functionDeclaration function canary ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName called)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName called)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "out"))) ))))) (eos ;)))))) }) }))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal "TypeError: null is not an object (evaluating 'Object.getOwnPropertyDescriptor(value, property)')")))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal "TypeError: undefined is not an object (evaluating 'Object.getOwnPropertyDescriptor(value, property)')")))) ])))) ])) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression value)) , (arrayElement (singleExpression message))) ])))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable property) = (singleExpression (singleExpression canary) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression value)) , (argument (singleExpression property)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) )))) (eos ;))))) <EOF>)