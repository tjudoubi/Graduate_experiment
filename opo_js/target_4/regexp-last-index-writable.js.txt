(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "not thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (functionDeclaration function regExpLastIndex ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) = (singleExpression (literal 'Hello')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName get)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) )))) , (argument (singleExpression (literal 'Hello'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName get)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) = (singleExpression (literal "Hello")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName get)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) )))) , (argument (singleExpression (literal 'Hello'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) }))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName get)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) = (singleExpression (literal 'NG')))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName get)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) . (identifierName lastIndex)) = (singleExpression (literal "NG")))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempted to assign to readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal 'NG'))) }))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal `TypeError: Attempting to change value of a readonly property.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName get)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'lastIndex'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) }))) (arguments ( )))) ))) (eos ;))))) <EOF>)