(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function verify ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression counter))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression i)) ]) != (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "strict mode verify() failed for item ")) + (singleExpression i)) + (singleExpression (literal ".")))) eos))))) }))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable counter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (singleExpression counter) ++))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (singleExpression counter) ++))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) }))) (sourceElement (statement (tryStatement try (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression counter) ++)) (eos ;)))) }) (catchProduction catch ( (assignable x) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression counter) ++))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))))) }))) )) (arguments ( (argument (singleExpression (singleExpression counter) ++)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression verify) (arguments ( )))) (eos ;)))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function verify ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression counter))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression i)) ]) != (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "non-strict mode verify() failed for item ")) + (singleExpression i)) + (singleExpression (literal ".")))) eos))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression results) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression counter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression counter) ++))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression counter) ++))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) }))) (sourceElement (statement (tryStatement try (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression counter) ++)) (eos ;)))) }) (catchProduction catch ( (assignable x) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression counter) ++))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))))) }))) )) (arguments ( (argument (singleExpression (singleExpression counter) ++)) )))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (singleExpression counter) ++)) }))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x"))) )))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression verify) (arguments ( )))) (eos ;)))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)