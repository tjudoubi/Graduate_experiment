(program (sourceElements (sourceElement (statement (functionDeclaration function stackTraceDescription ( (formalParameterList (formalParameterArg (assignable stackFrame))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression indexOfAt) = (singleExpression (singleExpression (singleExpression stackFrame) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal '@'))) ))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression indexOfLastSlash) = (singleExpression (singleExpression (singleExpression stackFrame) . (identifierName lastIndexOf)) (arguments ( (argument (singleExpression (literal '/'))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression indexOfLastSlash) == (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression indexOfLastSlash) = (singleExpression indexOfAt))) eos))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionName) = (singleExpression (singleExpression (singleExpression stackFrame) . (identifierName substring)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression indexOfAt)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fileName) = (singleExpression (singleExpression (singleExpression stackFrame) . (identifierName substring)) (arguments ( (argument (singleExpression (singleExpression indexOfLastSlash) + (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression functionName) + (singleExpression (literal " at "))) + (singleExpression fileName))) (eos ;)))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression j)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) --)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression j) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "No exception!"))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression frame) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression error) . (identifierName stack)) . (identifierName split)) (arguments ( (argument (singleExpression (literal "\n"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression description) = (singleExpression (singleExpression stackTraceDescription) (arguments ( (argument (singleExpression frame)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression description) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal ".js:18"))) ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Bad location: '")) + (singleExpression description)) + (singleExpression (literal "'")))) ))))) (eos ;))))))) <EOF>)