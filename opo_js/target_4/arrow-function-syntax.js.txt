(program (sourceElements (sourceElement (statement (functionDeclaration function checkSyntax ( (formalParameterList (formalParameterArg (assignable src))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression src)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Syntax Error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) + (singleExpression (literal "\n script: `"))) + (singleExpression src)) + (singleExpression (literal "`")))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function checkSyntaxError ( (formalParameterList (formalParameterArg (assignable src)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression src)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bError) = (singleExpression (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError)) && (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) === (singleExpression message)) || (singleExpression (singleExpression typeof (singleExpression message)) === (singleExpression (literal 'undefined'))))) ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression bError))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected syntax Error: ")) + (singleExpression message)) + (singleExpression (literal "\n in script: `"))) + (singleExpression src)) + (singleExpression (literal "`")))) ))))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal `()=>42`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal `()=>42`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal `()=>42//Hello`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal `()=>42//Hello`))) )))) (eos ;))))) <EOF>)