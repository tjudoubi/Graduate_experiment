(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) >= (singleExpression (literal (numericLiteral 2))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression x) + (singleExpression y))) )))) eos))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) >= (singleExpression (literal (numericLiteral 2))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) )))) eos))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 40)))) , (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Wrong result for foo, expected 42, got ")) + (singleExpression result))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 40)))) , (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Wrong result for bar, expected 42, got ")) + (singleExpression result))) )))) (eos ;)))))) })))))) <EOF>)