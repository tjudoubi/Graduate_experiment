(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function readHex ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable bytes))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function isLittleEndian ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable b) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression b)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt32)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x00112233)))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression dv) . (identifierName getUint8)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))) === (singleExpression (literal (numericLiteral 0x33))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable str) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (functionDeclaration function readByte ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable b) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression dv) . (identifierName getUint8)) (arguments ( (argument (singleExpression i)) ))) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (singleExpression (literal "0")) + (singleExpression b)))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) eos))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isLittleEndian) (arguments ( )))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression bytes))) ; (expressionSequence (singleExpression (singleExpression i) --)) ; ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) = (singleExpression (singleExpression str) + (singleExpression (singleExpression readByte) (arguments ( (argument (singleExpression i)) )))))) (eos ;)))))) })) else (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression bytes))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) = (singleExpression (singleExpression str) + (singleExpression (singleExpression readByte) (arguments ( (argument (singleExpression i)) )))))) (eos ;)))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "0x")) + (singleExpression str))) (eos ;)))))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable b) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression b)) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt32)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x00112233)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 4)))) ))) === (singleExpression (literal "0x00112233")))) )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function storeLittleEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt16)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeLittleEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeBigEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt16)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeBigEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable littleEndian))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt16)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression littleEndian)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Uint16Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfaba)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xfaba))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xabcd)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xabcd))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xbadbeef)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xbeef))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xbb4db33f)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xb33f))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfada)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xdafa))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x12ab)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xab12))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x1234)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x3412))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x0102)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x0201))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xfeff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xfeff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x0000))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x0000))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147478988))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x1234))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147478988))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x3412))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test2 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function storeLittleEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setUint16)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeLittleEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeBigEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setUint16)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeBigEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable littleEndian))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setUint16)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression littleEndian)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Uint16Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfaba)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xfaba))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xabcd)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xabcd))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xbadbeef)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xbeef))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xbb4db33f)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xb33f))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfada)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xdafa))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x12ab)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xab12))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x1234)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x3412))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x0102)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x0201))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xfeff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xfeff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x0000))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x0000))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147478988))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x1234))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2147478988))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x3412))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test2) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test3 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function storeLittleEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setUint32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeLittleEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeBigEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setUint32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeBigEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable littleEndian))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setUint32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression littleEndian)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr2) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xffffffff)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffffffff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xffaabbcc)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffaabbcc))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x12345678)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x78563412))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xffaabbcc)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xccbbaaff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfaeadaca)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xcadaeafa))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xcadaeafa)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 85271862)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x12345678)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x78563412))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xbeeffeeb)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 335614018)))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test3) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test4 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function storeLittleEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeLittleEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeBigEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeBigEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable littleEndian))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression littleEndian)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr2) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xffffffff)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffffffff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xffaabbcc)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xffaabbcc))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x12345678)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x78563412))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xffaabbcc)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xccbbaaff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfaeadaca)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xcadaeafa))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xcadaeafa)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 85271862)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x12345678)))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x78563412))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xbeeffeeb)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 335614018)))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test4) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test5 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function storeLittleEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setFloat32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeLittleEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeBigEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setFloat32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeBigEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable littleEndian))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setFloat32)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression littleEndian)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Float32Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable bits) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1.5)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 1.5))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 12912.124123215122)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 12912.1240234375))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bits) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x4649c07f))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression NaN)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 2.3879393e-38)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 2.387939260590663e-38))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bits) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x01020304))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 2.3879393e-38)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 1.539989614439558e-36))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bits) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0x04030201))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test5) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test6 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function storeLittleEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setFloat64)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeLittleEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function storeBigEndian ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setFloat64)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression storeBigEndian)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable littleEndian))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setFloat64)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) , (argument (singleExpression littleEndian)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 8)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Float64Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression NaN)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeLittleEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2.5075187084135162e+284))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 2.5075187084135162e+284)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0xfafafafafafafafa")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 124.553)))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0x405f23645a1cac08")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression Infinity)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0x7ff0000000000000")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression Infinity)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0x000000000000f07f")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression Infinity))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0xfff0000000000000")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2.5075187084135162e+284))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 2.5075187084135162e+284)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0xfafafafafafafafa")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeBigEndian) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 124.553)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression readHex) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 8)))) ))) === (singleExpression (literal "0x08ac1c5a64235f40")))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test6) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test7 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt8)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr2) = (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xff)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xff00)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x0badbeef)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xef))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 17)))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test7) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test8 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function store ( (formalParameterList (formalParameterArg (assignable dv)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dv) . (identifierName setInt8)) (arguments ( (argument (singleExpression index)) , (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression store)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr2) = (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xff)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xff00)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xff))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression store) (arguments ( (argument (singleExpression dv)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x0badbeef)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 0xef))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression - (singleExpression (literal (numericLiteral 17)))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test8) (arguments ( )))) (eos ;))))) <EOF>)