(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable InternalPromise) = (singleExpression (singleExpression (singleExpression (singleExpression $vm) . (identifierName createBuiltin)) (arguments ( (argument (singleExpression (literal `(function () {    return @InternalPromise;})`))) ))) (arguments ( ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function DerivedPromise ( ) { functionBody }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression InternalPromise)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable resolve))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resolve) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) })))) ]))) , (argument (singleExpression DerivedPromise)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression promise) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal `[object InternalPromise]`))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Promise)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable resolve))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resolve) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) })))) ]))) , (argument (singleExpression DerivedPromise)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression promise) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal `[object Promise]`))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression InternalPromise)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable resolve))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resolve) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) })))) ]))) , (argument (singleExpression DerivedPromise)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression promise) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal `[object InternalPromise]`))) )))) (eos ;)))) })))))) <EOF>)