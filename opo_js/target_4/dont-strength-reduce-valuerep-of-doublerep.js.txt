(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a2) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thingy) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 55))))) , (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression (arrayLiteral [ elementList ]))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody (singleExpression x)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName map))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) > (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 1000))))) )) === (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression thingy) . (identifierName map)) (arguments ( (argument (singleExpression func)) )))) eos)))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a2) . (identifierName map)) (arguments ( (argument (singleExpression func)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) })))) <EOF>)