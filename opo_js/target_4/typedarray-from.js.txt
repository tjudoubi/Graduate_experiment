(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./resources/typedarray-constructor-helper-functions.js"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression description) (arguments ( (argument (singleExpression (literal "This test checks the behavior of the TypedArray.from function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.from.length"))) , (argument (singleExpression (literal "1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.from.name"))) , (argument (singleExpression (literal "'from'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "testConstructorFunction has the following arg list (name, args, init, result [ , expectedArray ])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "1.0 Single Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([])', [])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([2])', [2])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([2,3,4])', [2,3,4])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "2.0 Two Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function even ( (formalParameterList (formalParameterArg (assignable e)) , (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) & (singleExpression (literal (numericLiteral 1))))) ))) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName change)) ? (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName change)) . (identifierName indexOf)) (arguments ( (argument (singleExpression i)) ))) >= (singleExpression (literal (numericLiteral 0)))) : (singleExpression (literal false)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([12, 5, 8, 13, 44], even)', [1, 0, 1, 0, 1])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([11, 54, 18, 13, 1], even)', [0, 1, 1, 0, 0])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "3.0 Three Argument Testing"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable thisValue) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName change)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([12, 23, 11, 1, 45], even, thisValue)', [1, 1, 0, 1, 0])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "4.0 Exception Test"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function isBigEnoughAndException ( (formalParameterList (formalParameterArg (assignable element)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) == (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "exception from function"))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression element) >= (singleExpression (literal (numericLiteral 10))))) ))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([12, 15, 10, 13, 44], isBigEnoughAndException)', false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "5.0 Wrong Type for Callback Test"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '( [12, 15, 10, 13, 44], 8)', false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([12, 15, 10, 13, 44], \"wrong\")', false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([12, 15, 10, 13, 44], new Object())', false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "testConstructorFunction('from', '([12, 15, 10, 13, 44], null)', false)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression finishJSTest) (arguments ( )))) (eos ;))))) <EOF>)