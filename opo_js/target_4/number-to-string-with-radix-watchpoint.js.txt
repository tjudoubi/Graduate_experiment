(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal '')))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 8)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 32)))) ))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal `1001211199`)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 1e3))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Number) . (identifierName prototype)) . (identifierName toString)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "Hello"))) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal `HelloHelloHelloHelloHello`)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( )))) , (argument (singleExpression result)) )))) (eos ;)))) })))))) <EOF>)