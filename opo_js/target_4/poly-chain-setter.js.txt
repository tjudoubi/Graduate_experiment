(program (sourceElements (sourceElement (statement (functionDeclaration function Cons ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Cons) . (identifierName prototype)) . (identifierName __defineSetter__)) (arguments ( (argument (singleExpression (literal "f"))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression counter) ++)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _f)) = (singleExpression value))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Cons) . (identifierName prototype)) . (identifierName __defineGetter__)) (arguments ( (argument (singleExpression (literal "f"))) , (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName _f))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName f)) = (singleExpression v))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) . (identifierName f))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable expectedCount))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o)) , (argument (singleExpression value)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad result: ")) + (singleExpression result))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression counter) != (singleExpression expectedCount))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad counter value: ")) + (singleExpression counter))) ))))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Cons) (arguments ( ))))) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression counter) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression new (singleExpression (singleExpression Cons) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName g)) = (singleExpression (literal (numericLiteral 54))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression o)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression counter) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) })))))) <EOF>)