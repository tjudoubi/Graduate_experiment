(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) eos))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))))))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) }))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) }))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable isDefault) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (literal 'foo'))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) })) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (breakStatement break (eos ;)))))) (defaultClause default : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isDefault) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (breakStatement break (eos ;))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression isDefault)) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable is1) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (literal (numericLiteral 1)))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression is1) = (singleExpression (literal true)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (breakStatement break (eos ;)))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression is1)) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "bar"))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable is2) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (literal (numericLiteral 2)))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (block { (statementList (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (breakStatement break (eos ;)))) })))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression is2) = (singleExpression (literal true)))) (eos ;))) (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;))) (statement (breakStatement break (eos ;)))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression is2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal "bar")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 25)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "bar"))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable capture) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression foo) + (singleExpression (literal ""))) + (singleExpression bar))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable is2) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (literal (numericLiteral 2)))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (block { (statementList (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (breakStatement break (eos ;)))) })))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression is2) = (singleExpression (literal true)))) (eos ;))) (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) })) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable capture) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression bar)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;))) (statement (breakStatement break (eos ;)))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression is2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression bar) (arguments ( ))) === (singleExpression (literal "bar")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) === (singleExpression (literal (numericLiteral 25))))) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable f1))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable f2) = (singleExpression foo))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { functionBody }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f1) = (singleExpression foo))) (eos ;))) (statement (functionDeclaration function foo ( ) { functionBody }))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression ! (singleExpression ! (singleExpression f1))) && (singleExpression ! (singleExpression ! (singleExpression f2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression f1) !== (singleExpression f2))) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;))) (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable f1))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable f2) = (singleExpression foo))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { functionBody }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable capture) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression foo)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f1) = (singleExpression foo))) (eos ;))) (statement (functionDeclaration function foo ( ) { functionBody })) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable capture) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression foo)))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression ! (singleExpression ! (singleExpression f1))) && (singleExpression ! (singleExpression ! (singleExpression f2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression f1) !== (singleExpression f2))) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))) })))) <EOF>)