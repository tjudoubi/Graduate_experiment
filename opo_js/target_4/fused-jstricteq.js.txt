(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: ${String(actual)} ${String(expected)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testJNSTRICTEQ ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) === (singleExpression b))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJNSTRICTEQ)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJSTRICTEQ ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression b))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJSTRICTEQ)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJNSTRICTEQB ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))) })) while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) === (singleExpression b))) )))) ) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJNSTRICTEQB)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJSTRICTEQB ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))) })) while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression b))) )))) ) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJSTRICTEQB)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJNSTRICTEQF ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) === (singleExpression b))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJNSTRICTEQF)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJSTRICTEQF ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression b))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJSTRICTEQF)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNSTRICTEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJSTRICTEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNSTRICTEQB) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJSTRICTEQB) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNSTRICTEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJSTRICTEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) })))))) <EOF>)