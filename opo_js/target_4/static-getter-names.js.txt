(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable names) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'global'))) , (arrayElement (singleExpression (literal 'ignoreCase'))) , (arrayElement (singleExpression (literal 'multiline'))) , (arrayElement (singleExpression (literal 'source'))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable name))) of (expressionSequence (singleExpression names)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable descriptor) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression RegExp) . (identifierName prototype))) , (argument (singleExpression name)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression descriptor) . (identifierName get)) . (identifierName name))) , (argument (singleExpression (singleExpression (literal 'get ')) + (singleExpression name))) )))) (eos ;)))) })))))) <EOF>)