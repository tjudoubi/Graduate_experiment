(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable abort) = (singleExpression (singleExpression $vm) . (identifierName abort)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable window))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable listeners) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable messages) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression window) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName addEventListener)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable type)) , (formalParameterArg (assignable listener))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression listeners) . (identifierName push)) (arguments ( (argument (singleExpression listener)) )))) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName postMessage)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression messages) . (identifierName push)) (arguments ( (argument (singleExpression message)) )))) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName _handleEvents)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression messages) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression listeners) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression listeners) [ (expressionSequence (singleExpression j)) ]) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName data)) : (singleExpression (singleExpression messages) [ (expressionSequence (singleExpression i)) ])) }))) )))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression messages) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))))) }))) })))) (eos ;)))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression window) . (identifierName jsTestIsAsync)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression window) . (identifierName testsComplete)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function testPassed ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function testFailed ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Test failed: ")) + (singleExpression string))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression e) . (identifierName message))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression e) . (identifierName stack))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression abort) (arguments ( )))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function classCompare ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable classString) = (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable gotClass) = (singleExpression (singleExpression (singleExpression classString) . (identifierName call)) (arguments ( (argument (singleExpression got)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sentClass) = (singleExpression (singleExpression (singleExpression classString) . (identifierName call)) (arguments ( (argument (singleExpression sent)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression gotClass) !== (singleExpression sentClass))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": class "))) + (singleExpression sentClass)) + (singleExpression (literal " became "))) + (singleExpression gotClass))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPassed) (arguments ( (argument (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": classes are "))) + (singleExpression sentClass))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function bufferCompare ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression classCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression got)) , (argument (singleExpression sent)) ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression got) . (identifierName byteLength)) !== (singleExpression (singleExpression sent) . (identifierName byteLength)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": expected byteLength "))) + (singleExpression (singleExpression sent) . (identifierName byteLength))) + (singleExpression (literal " bytes, got "))) + (singleExpression (singleExpression got) . (identifierName byteLength)))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPassed) (arguments ( (argument (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": buffer lengths are "))) + (singleExpression (singleExpression sent) . (identifierName byteLength)))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable gotReader) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression got)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sentReader) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression sent)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression sent) . (identifierName byteLength)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression gotReader) [ (expressionSequence (singleExpression i)) ]) !== (singleExpression (singleExpression sentReader) [ (expressionSequence (singleExpression i)) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": buffers differ starting at byte "))) + (singleExpression i))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPassed) (arguments ( (argument (singleExpression (singleExpression testName) + (singleExpression (literal ": buffers have the same contents")))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function viewCompare ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression classCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression got)) , (argument (singleExpression sent)) ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression bufferCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression (singleExpression got) . (identifierName buffer))) , (argument (singleExpression (singleExpression sent) . (identifierName buffer))) ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression got) . (identifierName byteOffset)) !== (singleExpression (singleExpression sent) . (identifierName byteOffset)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": offset "))) + (singleExpression (singleExpression sent) . (identifierName byteOffset))) + (singleExpression (literal " became "))) + (singleExpression (singleExpression got) . (identifierName byteOffset)))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPassed) (arguments ( (argument (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": offset is "))) + (singleExpression (singleExpression sent) . (identifierName byteOffset)))) )))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression got) . (identifierName byteLength)) !== (singleExpression (singleExpression sent) . (identifierName byteLength)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": length "))) + (singleExpression (singleExpression sent) . (identifierName byteLength))) + (singleExpression (literal " became "))) + (singleExpression (singleExpression got) . (identifierName byteLength)))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testPassed) (arguments ( (argument (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": length is "))) + (singleExpression (singleExpression sent) . (identifierName byteLength)))) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function typedArrayCompare ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression viewCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression got)) , (argument (singleExpression sent)) ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression got) . (identifierName BYTES_PER_ELEMENT)) !== (singleExpression (singleExpression sent) . (identifierName BYTES_PER_ELEMENT)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testName) + (singleExpression (literal ": expected BYTES_PER_ELEMENT "))) + (singleExpression (singleExpression sent) . (identifierName BYTES_PER_ELEMENT))) + (singleExpression (literal ", saw "))) + (singleExpression (singleExpression got) . (identifierName BYTES_PER_ELEMENT)))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function dataViewCompare ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression viewCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression got)) , (argument (singleExpression sent)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function dataViewCompare2 ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression dataViewCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression (singleExpression got) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression sent) [ (expressionSequence (singleExpression i)) ])) ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression got) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) . (identifierName buffer)) !== (singleExpression (singleExpression (singleExpression got) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) . (identifierName buffer)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression testName) + (singleExpression (literal ": expected the same ArrayBuffer for both views")))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function dataViewCompare3 ( (formalParameterList (formalParameterArg (assignable testName)) , (formalParameterArg (assignable got)) , (formalParameterArg (assignable sent))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 3))))) ; (expressionSequence (singleExpression (singleExpression i) (assignmentOperator +=) (singleExpression (literal (numericLiteral 2))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression dataViewCompare) (arguments ( (argument (singleExpression testName)) , (argument (singleExpression (singleExpression got) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression sent) [ (expressionSequence (singleExpression i)) ])) ))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression got) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) . (identifierName x)) !== (singleExpression (singleExpression (singleExpression sent) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) . (identifierName x))) || (singleExpression (singleExpression (singleExpression (singleExpression got) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) . (identifierName y)) !== (singleExpression (singleExpression (singleExpression sent) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) . (identifierName y))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression testName) + (singleExpression (literal ": {x:1, y:1} was not transferred properly")))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression got) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) . (identifierName buffer)) !== (singleExpression (singleExpression (singleExpression got) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) . (identifierName buffer)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression testName) + (singleExpression (literal ": expected the same ArrayBuffer for both views")))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function createBuffer ( (formalParameterList (formalParameterArg (assignable length))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression length)) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable view) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression length))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression view) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression buffer)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function createTypedArray ( (formalParameterList (formalParameterArg (assignable typedArrayType)) , (formalParameterArg (assignable length))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable view) = (singleExpression new (singleExpression (singleExpression typedArrayType) (arguments ( (argument (singleExpression length)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression length))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression view) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression view)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function createTypedArrayOverBuffer ( (formalParameterList (formalParameterArg (assignable typedArrayType)) , (formalParameterArg (assignable typedArrayElementSize)) , (formalParameterArg (assignable length)) , (formalParameterArg (assignable subStart)) , (formalParameterArg (assignable subLength))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (singleExpression length) * (singleExpression typedArrayElementSize))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression subStart) === (singleExpression undefined))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subStart) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subLength) = (singleExpression length))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression typedArrayType) (arguments ( (argument (singleExpression buffer)) , (argument (singleExpression (singleExpression subStart) * (singleExpression typedArrayElementSize))) , (argument (singleExpression subLength)) ))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable basicBufferTypes) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Int32"))) , (arrayElement (singleExpression Int32Array)) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Uint32"))) , (arrayElement (singleExpression Uint32Array)) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Int8"))) , (arrayElement (singleExpression Int8Array)) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Uint8"))) , (arrayElement (singleExpression Uint8Array)) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Uint8Clamped"))) , (arrayElement (singleExpression Uint8ClampedArray)) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Int16"))) , (arrayElement (singleExpression Int16Array)) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Uint16"))) , (arrayElement (singleExpression Uint16Array)) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Float32"))) , (arrayElement (singleExpression Float32Array)) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Float64"))) , (arrayElement (singleExpression Float64Array)) , (arrayElement (singleExpression (literal (numericLiteral 8))))) ])))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrayBuffer1) = (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testList) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'ArrayBuffer0'))) , (arrayElement (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) , (arrayElement (singleExpression bufferCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'ArrayBuffer1'))) , (arrayElement (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) , (arrayElement (singleExpression bufferCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'ArrayBuffer128'))) , (arrayElement (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) , (arrayElement (singleExpression bufferCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView0'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView1'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView1-dup'))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression arrayBuffer1)) ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression arrayBuffer1)) )))))) ]))) , (arrayElement (singleExpression dataViewCompare2))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView1-dup2'))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression arrayBuffer1)) ))))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 1)))) }))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression arrayBuffer1)) )))))) ]))) , (arrayElement (singleExpression dataViewCompare3))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView128'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView1_offset_at_end'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView128_offset_at_end'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) , (argument (singleExpression (literal (numericLiteral 128)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView128_offset_slice_length_0'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) , (argument (singleExpression (literal (numericLiteral 64)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView128_offset_slice_length_1'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) , (argument (singleExpression (literal (numericLiteral 64)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView128_offset_slice_length_16'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) , (argument (singleExpression (literal (numericLiteral 64)))) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) , (arrayElement (singleExpression dataViewCompare))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'DataView128_offset_slice_unaligned'))) , (arrayElement (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression (singleExpression createBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) )))) , (argument (singleExpression (literal (numericLiteral 63)))) , (argument (singleExpression (literal (numericLiteral 15)))) ))))) , (arrayElement (singleExpression dataViewCompare))) ])))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_0")))) , (arrayElement (singleExpression (singleExpression createTypedArray) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_1")))) , (arrayElement (singleExpression (singleExpression createTypedArray) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_128")))) , (arrayElement (singleExpression (singleExpression createTypedArray) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 128)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_0_buffer")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_1_buffer")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_128_buffer")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 128)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_1_buffer_offset_at_end")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_128_buffer_offset_at_end")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 128)))) , (argument (singleExpression (literal (numericLiteral 128)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_128_buffer_offset_slice_length_0")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 128)))) , (argument (singleExpression (literal (numericLiteral 64)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_128_buffer_offset_slice_length_1")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 128)))) , (argument (singleExpression (literal (numericLiteral 64)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testList) = (singleExpression (singleExpression (singleExpression testList) . (identifierName concat)) (arguments ( (argument (singleExpression (singleExpression (singleExpression basicBufferTypes) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal "_128_buffer_offset_slice_length_16")))) , (arrayElement (singleExpression (singleExpression createTypedArrayOverBuffer) (arguments ( (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (singleExpression t) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 128)))) , (argument (singleExpression (literal (numericLiteral 64)))) , (argument (singleExpression (literal (numericLiteral 16)))) )))) , (arrayElement (singleExpression typedArrayCompare))) ]))) (eos ;)))))) }))) )))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function doneTest ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ++ (singleExpression (singleExpression window) . (identifierName testsComplete))) == (singleExpression (singleExpression testList) . (identifierName length)))) ) (statement (block { }))))))) }))) (sourceElement (statement (functionDeclaration function windowHandleMessage ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable currentTest) = (singleExpression (singleExpression testList) [ (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName data)) . (identifierName testNum))) ]))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expectedResult) = (singleExpression (singleExpression currentTest) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression currentTest) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) (arguments ( (argument (singleExpression (singleExpression currentTest) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (singleExpression (singleExpression e) . (identifierName data)) . (identifierName testData))) , (argument (singleExpression expectedResult)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFailed) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression currentTest) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal ": unexpected exception "))) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression doneTest) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression window) . (identifierName addEventListener)) (arguments ( (argument (singleExpression (literal 'message'))) , (argument (singleExpression windowHandleMessage)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression t) < (singleExpression (singleExpression testList) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression t))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable currentTest) = (singleExpression (singleExpression testList) [ (expressionSequence (singleExpression t)) ]))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable message) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName testNum)) : (singleExpression t)) , (propertyAssignment (propertyName (identifierName testData)) : (singleExpression (singleExpression currentTest) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression window) . (identifierName postMessage)) (arguments ( (argument (singleExpression message)) , (argument (singleExpression (literal '*'))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression window) . (identifierName _handleEvents)) (arguments ( )))) (eos ;))))) <EOF>)