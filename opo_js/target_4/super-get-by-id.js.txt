(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable createCustomGetterObject) = (singleExpression (singleExpression $vm) . (identifierName createCustomGetterObject)))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Base) = (singleExpression class Base (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _name)) = (singleExpression (literal "Name")))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName name))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName _name))) (eos ;)))))) })) (classElement (methodDefinition (setter set (propertyName (identifierName name))) ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _name)) = (singleExpression x))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Subclass) = (singleExpression class Subclass (classTail extends (singleExpression Base) { (classElement (methodDefinition (getter get (propertyName (identifierName name))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName name))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function getterName ( (formalParameterList (formalParameterArg (assignable instance))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression instance) . (identifierName name))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getterName)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function getterValue ( (formalParameterList (formalParameterArg (assignable instance))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression instance) . (identifierName value))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getterValue)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable runTimes) = (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable instance) = (singleExpression new (singleExpression Subclass)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getterName) (arguments ( (argument (singleExpression instance)) ))) == (singleExpression (literal "Name")))) )))) (eos ;)))))) (sourceElement (statement (classDeclaration class PolymorphicSubclass (classTail { (classElement (methodDefinition (getter get (propertyName (identifierName value))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName value))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable numPolymorphicClasses) = (singleExpression (literal (numericLiteral 4))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable subclasses) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression numPolymorphicClasses)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numPolymorphicClasses))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable BaseCode) = (singleExpression (literal `        (class Base${i} {            get value() { return this._value; }        });    `)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable Base) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression BaseCode)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression i)) ]) = (singleExpression new (singleExpression (singleExpression PolymorphicSubclass) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression i)) ]) . (identifierName _value)) = (singleExpression i))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression Base) . (identifierName prototype))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression (singleExpression i) % (singleExpression numPolymorphicClasses)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable value) = (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression index)) ])) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression value) == (singleExpression index))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable nClasses) = (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (classDeclaration class MegamorphicSubclass (classTail { (classElement (methodDefinition (getter get (propertyName (identifierName value))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName value))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subclasses) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression nClasses)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression nClasses))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable BaseCode) = (singleExpression (literal `        (class Base${i + 4} {            get value() { return this._value; }        });    `)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable Base) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression BaseCode)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression i)) ]) = (singleExpression new (singleExpression (singleExpression MegamorphicSubclass) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression i)) ]) . (identifierName _value)) = (singleExpression i))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression Base) . (identifierName prototype))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable index) = (singleExpression (singleExpression i) % (singleExpression nClasses)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable value) = (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression (singleExpression subclasses) [ (expressionSequence (singleExpression index)) ])) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression value) == (singleExpression index))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable customGetter) = (singleExpression (singleExpression createCustomGetterObject) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression customGetter)) , (argument (singleExpression (singleExpression Object) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable subObj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression customGetter)) , (propertyAssignment (getter get (propertyName (identifierName value))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName customGetterAccessor))) (eos ;)))))) }) })))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable value) = (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression subObj)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression value) == (singleExpression (literal (numericLiteral 100))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subObj) . (identifierName shouldThrow)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression subObj)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) )))) (eos ;)))) })))) (statement (emptyStatement ;))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression customGetter) = (singleExpression (singleExpression createCustomGetterObject) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression customGetter)) , (argument (singleExpression (singleExpression Object) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subObj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression customGetter)) , (propertyAssignment (getter get (propertyName (identifierName value))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName customGetter))) (eos ;)))))) }) })))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable value) = (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression subObj)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression value) == (singleExpression (literal (numericLiteral 100))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subObj) . (identifierName shouldThrow)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable value) = (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression subObj)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression value) == (singleExpression (literal (numericLiteral 100))))) )))) (eos ;)))) }))))) (sourceElement (statement (classDeclaration class BaseException (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _name)) = (singleExpression (literal "Name")))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName name))) ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression this) . (identifierName shouldThrow))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Forced Exception"))) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName _name))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (classDeclaration class SubclassException (classTail extends (singleExpression BaseException) { (classElement (methodDefinition (getter get (propertyName (identifierName name))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName name))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable eObj) = (singleExpression new (singleExpression SubclassException)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getterName) (arguments ( (argument (singleExpression eObj)) ))) == (singleExpression (literal "Name")))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression eObj) . (identifierName shouldThrow)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getterValue) (arguments ( (argument (singleExpression eObj)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression eObj) . (identifierName shouldThrow)) = (singleExpression (literal false)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getterName) (arguments ( (argument (singleExpression eObj)) ))) == (singleExpression (literal "Name")))) )))) (eos ;)))) })))) (statement (emptyStatement ;))) }))))) (sourceElement (statement (classDeclaration class BaseExceptionComplex (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _name)) = (singleExpression (literal "Name")))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName foo)) ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression this) . (identifierName shouldThrow))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Forced Exception"))) ))))) (eos ;)))))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName name))) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName foo)) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName _name))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (classDeclaration class SubclassExceptionComplex (classTail extends (singleExpression BaseExceptionComplex) { (classElement (methodDefinition (getter get (propertyName (identifierName name))) ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName name))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName shouldThrow)) = (singleExpression (literal false)))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression super) . (identifierName name))) (eos ;)))) }))))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eObj) = (singleExpression new (singleExpression SubclassExceptionComplex)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getterName) (arguments ( (argument (singleExpression eObj)) ))) == (singleExpression (literal "Name")))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression eObj) . (identifierName shouldThrow)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression runTimes))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getterName) (arguments ( (argument (singleExpression eObj)) ))) == (singleExpression (literal "Name")))) )))) (eos ;))))))) <EOF>)