(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function run ( (formalParameterList (formalParameterArg (assignable count))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression count))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Obj) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName name)) = (singleExpression name))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName getName)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression this) . (identifierName name))))))) (eos ;)))))) })))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression new (singleExpression (singleExpression Obj) (arguments ( (argument (singleExpression (singleExpression (literal "Item")) + (singleExpression i))) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression obj) . (identifierName name)) !== (singleExpression (singleExpression (singleExpression obj) . (identifierName getName)) (arguments ( ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal false)))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression run) (arguments ( (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: Error: during execution of arrow function 10000 times"))) )))) (eos ;))))) <EOF>)