(program (sourceElements (sourceElement (statement (functionDeclaration function * gen ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (singleExpression gen) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression obj) . (identifierName __proto__)) = (singleExpression foo))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression obj) . (identifierName next)) (arguments ( ))) . (identifierName value))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression (literal "bad"))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))))) })))))) <EOF>)