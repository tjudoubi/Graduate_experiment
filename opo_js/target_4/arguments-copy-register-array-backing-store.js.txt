(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arguments)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bar) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName slice)) . (identifierName call)) (arguments ( (argument (singleExpression arguments)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sum) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sum) (assignmentOperator +=) (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression sum)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable args) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expectedArgs) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName slice)) . (identifierName call)) (arguments ( (argument (singleExpression args)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression edenGC) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expectedResult) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedResult) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression i) + (singleExpression i)) + (singleExpression (literal (numericLiteral 1)))) + (singleExpression i)) + (singleExpression (literal (numericLiteral 2)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 2))))) ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression expectedResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "Incorrect result: ")) + (singleExpression result)) + (singleExpression (literal " != "))) + (singleExpression expectedResult))) ))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression expectedArgs) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression i)) ]) !== (singleExpression (singleExpression expectedArgs) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Incorrect arg result"))) ))))) (eos ;)))))) })))))) <EOF>)