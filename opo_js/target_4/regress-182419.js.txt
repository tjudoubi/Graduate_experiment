(program (sourceElements (sourceElement (statement (functionDeclaration function assertEqual ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAILED: expect ")) + (singleExpression expected)) + (singleExpression (literal ", actual "))) + (singleExpression actual))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression index1)) , (argument (singleExpression index2)) )))) eos))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c)) , (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression args) . (identifierName length))) , (arrayElement (singleExpression (singleExpression args) [ (expressionSequence (singleExpression index1)) ])) , (arrayElement (singleExpression (singleExpression args) [ (expressionSequence (singleExpression index2)) ]))) ]))) (eos ;)))))) })) (statement (functionDeclaration function jaz ( (formalParameterList (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression baz) . (identifierName apply)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression args)) )))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression jaz)) )))) (eos ;))) (statement (functionDeclaration function check ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression let) [ (expressionSequence (singleExpression length) , (singleExpression a) , (singleExpression b)) ]) = (singleExpression (singleExpression jaz) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEqual) (arguments ( (argument (singleExpression length)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEqual) (arguments ( (argument (singleExpression a)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEqual) (arguments ( (argument (singleExpression b)) , (argument (singleExpression undefined)) )))) (eos ;)))))) })) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 20000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression check) (arguments ( )))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0x7fffffff)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) <EOF>)