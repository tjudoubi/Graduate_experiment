(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: {String(actual)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "C"))) (eos ;)))))) }) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal (numericLiteral 2.5)))) )))) , (argument (singleExpression (literal "CC"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal "C"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 2.5)))) (eos ;)))))) }) }))) )))) , (argument (singleExpression (literal "CC"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "OK"))) ))))) (eos ;)))))) }) }))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `Error: OK`))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal (numericLiteral 0xFFFFFFFFF)))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression Infinity)) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `RangeError: String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName repeat)) . (identifierName call)) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 2000))))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `RangeError: String.prototype.repeat argument must be greater than or equal to 0 and not be Infinity`))) )))) (eos ;)))) })))) <EOF>)