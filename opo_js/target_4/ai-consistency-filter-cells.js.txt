(program (sourceElements (sourceElement (statement (functionDeclaration function get ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable prop))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) [ (expressionSequence (singleExpression prop)) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression get)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable record)) , (formalParameterArg (assignable key)) , (formalParameterArg (assignable attribute))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable attrs) = (singleExpression (singleExpression get) (arguments ( (argument (singleExpression this)) , (argument (singleExpression (literal 'attrs'))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression get) (arguments ( (argument (singleExpression record)) , (argument (singleExpression key)) )))) , (variableDeclaration (assignable type) = (singleExpression (singleExpression attribute) . (identifierName type)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression type)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable transform) = (singleExpression (singleExpression (singleExpression this) . (identifierName transformFor)) (arguments ( (argument (singleExpression type)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression (singleExpression transform) . (identifierName serialize)) (arguments ( (argument (singleExpression value)) ))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression key) = (singleExpression (singleExpression (singleExpression attrs) && (singleExpression (singleExpression attrs) [ (expressionSequence (singleExpression key)) ])) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName keyForAttribute)) ? (singleExpression (singleExpression (singleExpression this) . (identifierName keyForAttribute)) (arguments ( (argument (singleExpression key)) ))) : (singleExpression key))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName key)) : (singleExpression key)) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) }))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thisValue) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName transformFor)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName serialize)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { }))) eos))))) }))) }))) eos))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression record) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName key)) : (singleExpression (literal "hello"))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression record2) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName key)) : (singleExpression (literal true))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression key) = (singleExpression (literal "key")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression attribute) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName type)) : (singleExpression (literal "type"))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName call)) (arguments ( (argument (singleExpression thisValue)) , (argument (singleExpression record)) , (argument (singleExpression key)) , (argument (singleExpression attribute)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName call)) (arguments ( (argument (singleExpression thisValue)) , (argument (singleExpression record2)) , (argument (singleExpression key)) , (argument (singleExpression attribute)) )))) (eos ;)))))) })))))) <EOF>)