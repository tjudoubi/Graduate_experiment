(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) eos))))))) }))) (sourceElement (statement (functionDeclaration function funcName ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "func"))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function klassName ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "klass"))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { functionBody }))) )) . (identifierName name)) === (singleExpression (literal "")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function * ( ) { functionBody }))) )) . (identifierName name)) === (singleExpression (literal "")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )) . (identifierName name)) === (singleExpression (literal "")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { }))) )) . (identifierName name)) === (singleExpression (literal "")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f1) = (singleExpression (anoymousFunction (functionDeclaration function namedFunction1 ( ) { functionBody }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f2) = (singleExpression (anoymousFunction (functionDeclaration function * namedFunction2 ( ) { functionBody }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k1) = (singleExpression class namedClass (classTail { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f1) . (identifierName name)) === (singleExpression (literal "namedFunction1")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f2) . (identifierName name)) === (singleExpression (literal "namedFunction2")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression k1) . (identifierName name)) === (singleExpression (literal "namedClass")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func1) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func2) = (singleExpression (anoymousFunction function * ( ) { functionBody })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func3) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression func1) . (identifierName name)) === (singleExpression (literal "func1")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression func2) . (identifierName name)) === (singleExpression (literal "func2")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression func3) . (identifierName name)) === (singleExpression (literal "func3")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression let) [ (expressionSequence (singleExpression (singleExpression arrFunc1) = (singleExpression (anoymousFunction function ( ) { functionBody })))) ]) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression let) [ (expressionSequence (singleExpression (singleExpression arrFunc2) = (singleExpression (anoymousFunction function * ( ) { functionBody })))) ]) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression let) [ (expressionSequence (singleExpression (singleExpression arrFunc3) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) ]) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement statement) (sourceElement (statement {)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression objFunc1) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos)))) } = { } ; let { objFunc2 = function * ( ) { } } = { } ; let { objFunc3 = ( ) => { } } = { } ; let [ arrClass = class { } ] = [ ] ; let { objClass = class { } } = { } ; assert ( arrFunc1 . name === "arrFunc1" ) ; assert ( arrFunc2 . name === "arrFunc2" ) ; assert ( arrFunc3 . name === "arrFunc3" ) ; assert ( objFunc1 . name === "objFunc1" ) ; assert ( objFunc2 . name === "objFunc2" ) ; assert ( objFunc3 . name === "objFunc3" ) ; assert ( arrClass . name === "arrClass" ) ; assert ( objClass . name === "objClass" ) ; for ( [ forArrFunc1 = function ( ) { } ] of [ [ ] ] ) assert ( forArrFunc1 . name === "forArrFunc1" ) ; for ( [ forArrFunc2 = function * ( ) { } ] of [ [ ] ] ) assert ( forArrFunc2 . name === "forArrFunc2" ) ; for ( [ forArrFunc3 = ( ) => { } ] of [ [ ] ] ) assert ( forArrFunc3 . name === "forArrFunc3" ) ; for ( [ forArrClass = class { } ] of [ [ ] ] ) assert ( forArrClass . name === "forArrClass" ) ; for ( { forObjFunc1 = function ( ) { } } of [ { } ] ) assert ( forObjFunc1 . name === "forObjFunc1" ) ; for ( { forObjFunc2 = function * ( ) { } } of [ { } ] ) assert ( forObjFunc2 . name === "forObjFunc2" ) ; for ( { forObjFunc3 = ( ) => { } } of [ { } ] ) assert ( forObjFunc3 . name === "forObjFunc3" ) ; for ( { forObjClass = class { } } of [ { } ] ) assert ( forObjClass . name === "forObjClass" ) ; assert ( ( globalFunc = function ( ) { } ) . name === "globalFunc" ) ; assert ( ( globalFunc = function * ( ) { } ) . name === "globalFunc" ) ; assert ( ( globalFunc = ( ) => { } ) . name === "globalFunc" ) ; assert ( ( globalKlass = class { } ) . name === "globalKlass" ) ; assert ( ( { "func" : function ( ) { } } ) . func . name === "func" ) ; assert ( ( { "func" : function * ( ) { } } ) . func . name === "func" ) ; assert ( ( { func : function ( ) { } } ) . func . name === "func" ) ; assert ( ( { func : function * ( ) { } } ) . func . name === "func" ) ; assert ( ( { func ( ) { } } ) . func . name === "func" ) ; assert ( ( { * func ( ) { } } ) . func . name === "func" ) ; assert ( ( { [ "func" ] : function ( ) { } } ) . func . name === "func" ) ; assert ( ( { [ "func" ] : function * ( ) { } } ) . func . name === "func" ) ; assert ( ( { [ "func" ] ( ) { } } ) . func . name === "func" ) ; assert ( ( { * [ "func" ] ( ) { } } ) . func . name === "func" ) ; assert ( ( { [ funcName ( ) ] : function ( ) { } } ) . func . name === "func" ) ; assert ( ( { [ funcName ( ) ] : function * ( ) { } } ) . func . name === "func" ) ; assert ( ( { [ funcName ( ) ] ( ) { } } ) . func . name === "func" ) ; assert ( ( { * [ funcName ( ) ] ( ) { } } ) . func . name === "func" ) ; assert ( ( { "func" : ( ) => { } } ) . func . name === "func" ) ; assert ( ( { func : ( ) => { } } ) . func . name === "func" ) ; assert ( ( { [ "func" ] : ( ) => { } } ) . func . name === "func" ) ; assert ( ( { [ funcName ( ) ] : ( ) => { } } ) . func . name === "func" ) ; assert ( ( { "klass" : class { } } ) . klass . name === "klass" ) ; assert ( ( { klass : class { } } ) . klass . name === "klass" ) ; assert ( ( { [ "klass" ] : class { } } ) . klass . name === "klass" ) ; assert ( ( { [ klassName ( ) ] : class { } } ) . klass . name === "klass" ) ; let sym = Symbol ( ) ; assert ( ( { [ sym ] : function ( ) { } } ) [ sym ] . name === "" ) ; assert ( ( { [ sym ] : function * ( ) { } } ) [ sym ] . name === "" ) ; assert ( ( { [ sym ] : ( ) => { } } ) [ sym ] . name === "" ) ; assert ( ( { [ sym ] ( ) { } } ) [ sym ] . name === "" ) ; assert ( ( { * [ sym ] ( ) { } } ) [ sym ] . name === "" ) ; assert ( ( { [ sym ] : class { } } ) [ sym ] . name === "" ) ; assert ( ( function ( func = function ( ) { } ) { return func . name } ) ( ) === "func" ) ; assert ( ( function ( func = function * ( ) { } ) { return func . name } ) ( ) === "func" ) ; assert ( ( function ( func = ( ) => { } ) { return func . name } ) ( ) === "func" ) ; assert ( ( function ( klass = class { } ) { return klass . name } ) ( ) === "klass" ) ; assert ( ( function ( { func = function ( ) { } } ) { return func . name } ) ( { } ) === "func" ) ; assert ( ( function ( { func = function * ( ) { } } ) { return func . name } ) ( { } ) === "func" ) ; assert ( ( function ( { func = ( ) => { } } ) { return func . name } ) ( { } ) === "func" ) ; assert ( ( function ( [ func = function ( ) { } ] ) { return func . name } ) ( [ ] ) === "func" ) ; assert ( ( function ( [ func = function * ( ) { } ] ) { return func . name } ) ( [ ] ) === "func" ) ; assert ( ( function ( [ func = ( ) => { } ] ) { return func . name } ) ( [ ] ) === "func" ) ; assert ( ( function ( { klass = class { } } ) { return klass . name } ) ( { } ) === "klass" ) ; assert ( ( function ( [ klass = class { } ] ) { return klass . name } ) ( [ ] ) === "klass" ) ; assert ( ( ( { func = function ( ) { } } ) => { return func . name } ) ( { } ) === "func" ) ; assert ( ( ( { func = function * ( ) { } } ) => { return func . name } ) ( { } ) === "func" ) ; assert ( ( ( { func = ( ) => { } } ) => { return func . name } ) ( { } ) === "func" ) ; assert ( ( ( [ func = function ( ) { } ] ) => { return func . name } ) ( [ ] ) === "func" ) ; assert ( ( ( [ func = function * ( ) { } ] ) => { return func . name } ) ( [ ] ) === "func" ) ; assert ( ( ( [ func = ( ) => { } ] ) => { return func . name } ) ( [ ] ) === "func" ) ; assert ( ( ( { klass = class { } } ) => { return klass . name } ) ( { } ) === "klass" ) ; assert ( ( ( [ klass = class { } ] ) => { return klass . name } ) ( [ ] ) === "klass" ) ; assert ( ( { method ( { func = function ( ) { } } ) { return func . name } } ) . method ( { } ) === "func" ) ; assert ( ( { method ( { func = function * ( ) { } } ) { return func . name } } ) . method ( { } ) === "func" ) ; assert ( ( { method ( { func = ( ) => { } } ) { return func . name } } ) . method ( { } ) === "func" ) ; assert ( ( { method ( [ func = function ( ) { } ] ) { return func . name } } ) . method ( [ ] ) === "func" ) ; assert ( ( { method ( [ func = function * ( ) { } ] ) { return func . name } } ) . method ( [ ] ) === "func" ) ; assert ( ( { method ( [ func = ( ) => { } ] ) { return func . name } } ) . method ( [ ] ) === "func" ) ; assert ( ( { method ( { klass = class { } } ) { return klass . name } } ) . method ( { } ) === "klass" ) ; assert ( ( { method ( [ klass = class { } ] ) { return klass . name } } ) . method ( [ ] ) === "klass" ) ; assert ( ( { __proto__ : function ( ) { } } ) . __proto__ . name === "" ) ; assert ( ( { __proto__ : function * ( ) { } } ) . __proto__ . name === "" ) ; assert ( ( { __proto__ : ( ) => { } } ) . __proto__ . name === "" ) ; assert ( ( { [ "__proto__" ] : function ( ) { } } ) . __proto__ . name === "__proto__" ) ; assert ( ( { [ "__proto__" ] : function * ( ) { } } ) . __proto__ . name === "__proto__" ) ; assert ( ( { [ "__proto__" ] : ( ) => { } } ) . __proto__ . name === "__proto__" ) ; assert ( ( { __proto__ ( ) { } } ) . __proto__ . name === "__proto__" ) ; assert ( ( { * __proto__ ( ) { } } ) . __proto__ . name === "__proto__" ) ; assert ( ( { __proto__ ( ) { } } ) . __proto__ . name === "__proto__" ) ;)