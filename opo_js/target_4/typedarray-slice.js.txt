(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./resources/typedarray-test-helper-functions.js"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression description) (arguments ( (argument (singleExpression (literal "This test checks the behavior of the TypedArray.prototype.slice function"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.prototype.slice.length"))) , (argument (singleExpression (literal "2"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "Int32Array.prototype.slice.name"))) , (argument (singleExpression (literal "'slice'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "isSameFunctionForEachTypedArrayPrototype('slice')"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeReceivesArray('slice', [undefined, this, { }, [ ], true, ''])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "testPrototypeFunction has the following arg list (name, args, init, result [ , expectedArray ])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "1.0 Test Basic Functionality"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(2, 3)', [12, 5, 8, 13, 44], [8], [12, 5, 8, 13, 44])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(5, 5)', [12, 5, 8, 13, 44], [])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(0, 5)', [12, 5, 8, 13, 44], [12, 5, 8, 13, 44])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '()', [12, 5, 8, 13, 44], [12, 5, 8, 13, 44])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(0, -5)', [12, 5, 8, 13, 44], [])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(-3, -2)', [12, 5, 8, 13, 44], [8])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(4, 2)', [12, 5, 8, 13, 44], [])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(-50, 50)', [12, 5, 8, 13, 44], [12, 5, 8, 13, 44])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testPrototypeFunction('slice', '(0, 10)', 100000, [0,0,0,0,0,0,0,0,0,0])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "2.0 Preserve Underlying bits"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable intView) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression intView) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable floatView) = (singleExpression new (singleExpression (singleExpression Float32Array) (arguments ( (argument (singleExpression (singleExpression intView) . (identifierName buffer))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression floatView) = (singleExpression (singleExpression (singleExpression floatView) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression intView) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (singleExpression floatView) . (identifierName buffer))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "intView[0]"))) , (argument (singleExpression (literal "-1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "3.0 Creates New Buffer"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable intView) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newView) = (singleExpression (singleExpression (singleExpression intView) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression newView) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal "intView[0]"))) , (argument (singleExpression (literal "0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "4.0 Symbol.species Test"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subclasses) = (singleExpression (singleExpression (singleExpression typedArrays) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression class (classTail extends (singleExpression constructor) { }))) eos))))) }))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSpecies ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression newArray) = (singleExpression (singleExpression (singleExpression array) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression newArray) instanceof (singleExpression constructor))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpecies)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression Foo) = (singleExpression class (classTail extends (singleExpression Int32Array) { })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression constructor)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression Foo)) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) }))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSpeciesWithFoo ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression newArray) = (singleExpression (singleExpression (singleExpression array) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression newArray) instanceof (singleExpression Foo))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpeciesWithFoo)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "4.1 Symbol.species Test throws"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression constructor)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) }))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpecies)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression Array))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpecies)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "4.2 Symbol.species Test with Defaults"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression (literal null)))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSpeciesIsDefault ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression newArray) = (singleExpression (singleExpression (singleExpression array) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression defaultConstructor) = (singleExpression (singleExpression typedArrays) [ (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName indexOf)) (arguments ( (argument (singleExpression constructor)) )))) ]))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression newArray) instanceof (singleExpression defaultConstructor))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpeciesIsDefault)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression undefined))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpeciesIsDefault)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subclasses) = (singleExpression (singleExpression (singleExpression typedArrays) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression class (classTail extends (singleExpression constructor) { }))) eos))))) }))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSpeciesRemoveConstructor ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName constructor)) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression newArray) = (singleExpression (singleExpression (singleExpression array) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression defaultConstructor) = (singleExpression (singleExpression typedArrays) [ (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName indexOf)) (arguments ( (argument (singleExpression constructor)) )))) ]))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression newArray) instanceof (singleExpression defaultConstructor))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "forEachTypedArray(subclasses, testSpeciesRemoveConstructor)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "5.0 Symbol.species returns a different type"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression buffer) = (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 64)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression constructor)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) }))) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setArray) (arguments ( (argument (singleExpression array)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 43))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 1.345))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]) = (singleExpression NaN))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]) = (singleExpression - (singleExpression Infinity)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]) = (singleExpression Infinity))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 6)))) ]) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 7)))) ]) = (singleExpression - (singleExpression (literal (numericLiteral 0)))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression array) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSpeciesWithSameBuffer) (arguments ( (argument (singleExpression unused)) , (argument (singleExpression constructor)) )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression typedArrays) . (identifierName every))) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable speciesConstructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression speciesConstructor) (arguments ( (argument (singleExpression buffer)) ))))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression otherArray) = (singleExpression new (singleExpression (singleExpression speciesConstructor) (arguments ( (argument (singleExpression buffer)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setArray) (arguments ( (argument (singleExpression array)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression array) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression otherArray) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resultString) = (singleExpression (singleExpression (singleExpression otherArray) . (identifierName toString)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setArray) (arguments ( (argument (singleExpression array)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression otherArray) = (singleExpression (singleExpression (singleExpression array) . (identifierName slice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression array) . (identifierName length))) ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sliceString) = (singleExpression (singleExpression (singleExpression otherArray) . (identifierName toString)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sliceString) === (singleExpression resultString))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "Symbol.species didn't get the correct result got: ")) + (singleExpression sliceString)) + (singleExpression (literal " but wanted: "))) + (singleExpression resultString))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "with initial type: ")) + (singleExpression (singleExpression (singleExpression constructor) . (identifierName __proto__)) . (identifierName name))) + (singleExpression (literal " and species type "))) + (singleExpression (singleExpression (singleExpression otherArray) . (identifierName constructor)) . (identifierName name)))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })))) ) ; } shouldBeTrue ( "forEachTypedArray(subclasses, testSpeciesWithSameBuffer)" ) ; function testSpeciesWithTransferring ( unused , constructor ) { let array = new constructor ( 10 ) ; Object . defineProperty ( constructor , Symbol . species , { get ( ) { transferArrayBuffer ( array . buffer ) ; return undefined ; } , configurable : true } ) ; try { array . slice ( 0 , 1 ) ; return false ; } catch ( e ) { } array = new constructor ( 10 ) ; Object . defineProperty ( constructor , Symbol . species , { get ( ) { return function ( len ) { let a = new constructor ( len ) ; transferArrayBuffer ( a . buffer ) ; return a ; } } , configurable : true } ) ; try { array . slice ( 0 , 1 ) ; return false ; } catch ( e ) { } return true ; } shouldBeTrue ( "forEachTypedArray(typedArrays, testSpeciesWithTransferring)" ) ; typedArrays . forEach ( function ( constructor ) { constructor [ Symbol . species ] = ( ) => new DataView ( new ArrayBuffer ( ) ) ; } ) ; function testSpeciesReturnsDataView ( array , constructor ) { try { array . slice ( 0 , 1 ) ; } catch ( e ) { return e instanceof TypeError ; } return false ; } shouldBeTrue ( "forEachTypedArray(typedArrays, testSpeciesReturnsDataView)" ) ; finishJSTest ( ) ;)