(program (sourceElements (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable MAX) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable found53Bit) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foundLessThan53Bit) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression MAX)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression MAX))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable str) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName random)) (arguments ( ))) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression i)) ]) = (singleExpression str))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression str) . (identifierName length)) === (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 53))) + (singleExpression (literal (numericLiteral 2))))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression found53Bit) = (singleExpression (literal true)))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression str) . (identifierName length)) < (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 53))) + (singleExpression (literal (numericLiteral 2))))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foundLessThan53Bit) = (singleExpression (literal true)))) (eos ;))))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression found53Bit) && (singleExpression foundLessThan53Bit))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal `Random seed ${getRandomSeed()}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression results) . (identifierName join)) (arguments ( (argument (singleExpression (literal '\n'))) )))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression test) (arguments ( ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "OUT"))) ))))) (eos ;)))))) })))))) <EOF>)