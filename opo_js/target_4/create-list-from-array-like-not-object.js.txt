(program (sourceElements (sourceElement (statement (functionDeclaration function testValid ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable foo) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 0)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName __proto__)) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName ownKeys)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression value)) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x))) in (expressionSequence (singleExpression foo)) ) (statement (block { }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValid) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValid) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValid) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "x"))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "y"))) ))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValid) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'x'))) }))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testInvalid ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testValid) (arguments ( (argument (singleExpression value)) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'should have thrown'))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable err) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression err) . (identifierName message)) !== (singleExpression (literal "Proxy handler's 'ownKeys' method must return an object")))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected createListFromArrayLike error"))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testInvalid) (arguments ( (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testInvalid) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testInvalid) (arguments ( (argument (singleExpression (literal null))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testInvalid) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) <EOF>)