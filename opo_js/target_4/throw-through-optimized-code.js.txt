(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable shouldThrow) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression shouldThrow)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "hello"))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 42))) - (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression bar)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable didThrow))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression didThrow) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression didThrow) != (singleExpression (literal "hello")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: didn't throw or threw wrong exception: ")) + (singleExpression didThrow))) (eos ;))))))) <EOF>)