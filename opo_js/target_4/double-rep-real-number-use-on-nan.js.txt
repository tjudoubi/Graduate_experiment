(program (sourceElements (sourceElement (statement (functionDeclaration function isNaNOnDouble ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression + (singleExpression value))) )) !== (singleExpression value))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression isNaNOnDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIsNaNOnDoubles ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression isNaNOnDouble) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression value)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "isNaNOnDouble(-0) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression isNaNOnDouble) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "isNaNOnDouble(NaN) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression isNaNOnDouble) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression value)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "isNaNOnDouble(Number.POSITIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testIsNaNOnDoubles)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIsNaNOnDoubles) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function isNaNOnDouble2 ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression valueToNumber) = (singleExpression ( (expressionSequence (singleExpression + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression valueToNumber) !== (singleExpression valueToNumber))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression isNaNOnDouble2)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isNaNOnDouble2) (arguments ( (argument (singleExpression (literal (numericLiteral 1.5)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed isNaNOnDouble(1.5)"))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaNOnDouble2) (arguments ( (argument (singleExpression NaN)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed isNaNOnDouble(NaN)"))) (eos ;)))))) })))) <EOF>)