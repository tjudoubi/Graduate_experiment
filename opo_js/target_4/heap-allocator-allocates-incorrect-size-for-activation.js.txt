(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable numberOfCapturedVariables) = (singleExpression (literal (numericLiteral 6621))))) (eos ;)))) (sourceElement (statement (functionDeclaration function use ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function makeFunction ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable varName))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable outerFunction) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable innerFunction) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numberOfCapturedVariables))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression varName) = (singleExpression (singleExpression (literal "_")) + (singleExpression i)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outerFunction) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (literal "var ")) + (singleExpression varName)) + (singleExpression (literal ";"))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression innerFunction) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (literal "use(")) + (singleExpression varName)) + (singleExpression (literal ");"))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression outerFunction) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (literal "function foo() {")) + (singleExpression innerFunction)) + (singleExpression (literal "}"))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable functionString) = (singleExpression (singleExpression (singleExpression (literal "(function() { ")) + (singleExpression outerFunction)) + (singleExpression (literal "})"))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression functionString)) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 50))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (singleExpression makeFunction) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fullGC) (arguments ( )))) (eos ;)))) })))))) <EOF>)