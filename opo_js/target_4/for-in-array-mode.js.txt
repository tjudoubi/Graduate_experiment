(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable funcArgAndBodyStr) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "(arr) {")) + (singleExpression (literal "\n"))) + (singleExpression (literal "    var sum = 0;"))) + (singleExpression (literal "\n"))) + (singleExpression (literal "    for (var i in arr)"))) + (singleExpression (literal "\n"))) + (singleExpression (literal "        sum += arr[i];"))) + (singleExpression (literal "\n"))) + (singleExpression (literal "    return sum;"))) + (singleExpression (literal "\n"))) + (singleExpression (literal "}"))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testData) = (singleExpression (objectLiteral { (propertyAssignment (propertyName "ArrayWithUndecided") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (arrayLiteral [ elementList ]))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal (numericLiteral 0)))) }))) , (propertyAssignment (propertyName "ArrayWithInt32") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal (numericLiteral 6)))) }))) , (propertyAssignment (propertyName "ArrayWithContiguous") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "a"))) , (arrayElement (singleExpression (literal "b"))) , (arrayElement (singleExpression (literal "c")))) ]))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal "0abc"))) }))) , (propertyAssignment (propertyName "ArrayWithDouble") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10.25)))) , (arrayElement (singleExpression (literal (numericLiteral 20.25)))) , (arrayElement (singleExpression (literal (numericLiteral 30.25))))) ]))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal (numericLiteral 60.75)))) }))) , (propertyAssignment (propertyName "ArrayWithArrayStorage") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "a"))) , (arrayElement (singleExpression (literal "b"))) , (arrayElement (singleExpression (literal "c")))) ]))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal "0abc1000"))) }))) , (propertyAssignment (propertyName "ArrayWithSlowPutArrayStorage") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "a"))) , (arrayElement (singleExpression (literal "b"))) , (arrayElement (singleExpression (literal "c")))) ]))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal "0abc10"))) }))) , (propertyAssignment (propertyName "NonArrayWithUndecided") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (objectLiteral { }))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal (numericLiteral 0)))) }))) , (propertyAssignment (propertyName "NonArrayWithInt32") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName "0") : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName "1") : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName "2") : (singleExpression (literal (numericLiteral 3)))) }))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal (numericLiteral 6)))) }))) , (propertyAssignment (propertyName "NonArrayWithContiguous") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName "0") : (singleExpression (literal "a"))) , (propertyAssignment (propertyName "1") : (singleExpression (literal "b"))) , (propertyAssignment (propertyName "2") : (singleExpression (literal "c"))) }))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal "0abc"))) }))) , (propertyAssignment (propertyName "NonArrayWithDouble") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName "0") : (singleExpression (literal (numericLiteral 10.25)))) , (propertyAssignment (propertyName "1") : (singleExpression (literal (numericLiteral 20.25)))) , (propertyAssignment (propertyName "2") : (singleExpression (literal (numericLiteral 30.25)))) }))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal (numericLiteral 60.75)))) }))) , (propertyAssignment (propertyName "NonArrayWithArrayStorage") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName "0") : (singleExpression (literal "a"))) , (propertyAssignment (propertyName "1") : (singleExpression (literal "b"))) , (propertyAssignment (propertyName "2") : (singleExpression (literal "c"))) }))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal "0abc1000"))) }))) , (propertyAssignment (propertyName "NonArrayWithSlowPutArrayStorage") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword in)))) : (singleExpression (objectLiteral { (propertyAssignment (propertyName "0") : (singleExpression (literal "a"))) , (propertyAssignment (propertyName "1") : (singleExpression (literal "b"))) , (propertyAssignment (propertyName "2") : (singleExpression (literal "c"))) }))) , (propertyAssignment (propertyName (identifierName out)) : (singleExpression (literal "0abc10"))) }))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 10)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperties)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName "0") : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName a))) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName a)) = (singleExpression x))) (eos ;)))))) }))) , }))) , }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testData) [ (expressionSequence (singleExpression (literal "ArrayWithArrayStorage"))) ]) . (identifierName (reservedWord (keyword in)))) [ (expressionSequence (singleExpression (literal (numericLiteral 1000)))) ]) = (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testData) [ (expressionSequence (singleExpression (literal "ArrayWithSlowPutArrayStorage"))) ]) . (identifierName (reservedWord (keyword in)))) . (identifierName __proto__)) = (singleExpression o))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testData) [ (expressionSequence (singleExpression (literal "NonArrayWithArrayStorage"))) ]) . (identifierName (reservedWord (keyword in)))) [ (expressionSequence (singleExpression (literal "1000"))) ]) = (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression testData) [ (expressionSequence (singleExpression (literal "NonArrayWithSlowPutArrayStorage"))) ]) . (identifierName (reservedWord (keyword in)))) . (identifierName __proto__)) = (singleExpression o))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable numberOfFailures) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable name)) , (formalParameterArg (assignable data))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "function ")) + (singleExpression name)) + (singleExpression funcArgAndBodyStr))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression name)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable failed) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable previousResult))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (singleExpression data) . (identifierName out)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable actual) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression name) + (singleExpression (literal "(data.in)")))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) )) && (singleExpression ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression previousResult))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAIL: ")) + (singleExpression name)) + (singleExpression (literal ": expected: "))) + (singleExpression expected)) + (singleExpression (literal ", actual: "))) + (singleExpression actual)) + (singleExpression (literal ", starting @ loop iteration "))) + (singleExpression i))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression previousResult) = (singleExpression actual))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numberOfFailures) ++)) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression name) in (expressionSequence (singleExpression testData)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression name)) , (argument (singleExpression (singleExpression testData) [ (expressionSequence (singleExpression name)) ])) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression numberOfFailures)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: number of failures found: ")) + (singleExpression numberOfFailures))) (eos ;))))))) <EOF>)