(program (sourceElements (sourceElement (statement (functionDeclaration function make ( (formalParameterList (formalParameterArg (assignable offset))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression offset) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression offset) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable int8Array) = (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression int8Array) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression int8Array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression i))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression (singleExpression int8Array) . (identifierName buffer))) , (argument (singleExpression offset)) , (argument (singleExpression (singleExpression (singleExpression int8Array) . (identifierName length)) - (singleExpression offset))) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression make)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) [ (expressionSequence (singleExpression i)) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (singleExpression make) (arguments ( ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable index) = (singleExpression (singleExpression i) % (singleExpression (singleExpression o) . (identifierName length))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o)) , (argument (singleExpression index)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (singleExpression index) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Read test error: bad result for index = ")) + (singleExpression index)) + (singleExpression (literal ": "))) + (singleExpression result)) + (singleExpression (literal "; expected "))) + (singleExpression ( (expressionSequence (singleExpression (singleExpression index) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) })))))) <EOF>)