(program (sourceElements (sourceElement (statement (functionDeclaration function runNearStackLimit ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression t) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression flag) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function f1 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression flag) ? (singleExpression (objectLiteral { })) : (singleExpression (literal (numericLiteral 10))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function f2 ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function f3 ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression - (singleExpression ( (expressionSequence (singleExpression (singleExpression arg) ? (singleExpression (singleExpression f1) (arguments ( ))) : (singleExpression (singleExpression f2) (arguments ( ))))) ))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f3) (arguments ( (argument (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ))))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression flag) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runNearStackLimit) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f3) (arguments ( (argument (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ))))) )))) (eos ;)))))) })))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { })))))) <EOF>)