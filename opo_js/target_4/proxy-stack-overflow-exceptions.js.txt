(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrowStackOverflow ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable verbose) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (singleExpression e) instanceof (singleExpression RangeError)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression threw))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "No stack overflow error thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "passed test: ")) + (singleExpression f)) + (singleExpression (literal "\n\n")))) )))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable emptyFunction) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression seenStartObjects) = (singleExpression new (singleExpression Map)))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeLongProxyChain) (arguments ( (argument (singleExpression (singleExpression startObject) = (singleExpression emptyFunction))) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression seenStartObjects) . (identifierName has)) (arguments ( (argument (singleExpression startObject)) )))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression seenStartObjects) . (identifierName get)) (arguments ( (argument (singleExpression startObject)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression startObject)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression seenStartObjects) . (identifierName set)) (arguments ( (argument (singleExpression startObject)) , (argument (singleExpression p)) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression p)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChain ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) . (identifierName name))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function effecivelyCyclicProxyProtoChain1 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression t)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression t)) , (argument (singleExpression p)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) . (identifierName propertyDoesNotExist))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function effecivelyCyclicProxyProtoChain2 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression t)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression t)) , (argument (singleExpression p)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable k))) in (expressionSequence (singleExpression p)) ) (statement (breakStatement break (eos ;)))))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function effecivelyCyclicProxyProtoChain3 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression t)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression t)) , (argument (singleExpression p)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression p)) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainBind ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Function) . (identifierName prototype)) . (identifierName bind)) . (identifierName call)) (arguments ( (argument (singleExpression p)) )))) eos))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainPropertyAccess ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) . (identifierName nonExistentProperty))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainReflectConstruct ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Array)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression p)) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainReflectSet ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName set)) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null)))) ]))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression p)) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainReflectOwnKeys ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression p)) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainGetPrototypeOf ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression p)) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainSetPrototypeOf ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName setPrototypeOf)) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (literal null))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainGetOwnPropertyDescriptor ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (literal ""))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainDefineProperty ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName defineProperty)) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (literal ""))) , (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainIsExtensible ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName isExtensible)) (arguments ( (argument (singleExpression p)) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainPreventExtensions ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName preventExtensions)) (arguments ( (argument (singleExpression p)) )))) eos))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainDeleteProperty ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName deleteProperty)) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (literal ""))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainWithScope ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression p)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression propertyLookup)) (eos ;)))) }))))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainWithScope2 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression p)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression storeToProperty) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }))))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainWithScope3 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression p)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression someFunctionPropertyLookup) (arguments ( )))) eos))) }))))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainArrayPrototypePush ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName push)) . (identifierName call)) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainWithScope4 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression p)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) }))))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainCall ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) (arguments ( )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainConstruct ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression p))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowStackOverflow) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function longProxyChainHas ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression makeLongProxyChain) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression p)) , (argument (singleExpression (literal "foo"))) )))) (eos ;)))))) })))) )))) (eos ;))))) <EOF>)