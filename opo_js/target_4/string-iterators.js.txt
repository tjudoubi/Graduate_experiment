(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "Cocoa,Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stringIterator) = (singleExpression (singleExpression (singleExpression testString) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stringIteratorPrototype) = (singleExpression (singleExpression stringIterator) . (identifierName __proto__)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stringIteratorPrototypeNext) = (singleExpression (singleExpression stringIteratorPrototype) . (identifierName next)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression stringIterator) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal 'next'))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "next method should exists on %StringIteratorPrototype%"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression stringIteratorPrototype) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal 'next'))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "next method should exists on %StringIteratorPrototype%"))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iterator) = (singleExpression (singleExpression (singleExpression testString) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (singleExpression value)) })) = (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (singleExpression testString) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testString) . (identifierName length)) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (functionDeclaration function testSurrogatePair ( (formalParameterList (formalParameterArg (assignable testString)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable numberOfElements))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testString) . (identifierName length)) !== (singleExpression numberOfElements))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression (singleExpression testString) . (identifierName length)))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iterator) = (singleExpression (singleExpression (singleExpression testString) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (singleExpression value)) })) = (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) !== (singleExpression (singleExpression expected) . (identifierName length)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable codePoint))) of (expressionSequence (singleExpression testString)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) }))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "𠮷野家")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD842)))) , (argument (singleExpression (literal (numericLiteral 0xDFB7)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x91CE)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x5BB6)))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSurrogatePair) (arguments ( (argument (singleExpression testString)) , (argument (singleExpression expected)) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "A\uD842")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x0041)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD842)))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSurrogatePair) (arguments ( (argument (singleExpression testString)) , (argument (singleExpression expected)) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "A\uD842A")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x0041)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD842)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x0041)))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSurrogatePair) (arguments ( (argument (singleExpression testString)) , (argument (singleExpression expected)) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "A\uD842\uDFB7")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x0041)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD842)))) , (argument (singleExpression (literal (numericLiteral 0xDFB7)))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSurrogatePair) (arguments ( (argument (singleExpression testString)) , (argument (singleExpression expected)) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "\uD842A\uDFB7")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD842)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x0041)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xDFB7)))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSurrogatePair) (arguments ( (argument (singleExpression testString)) , (argument (singleExpression expected)) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testString) = (singleExpression (literal "\uDFB7\uD842A")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xDFB7)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0xD842)))) )))) , (arrayElement (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x0041)))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSurrogatePair) (arguments ( (argument (singleExpression testString)) , (argument (singleExpression expected)) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string1) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string1Iterator) = (singleExpression (singleExpression (singleExpression string1) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable index) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression result) . (identifierName value)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) . (identifierName done))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (singleExpression string1) [ (expressionSequence (singleExpression (singleExpression index) ++)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) !== (singleExpression (literal (numericLiteral 5))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad index: ")) + (singleExpression index))) (eos ;)))))) (sourceElement (statement (functionDeclaration function increment ( (formalParameterList (formalParameterArg (assignable iter))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression iter)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string1) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string2) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string1Iterator) = (singleExpression (singleExpression (singleExpression string1) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string2Iterator) = (singleExpression (singleExpression (singleExpression string2) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value1) = (singleExpression (singleExpression (singleExpression increment) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value2) = (singleExpression (singleExpression (singleExpression increment) (arguments ( (argument (singleExpression string2Iterator)) ))) . (identifierName value)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value1) !== (singleExpression value2))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value1)) + (singleExpression (literal " "))) + (singleExpression value2))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string1) = (singleExpression (literal "Cappuccino")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string1Iterator) = (singleExpression (singleExpression (singleExpression string1) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression string1Iterator) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "C")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression string1Iterator) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "a")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression string1Iterator) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "p")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "p")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "u")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "c")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "c")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "i")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "n")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal "o")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression string1Iterator)) ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable primitives) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "string"))) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 0.03)))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression undefined))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable primitive))) of (expressionSequence (singleExpression primitives)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable didThrow) = (singleExpression (literal null)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression primitive)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression didThrow) = (singleExpression e))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression didThrow))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: no error thrown"))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable message) = (singleExpression (literal 'TypeError: %StringIteratorPrototype%.next requires that |this| be a String Iterator instance')))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression primitive) == (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression message) = (singleExpression (literal 'TypeError: %StringIteratorPrototype%.next requires that |this| not be null or undefined')))) eos)))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression didThrow)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression didThrow))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nonRelatedObjects) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (arrayLiteral [ elementList ]))) , (arrayElement (singleExpression new (singleExpression (singleExpression Date) (arguments ( ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) , (arrayElement (singleExpression (singleExpression Object) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( )))) )))) , (arrayElement (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "Cappuccino"))) ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression Number) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression Boolean) (arguments ( (argument (singleExpression (literal false))) ))))) , (arrayElement (singleExpression (anoymousFunction function ( ) { functionBody }))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable object))) of (expressionSequence (singleExpression nonRelatedObjects)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable didThrow) = (singleExpression (literal null)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression stringIteratorPrototypeNext) . (identifierName call)) (arguments ( (argument (singleExpression object)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression didThrow) = (singleExpression e))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression didThrow))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: no error thrown"))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression didThrow)) ))) !== (singleExpression (literal 'TypeError: %StringIteratorPrototype%.next requires that |this| be a String Iterator instance')))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression didThrow))) (eos ;)))))) })))))) <EOF>)