(program (sourceElements (sourceElement (statement (functionDeclaration function testRegExpInbounds ( (formalParameterList (formalParameterArg (assignable re)) , (formalParameterArg (assignable str)) , (formalParameterArg (assignable substrEnd))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression subStr) = (singleExpression (singleExpression (singleExpression str) . (identifierName substring)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression substrEnd)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression match) = (singleExpression (singleExpression (singleExpression subStr) . (identifierName match)) (arguments ( (argument (singleExpression re)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression match) !== (singleExpression (literal null))) && (singleExpression (singleExpression (singleExpression match) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression str)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Read past end of a Unicode substring processing a Unicode RegExp"))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression match) === (singleExpression (literal null))) || (singleExpression (singleExpression (singleExpression match) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression subStr)))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Didn't properly match a Unicode substring with a matching Unicode RegExp"))) (eos ;)))) }))))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10400}c\u{10a01}d|ab\u{10400}c\u{10a01}/iu))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}d"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10400}c\u{10a01}d|ab\u{10400}c\u{10a01}/iu))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}d"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab[\u{10428}x]c[\u{10a01}x]defg|ab\u{10428}c\u{10a01}def/u))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}defg"))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /[\u{10428}x]abcd|\u{10428}abc/u))) , (argument (singleExpression (literal "\u{10428}abcdef"))) , (argument (singleExpression (literal (numericLiteral 5)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10400}c\u{10a01}[^d]|ab\u{10400}c\u{10a01}/iu))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}X"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10400}c\u{10a01}.|ab\u{10400}c\u{10a01}/iu))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}d"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10428}c\u{10a01}\u{10000}|ab\u{10428}c\u{10a01}/iu))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}\u{10000}"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10428}c\u{10a01}.|ab\u{10428}c\u{10a01}/u))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}\u{10000}"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpInbounds) (arguments ( (argument (singleExpression (literal /ab\u{10428}c\u{10a01}[^x]|ab\u{10428}c\u{10a01}/u))) , (argument (singleExpression (literal "ab\u{10428}c\u{10a01}\u{10000}"))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;))))) <EOF>)