(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression allocateLotsOfThings) (arguments ( (argument (singleExpression array)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName next)) : (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression i) / (singleExpression (literal (numericLiteral 2))))) )))) ])) })))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression allocateLotsOfThings) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression edenGC) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "var a = new Int32Array(100);"))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)