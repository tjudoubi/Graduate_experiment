(program (sourceElements (sourceElement (statement (functionDeclaration function blah ( (formalParameterList (formalParameterArg (assignable args))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression args) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression args) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression array)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 42)))) ]))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression blah) (arguments ( (argument (singleExpression arguments)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName apply)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression array)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression blah)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function checkEqual ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName length)) != (singleExpression (singleExpression b) . (identifierName length)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: length mismatch: ")) + (singleExpression a)) + (singleExpression (literal " versus "))) + (singleExpression b))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression a) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) --)) ; ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: mismatch at i = ")) + (singleExpression i)) + (singleExpression (literal ": "))) + (singleExpression a)) + (singleExpression (literal " versus "))) + (singleExpression b))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable actual) = (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression array)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkEqual) (arguments ( (argument (singleExpression actual)) , (argument (singleExpression array)) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 6)))))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression j)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression array)) )))) (eos ;)))) })))))) <EOF>)