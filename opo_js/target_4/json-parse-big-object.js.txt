(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo1") : (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo2") : (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo3") : (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo4") : (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo5") : (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo6") : (singleExpression (objectLiteral { (propertyAssignment (propertyName "foo7") : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName "bar1") : (singleExpression (singleExpression (singleExpression (literal "a")) . (identifierName repeat)) (arguments ( (argument (singleExpression (literal (numericLiteral 670)))) )))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName "bar2") : (singleExpression (singleExpression (singleExpression (literal "a")) . (identifierName repeat)) (arguments ( (argument (singleExpression (literal (numericLiteral 15771)))) )))) }))) ,) ]))) }))) }))) }))) }))) }))) }))) })))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression doTest) (arguments ( (argument (singleExpression x)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable s) = (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression x)) ))))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression doTest) (arguments ( (argument (singleExpression obj)) )))) (eos ;))))) <EOF>)