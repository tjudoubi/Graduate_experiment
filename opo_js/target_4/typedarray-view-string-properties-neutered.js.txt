(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression typedArrays) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Int8Array)) , (arrayElement (singleExpression Uint8Array)) , (arrayElement (singleExpression Uint8ClampedArray)) , (arrayElement (singleExpression Int16Array)) , (arrayElement (singleExpression Uint16Array)) , (arrayElement (singleExpression Int32Array)) , (arrayElement (singleExpression Uint32Array)) , (arrayElement (singleExpression Float32Array)) , (arrayElement (singleExpression Float64Array))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function call ( (formalParameterList (formalParameterArg (assignable thunk))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thunk) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression call)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression name) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "map"))) , (arrayElement (singleExpression (literal "reduce")))) ])))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression constructor)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression (singleExpression array) . (identifierName buffer))) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName map)) !== (singleExpression (singleExpression (singleExpression constructor) . (identifierName prototype)) . (identifierName map)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) })))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (singleExpression name) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ])) ]) !== (singleExpression (singleExpression (singleExpression constructor) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression name) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ])) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) })))) )))) (eos ;)))) }))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression constructor) of (expressionSequence (singleExpression typedArrays)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression constructor)) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fnId) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName map)) !== (singleExpression (singleExpression (singleExpression constructor) . (identifierName prototype)) . (identifierName map)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fnVal) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (singleExpression name) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ])) ]) !== (singleExpression (singleExpression (singleExpression constructor) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression name) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ])) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression fnId)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression fnVal)) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression (singleExpression array) . (identifierName buffer))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression fnId)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression fnVal)) )))) (eos ;)))))) })))) <EOF>)