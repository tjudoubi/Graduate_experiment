(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable length)) , (formalParameterArg (assignable number))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (singleExpression length) / (singleExpression number))) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable number) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression i) * (singleExpression (literal (numericLiteral 2)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression number) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1e4))) - (singleExpression (literal (numericLiteral 1))))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression number) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression test) (arguments ( (argument (singleExpression value)) , (argument (singleExpression number)) ))) . (identifierName length))) , (argument (singleExpression ( (expressionSequence (singleExpression (singleExpression value) / (singleExpression number))) ))) )))) (eos ;)))) })))))) <EOF>)