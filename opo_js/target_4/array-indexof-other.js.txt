(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function indexOfInt32 ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName indexOf)) (arguments ( (argument (singleExpression value)) , (argument (singleExpression index)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression indexOfInt32)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function indexOfDouble ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName indexOf)) (arguments ( (argument (singleExpression value)) , (argument (singleExpression index)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression indexOfDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function indexOfString ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName indexOf)) (arguments ( (argument (singleExpression value)) , (argument (singleExpression index)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression indexOfString)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function indexOfObject ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName indexOf)) (arguments ( (argument (singleExpression value)) , (argument (singleExpression index)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression indexOfObject)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable int32Array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4)))) , (arrayElement (singleExpression (literal (numericLiteral 5)))) , (arrayElement (singleExpression (literal (numericLiteral 6)))) , (arrayElement (singleExpression (literal (numericLiteral 7)))) , (arrayElement (singleExpression (literal (numericLiteral 8)))) , (arrayElement (singleExpression (literal (numericLiteral 9)))) , (arrayElement (singleExpression (literal (numericLiteral 10)))) , (arrayElement (singleExpression (literal (numericLiteral 11)))) , (arrayElement (singleExpression (literal (numericLiteral 12))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleArray) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4.2)))) , (arrayElement (singleExpression (literal (numericLiteral 5)))) , (arrayElement (singleExpression (literal (numericLiteral 6)))) , (arrayElement (singleExpression (literal (numericLiteral 7)))) , (arrayElement (singleExpression (literal (numericLiteral 8)))) , (arrayElement (singleExpression (literal (numericLiteral 9)))) , (arrayElement (singleExpression (literal (numericLiteral 10.5)))) , (arrayElement (singleExpression (literal (numericLiteral 11)))) , (arrayElement (singleExpression (literal (numericLiteral 12))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stringArray) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "cocoa"))) , (arrayElement (singleExpression (literal "cappuccino"))) , (arrayElement (singleExpression (literal "matcha"))) , (arrayElement (singleExpression (literal "rize"))) , (arrayElement (singleExpression (literal "kilimanjaro")))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable objectArray) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression key)) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression undefined))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfInt32) (arguments ( (argument (singleExpression int32Array)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfInt32) (arguments ( (argument (singleExpression int32Array)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfDouble) (arguments ( (argument (singleExpression doubleArray)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfDouble) (arguments ( (argument (singleExpression doubleArray)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfDouble) (arguments ( (argument (singleExpression doubleArray)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfDouble) (arguments ( (argument (singleExpression doubleArray)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfString) (arguments ( (argument (singleExpression stringArray)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfString) (arguments ( (argument (singleExpression stringArray)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfObject) (arguments ( (argument (singleExpression objectArray)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 9)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression indexOfObject) (arguments ( (argument (singleExpression objectArray)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;))))) <EOF>)