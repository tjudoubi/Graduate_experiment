(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName xx)) : (singleExpression (literal (numericLiteral 42)))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) in (singleExpression o))) ))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression o) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal "xx")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression r) === (singleExpression (literal (numericLiteral 42))))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) }))) })))) } ) ; test ( function ( ) { let o = { xx : 42 } ; for ( let i in { xx : 0 } ) { for ( let j = 0 ; j < 2 ; j ++ ) { let r = o [ i ] ; if ( i === "xx" ) assert ( r === 42 ) ; i = new Uint32Array ( [ 0 , 1 , 0x777777 , 0 , 0 ] ) ; } } } ) ; test ( function ( ) { let o = { xx : 42 } ; for ( let i in { xx : 0 } ) { for ( let j = 0 ; j < 2 ; j ++ ) { let r = o [ i ] ; if ( i === "xx" ) assert ( r === 42 ) ; ( [ i ] = [ new Uint32Array ( [ 0 , 1 , 0x777777 , 0 , 0 ] ) ] ) ; } } } ) ; test ( function ( ) { let o = { xx : 42 } ; for ( let i in { xx : 0 } ) { for ( let j = 0 ; j < 2 ; j ++ ) { let r = o [ i ] ; if ( i === "xx" ) assert ( r === 42 ) ; ( { xyz : i } = { xyz : new Uint32Array ( [ 0 , 1 , 0x777777 , 0 , 0 ] ) } ) ; } } } ) ; test ( function ( ) { let o = [ 1 , 2 , 3 ] ; let toStringCalls = 0 ; let first ; let num = 0 ; let total = 0 ; for ( let i in o ) { first = true ; for ( let j = 0 ; j < 3 ; j ++ ) { let r = o [ i ] ; if ( first ) assert ( r === o [ num ] ) ; else assert ( r === undefined ) ; first = false ; i = { toString ( ) { ++ toStringCalls ; return "hello!" ; } } } ++ num ; } assert ( toStringCalls === o . length * 2 ) ; } ) ; test ( function ( ) { let o = [ 1 , 2 , 3 ] ; let toStringCalls = 0 ; let first ; let num = 0 ; let total = 0 ; for ( let i in o ) { first = true ; for ( let j = 0 ; j < 3 ; j ++ ) { let r = o [ i ] ; if ( first ) assert ( r === o [ num ] ) ; else assert ( r === undefined ) ; first = false ; ( [ i ] = [ { toString ( ) { ++ toStringCalls ; return "hello!" ; } } ] ) ; } ++ num ; } assert ( toStringCalls === o . length * 2 ) ; } ) ; test ( function ( ) { let o = [ 1 , 2 , 3 ] ; let toStringCalls = 0 ; let first ; let num = 0 ; let total = 0 ; for ( let i in o ) { first = true ; for ( let j = 0 ; j < 3 ; j ++ ) { let r = o [ i ] ; if ( first ) assert ( r === o [ num ] ) ; else assert ( r === undefined ) ; first = false ; ( { xyz : i } = { xyz : { toString ( ) { ++ toStringCalls ; return "hello!" ; } } } ) ; } ++ num ; } assert ( toStringCalls === o . length * 2 ) ; } ) ;)