(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function assign ( (formalParameterList (formalParameterArg (assignable object)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) [ (expressionSequence (singleExpression name)) ]) = (singleExpression value))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assign)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (literal 'hello')))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10001))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 10000))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assign) (arguments ( (argument (singleExpression object)) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression object) [ (expressionSequence (singleExpression (literal (numericLiteral 42)))) ])) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression object) . (identifierName hello))) , (argument (singleExpression undefined)) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assign) (arguments ( (argument (singleExpression object)) , (argument (singleExpression string)) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression object) [ (expressionSequence (singleExpression string)) ])) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))))) })))))) <EOF>)