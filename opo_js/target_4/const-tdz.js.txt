(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function truth ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression truth)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "broke assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldThrowTDZ ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hasThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName name)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "ReferenceError"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hasThrown) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression hasThrown)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression shouldThrowTDZ)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable NUM_LOOPS) = (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable SHORT_LOOPS) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression prop)) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression prop2)) })) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression prop)) })))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function jaz ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression prop)) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression prop2)) })) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression prop)) })))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression baz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression jaz)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression captureX) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable captureY) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable captureAll) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) + (singleExpression y))) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression captureAll) (arguments ( ))) === (singleExpression (literal (numericLiteral 60))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression tdz)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable tdz) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable captureAll) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) + (singleExpression y)) + (singleExpression tdz))) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression tdz)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable tdz) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (functionDeclaration function cap ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression captureX) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression truth) (arguments ( ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression y)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression undefined))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression undefined))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x;"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "captureX();"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function other ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression captureX)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression other) (arguments ( ))) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression SHORT_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "y; x;"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "x;"))) ))) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression truth) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('y');"))) ))) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('x');"))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 40))))) (eos ;)))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression SHORT_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))))) })))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))))) })))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression typeof (singleExpression x))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))))) })))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression typeof (singleExpression x))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))))) })))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) ++)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) --)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 30))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator *=) (singleExpression (literal (numericLiteral 40))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 30))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function kaz ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator /=) (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function haz ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function captureX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression x))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function jaz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression x))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 30))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression baz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression kaz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression haz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression jaz)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable result) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression x)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 10)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 20)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression y))) (eos ;))) (statement (breakStatement break (eos ;)))))) (defaultClause default : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;))) (statement (breakStatement break (eos ;))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable result) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression x)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 10)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 20)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable capY) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression y))) (eos ;))) (statement (breakStatement break (eos ;)))))) (defaultClause default : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;))) (statement (breakStatement break (eos ;))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable result) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression x)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 10)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 20)))) : (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable inc) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inc) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 41))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression y))) (eos ;))) (statement (breakStatement break (eos ;)))))) (defaultClause default : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;))) (statement (breakStatement break (eos ;))))) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression y) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))))) }))) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression x))) ])) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function boo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression x))) ])) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (functionDeclaration function capX ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (objectLiteral { (propertyAssignment (singleExpression a)) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression y)) })) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression (literal (numericLiteral 40)))) })))) ))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 40))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function zar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (objectLiteral { (propertyAssignment (singleExpression a)) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression y)) })) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression (literal (numericLiteral 40)))) })))) ))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (functionDeclaration function capY ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) }))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (objectLiteral { (propertyAssignment (singleExpression a)) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression (objectLiteral { (propertyAssignment (singleExpression y)) }))) })) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 100)))) , (propertyAssignment (propertyName (identifierName p)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName p)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 40)))) }))) }))) })))) ))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function jaz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (objectLiteral { (propertyAssignment (singleExpression y)) })) = (singleExpression (objectLiteral { })))) ))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression boo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression bar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression zar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression baz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argument (singleExpression jaz)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)