(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName inheritsFrom)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable shuper))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function Inheriter ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Inheriter) . (identifierName prototype)) = (singleExpression (singleExpression shuper) . (identifierName prototype)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName prototype)) = (singleExpression new (singleExpression (singleExpression Inheriter) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName superConstructor)) = (singleExpression shuper))) (eos ;)))))) })))) eos))) (sourceElement (statement (functionDeclaration function OrderedCollection ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression OrderedCollection) . (identifierName prototype)) . (identifierName add)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable elm))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) . (identifierName push)) (arguments ( (argument (singleExpression elm)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression OrderedCollection) . (identifierName prototype)) . (identifierName at)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) [ (expressionSequence (singleExpression index)) ])) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression OrderedCollection) . (identifierName prototype)) . (identifierName size)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) . (identifierName length))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression OrderedCollection) . (identifierName prototype)) . (identifierName removeFirst)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) . (identifierName pop)) (arguments ( )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression OrderedCollection) . (identifierName prototype)) . (identifierName remove)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable elm))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable index) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable skipped) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) != (singleExpression elm))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) [ (expressionSequence (singleExpression index)) ]) = (singleExpression value))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression skipped) ++)) (eos ;)))) }))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression skipped))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName elms)) . (identifierName pop)) (arguments ( )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (functionDeclaration function Strength ( (formalParameterList (formalParameterArg (assignable strengthValue)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName strengthValue)) = (singleExpression strengthValue))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName name)) = (singleExpression name))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName stronger)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable s1)) , (formalParameterArg (assignable s2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression s1) . (identifierName strengthValue)) < (singleExpression (singleExpression s2) . (identifierName strengthValue)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName weaker)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable s1)) , (formalParameterArg (assignable s2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression s1) . (identifierName strengthValue)) > (singleExpression (singleExpression s2) . (identifierName strengthValue)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName weakestOf)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable s1)) , (formalParameterArg (assignable s2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName weaker)) (arguments ( (argument (singleExpression s1)) , (argument (singleExpression s2)) ))) ? (singleExpression s1) : (singleExpression s2))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName strongest)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable s1)) , (formalParameterArg (assignable s2))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName stronger)) (arguments ( (argument (singleExpression s1)) , (argument (singleExpression s2)) ))) ? (singleExpression s1) : (singleExpression s2))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Strength) . (identifierName prototype)) . (identifierName nextWeaker)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression (singleExpression this) . (identifierName strengthValue))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 0)))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Strength) . (identifierName WEAKEST))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Strength) . (identifierName WEAK_DEFAULT))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Strength) . (identifierName NORMAL))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 3)))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Strength) . (identifierName STRONG_DEFAULT))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 4)))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Strength) . (identifierName PREFERRED))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 5)))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Strength) . (identifierName REQUIRED))) (eos ;)))))) })))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName REQUIRED)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal "required"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName STONG_PREFERRED)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal "strongPreferred"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName PREFERRED)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal "preferred"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName STRONG_DEFAULT)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal "strongDefault"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName NORMAL)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) , (argument (singleExpression (literal "normal"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName WEAK_DEFAULT)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (literal "weakDefault"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName WEAKEST)) = (singleExpression new (singleExpression (singleExpression Strength) (arguments ( (argument (singleExpression (literal (numericLiteral 6)))) , (argument (singleExpression (literal "weakest"))) )))))) (eos ;)))) (sourceElement (statement (functionDeclaration function Constraint ( (formalParameterList (formalParameterArg (assignable strength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName strength)) = (singleExpression strength))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Constraint) . (identifierName prototype)) . (identifierName addConstraint)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName addToGraph)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression planner) . (identifierName incrementalAdd)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Constraint) . (identifierName prototype)) . (identifierName satisfy)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName chooseMethod)) (arguments ( (argument (singleExpression mark)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName isSatisfied)) (arguments ( ))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName strength)) == (singleExpression (singleExpression Strength) . (identifierName REQUIRED)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Could not satisfy a required constraint!"))) )))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName markInputs)) (arguments ( (argument (singleExpression mark)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable out) = (singleExpression (singleExpression (singleExpression this) . (identifierName output)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable overridden) = (singleExpression (singleExpression out) . (identifierName determinedBy)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression overridden) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression overridden) . (identifierName markUnsatisfied)) (arguments ( )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName determinedBy)) = (singleExpression this))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression planner) . (identifierName addPropagate)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression mark)) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Cycle encountered"))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName mark)) = (singleExpression mark))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression overridden)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Constraint) . (identifierName prototype)) . (identifierName destroyConstraint)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isSatisfied)) (arguments ( )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression planner) . (identifierName incrementalRemove)) (arguments ( (argument (singleExpression this)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName removeFromGraph)) (arguments ( )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Constraint) . (identifierName prototype)) . (identifierName isInput)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })))) eos))) (sourceElement (statement (functionDeclaration function UnaryConstraint ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable strength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName superConstructor)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression strength)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) = (singleExpression v))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName satisfied)) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName addConstraint)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName inheritsFrom)) (arguments ( (argument (singleExpression Constraint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName addToGraph)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName addConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName satisfied)) = (singleExpression (literal false)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName chooseMethod)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName satisfied)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName mark)) != (singleExpression mark))) )) && (singleExpression (singleExpression (singleExpression Strength) . (identifierName stronger)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName walkStrength))) )))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName isSatisfied)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName satisfied))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName markInputs)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName output)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName myOutput))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName recalculate)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName walkStrength)) = (singleExpression (singleExpression this) . (identifierName strength)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName stay)) = (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName isInput)) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName stay))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName execute)) (arguments ( )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName markUnsatisfied)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName satisfied)) = (singleExpression (literal false)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName inputsKnown)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression UnaryConstraint) . (identifierName prototype)) . (identifierName removeFromGraph)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName myOutput)) . (identifierName removeConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName satisfied)) = (singleExpression (literal false)))) (eos ;)))))) })))) eos))) (sourceElement (statement (functionDeclaration function StayConstraint ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable str))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression StayConstraint) . (identifierName superConstructor)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression v)) , (argument (singleExpression str)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression StayConstraint) . (identifierName inheritsFrom)) (arguments ( (argument (singleExpression UnaryConstraint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression StayConstraint) . (identifierName prototype)) . (identifierName execute)) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (functionDeclaration function EditConstraint ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable str))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression EditConstraint) . (identifierName superConstructor)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression v)) , (argument (singleExpression str)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression EditConstraint) . (identifierName inheritsFrom)) (arguments ( (argument (singleExpression UnaryConstraint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression EditConstraint) . (identifierName prototype)) . (identifierName isInput)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression EditConstraint) . (identifierName prototype)) . (identifierName execute)) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable Direction) = (singleExpression new (singleExpression (singleExpression Object) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Direction) . (identifierName NONE)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Direction) . (identifierName FORWARD)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Direction) . (identifierName BACKWARD)) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (functionDeclaration function BinaryConstraint ( (formalParameterList (formalParameterArg (assignable var1)) , (formalParameterArg (assignable var2)) , (formalParameterArg (assignable strength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName superConstructor)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression strength)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) = (singleExpression var1))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) = (singleExpression var2))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression Direction) . (identifierName NONE)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName addConstraint)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName inheritsFrom)) (arguments ( (argument (singleExpression Constraint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName chooseMethod)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName mark)) == (singleExpression mark))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName mark)) != (singleExpression mark)) && (singleExpression (singleExpression (singleExpression Strength) . (identifierName stronger)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName walkStrength))) ))))) )) ? (singleExpression (singleExpression Direction) . (identifierName FORWARD)) : (singleExpression (singleExpression Direction) . (identifierName NONE))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName mark)) == (singleExpression mark))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName mark)) != (singleExpression mark)) && (singleExpression (singleExpression (singleExpression Strength) . (identifierName stronger)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName walkStrength))) ))))) )) ? (singleExpression (singleExpression Direction) . (identifierName BACKWARD)) : (singleExpression (singleExpression Direction) . (identifierName NONE))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression Strength) . (identifierName weaker)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName walkStrength))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName walkStrength))) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression (singleExpression (singleExpression Strength) . (identifierName stronger)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName walkStrength))) ))) ? (singleExpression (singleExpression Direction) . (identifierName BACKWARD)) : (singleExpression (singleExpression Direction) . (identifierName NONE))))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression (singleExpression (singleExpression Strength) . (identifierName stronger)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName walkStrength))) ))) ? (singleExpression (singleExpression Direction) . (identifierName FORWARD)) : (singleExpression (singleExpression Direction) . (identifierName BACKWARD))))) eos))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName addToGraph)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName addConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName addConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression Direction) . (identifierName NONE)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName isSatisfied)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) != (singleExpression (singleExpression Direction) . (identifierName NONE)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName markInputs)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName input)) (arguments ( ))) . (identifierName mark)) = (singleExpression mark))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName input)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) == (singleExpression (singleExpression Direction) . (identifierName FORWARD)))) )) ? (singleExpression (singleExpression this) . (identifierName v1)) : (singleExpression (singleExpression this) . (identifierName v2)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName output)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) == (singleExpression (singleExpression Direction) . (identifierName FORWARD)))) )) ? (singleExpression (singleExpression this) . (identifierName v2)) : (singleExpression (singleExpression this) . (identifierName v1)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName recalculate)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ihn) = (singleExpression (singleExpression (singleExpression this) . (identifierName input)) (arguments ( )))) , (variableDeclaration (assignable out) = (singleExpression (singleExpression (singleExpression this) . (identifierName output)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName walkStrength)) = (singleExpression (singleExpression (singleExpression Strength) . (identifierName weakestOf)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression ihn) . (identifierName walkStrength))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName stay)) = (singleExpression (singleExpression ihn) . (identifierName stay)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression out) . (identifierName stay))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName execute)) (arguments ( )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName markUnsatisfied)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression Direction) . (identifierName NONE)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName inputsKnown)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression this) . (identifierName input)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression i) . (identifierName mark)) == (singleExpression mark)) || (singleExpression (singleExpression i) . (identifierName stay))) || (singleExpression (singleExpression (singleExpression i) . (identifierName determinedBy)) == (singleExpression (literal null))))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BinaryConstraint) . (identifierName prototype)) . (identifierName removeFromGraph)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName removeConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName removeConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression Direction) . (identifierName NONE)))) (eos ;)))))) })))) eos))) (sourceElement (statement (functionDeclaration function ScaleConstraint ( (formalParameterList (formalParameterArg (assignable src)) , (formalParameterArg (assignable scale)) , (formalParameterArg (assignable offset)) , (formalParameterArg (assignable dest)) , (formalParameterArg (assignable strength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) = (singleExpression (singleExpression Direction) . (identifierName NONE)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) = (singleExpression scale))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) = (singleExpression offset))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName superConstructor)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression src)) , (argument (singleExpression dest)) , (argument (singleExpression strength)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName inheritsFrom)) (arguments ( (argument (singleExpression BinaryConstraint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName prototype)) . (identifierName addToGraph)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName superConstructor)) . (identifierName prototype)) . (identifierName addToGraph)) . (identifierName call)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) . (identifierName addConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) . (identifierName addConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName prototype)) . (identifierName removeFromGraph)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName superConstructor)) . (identifierName prototype)) . (identifierName removeFromGraph)) . (identifierName call)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) . (identifierName removeConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) . (identifierName removeConstraint)) (arguments ( (argument (singleExpression this)) )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName prototype)) . (identifierName markInputs)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName superConstructor)) . (identifierName prototype)) . (identifierName markInputs)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression mark)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) . (identifierName mark)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) . (identifierName mark)) = (singleExpression mark)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName prototype)) . (identifierName execute)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName direction)) == (singleExpression (singleExpression Direction) . (identifierName FORWARD)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName value)) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName value)) * (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) . (identifierName value))) + (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) . (identifierName value))))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v1)) . (identifierName value)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v2)) . (identifierName value)) - (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) . (identifierName value)))) )) / (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) . (identifierName value))))) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression ScaleConstraint) . (identifierName prototype)) . (identifierName recalculate)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ihn) = (singleExpression (singleExpression (singleExpression this) . (identifierName input)) (arguments ( )))) , (variableDeclaration (assignable out) = (singleExpression (singleExpression (singleExpression this) . (identifierName output)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName walkStrength)) = (singleExpression (singleExpression (singleExpression Strength) . (identifierName weakestOf)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName strength))) , (argument (singleExpression (singleExpression ihn) . (identifierName walkStrength))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName stay)) = (singleExpression (singleExpression (singleExpression (singleExpression ihn) . (identifierName stay)) && (singleExpression (singleExpression (singleExpression this) . (identifierName scale)) . (identifierName stay))) && (singleExpression (singleExpression (singleExpression this) . (identifierName offset)) . (identifierName stay))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression out) . (identifierName stay))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName execute)) (arguments ( )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (functionDeclaration function EqualityConstraint ( (formalParameterList (formalParameterArg (assignable var1)) , (formalParameterArg (assignable var2)) , (formalParameterArg (assignable strength))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression EqualityConstraint) . (identifierName superConstructor)) . (identifierName call)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression var1)) , (argument (singleExpression var2)) , (argument (singleExpression strength)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression EqualityConstraint) . (identifierName inheritsFrom)) (arguments ( (argument (singleExpression BinaryConstraint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression EqualityConstraint) . (identifierName prototype)) . (identifierName execute)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName output)) (arguments ( ))) . (identifierName value)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName input)) (arguments ( ))) . (identifierName value)))) (eos ;)))))) })))) eos))) (sourceElement (statement (functionDeclaration function Variable ( (formalParameterList (formalParameterArg (assignable name)) , (formalParameterArg (assignable initialValue))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression (singleExpression initialValue) || (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName constraints)) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName determinedBy)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName mark)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName walkStrength)) = (singleExpression (singleExpression Strength) . (identifierName WEAKEST)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName stay)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName name)) = (singleExpression name))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Variable) . (identifierName prototype)) . (identifierName addConstraint)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName constraints)) . (identifierName add)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Variable) . (identifierName prototype)) . (identifierName removeConstraint)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName constraints)) . (identifierName remove)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName determinedBy)) == (singleExpression c))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName determinedBy)) = (singleExpression (literal null)))) (eos ;)))))))) })))) eos))) (sourceElement (statement (functionDeclaration function Planner ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName currentMark)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName incrementalAdd)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable mark) = (singleExpression (singleExpression (singleExpression this) . (identifierName newMark)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable overridden) = (singleExpression (singleExpression (singleExpression c) . (identifierName satisfy)) (arguments ( (argument (singleExpression mark)) ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression overridden) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression overridden) = (singleExpression (singleExpression (singleExpression overridden) . (identifierName satisfy)) (arguments ( (argument (singleExpression mark)) ))))) (eos ;)))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName incrementalRemove)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable out) = (singleExpression (singleExpression (singleExpression c) . (identifierName output)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName markUnsatisfied)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName removeFromGraph)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable unsatisfied) = (singleExpression (singleExpression (singleExpression this) . (identifierName removePropagateFrom)) (arguments ( (argument (singleExpression out)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable strength) = (singleExpression (singleExpression Strength) . (identifierName REQUIRED)))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression unsatisfied) . (identifierName size)) (arguments ( ))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u) = (singleExpression (singleExpression (singleExpression unsatisfied) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression u) . (identifierName strength)) == (singleExpression strength))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName incrementalAdd)) (arguments ( (argument (singleExpression u)) )))) (eos ;)))))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression strength) = (singleExpression (singleExpression (singleExpression strength) . (identifierName nextWeaker)) (arguments ( ))))) (eos ;)))) })) while ( (expressionSequence (singleExpression (singleExpression strength) != (singleExpression (singleExpression Strength) . (identifierName WEAKEST)))) ) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName newMark)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ++ (singleExpression (singleExpression this) . (identifierName currentMark)))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName makePlan)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable sources))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable mark) = (singleExpression (singleExpression (singleExpression this) . (identifierName newMark)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable plan) = (singleExpression new (singleExpression (singleExpression Plan) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable todo) = (singleExpression sources))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression todo) . (identifierName size)) (arguments ( ))) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression todo) . (identifierName removeFirst)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression c) . (identifierName output)) (arguments ( ))) . (identifierName mark)) != (singleExpression mark)) && (singleExpression (singleExpression (singleExpression c) . (identifierName inputsKnown)) (arguments ( (argument (singleExpression mark)) ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression plan) . (identifierName addConstraint)) (arguments ( (argument (singleExpression c)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression c) . (identifierName output)) (arguments ( ))) . (identifierName mark)) = (singleExpression mark))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName addConstraintsConsumingTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression c) . (identifierName output)) (arguments ( )))) , (argument (singleExpression todo)) )))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression plan)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName extractPlanFromConstraints)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constraints))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sources) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression constraints) . (identifierName size)) (arguments ( ))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression constraints) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression c) . (identifierName isInput)) (arguments ( ))) && (singleExpression (singleExpression (singleExpression c) . (identifierName isSatisfied)) (arguments ( ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression sources) . (identifierName add)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName makePlan)) (arguments ( (argument (singleExpression sources)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName addPropagate)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable c)) , (formalParameterArg (assignable mark))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable todo) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression todo) . (identifierName add)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression todo) . (identifierName size)) (arguments ( ))) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable d) = (singleExpression (singleExpression (singleExpression todo) . (identifierName removeFirst)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression d) . (identifierName output)) (arguments ( ))) . (identifierName mark)) == (singleExpression mark))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName incrementalRemove)) (arguments ( (argument (singleExpression c)) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName recalculate)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName addConstraintsConsumingTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression d) . (identifierName output)) (arguments ( )))) , (argument (singleExpression todo)) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName removePropagateFrom)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable out))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName determinedBy)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName walkStrength)) = (singleExpression (singleExpression Strength) . (identifierName WEAKEST)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression out) . (identifierName stay)) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable unsatisfied) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable todo) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression todo) . (identifierName add)) (arguments ( (argument (singleExpression out)) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression todo) . (identifierName size)) (arguments ( ))) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (singleExpression (singleExpression todo) . (identifierName removeFirst)) (arguments ( ))))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression (singleExpression v) . (identifierName constraints)) . (identifierName size)) (arguments ( ))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression (singleExpression v) . (identifierName constraints)) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression c) . (identifierName isSatisfied)) (arguments ( ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression unsatisfied) . (identifierName add)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))))) })))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable determining) = (singleExpression (singleExpression v) . (identifierName determinedBy)))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression (singleExpression v) . (identifierName constraints)) . (identifierName size)) (arguments ( ))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable next) = (singleExpression (singleExpression (singleExpression (singleExpression v) . (identifierName constraints)) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression next) != (singleExpression determining)) && (singleExpression (singleExpression (singleExpression next) . (identifierName isSatisfied)) (arguments ( ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression next) . (identifierName recalculate)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression todo) . (identifierName add)) (arguments ( (argument (singleExpression (singleExpression (singleExpression next) . (identifierName output)) (arguments ( )))) )))) (eos ;)))) }))))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression unsatisfied)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Planner) . (identifierName prototype)) . (identifierName addConstraintsConsumingTo)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable coll))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable determining) = (singleExpression (singleExpression v) . (identifierName determinedBy)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cc) = (singleExpression (singleExpression v) . (identifierName constraints)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression cc) . (identifierName size)) (arguments ( ))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression cc) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression c) != (singleExpression determining)) && (singleExpression (singleExpression (singleExpression c) . (identifierName isSatisfied)) (arguments ( ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression coll) . (identifierName add)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))))) }))))))) })))) eos))) (sourceElement (statement (functionDeclaration function Plan ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName v)) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Plan) . (identifierName prototype)) . (identifierName addConstraint)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v)) . (identifierName add)) (arguments ( (argument (singleExpression c)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Plan) . (identifierName prototype)) . (identifierName size)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v)) . (identifierName size)) (arguments ( )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Plan) . (identifierName prototype)) . (identifierName constraintAt)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName v)) . (identifierName at)) (arguments ( (argument (singleExpression index)) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Plan) . (identifierName prototype)) . (identifierName execute)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression this) . (identifierName size)) (arguments ( ))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression this) . (identifierName constraintAt)) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName execute)) (arguments ( )))) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (functionDeclaration function chainTest ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression planner) = (singleExpression new (singleExpression (singleExpression Planner) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable prev) = (singleExpression (literal null))) , (variableDeclaration (assignable first) = (singleExpression (literal null))) , (variableDeclaration (assignable last) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) <= (singleExpression n))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable name) = (singleExpression (singleExpression (literal "v")) + (singleExpression i)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression new (singleExpression (singleExpression Variable) (arguments ( (argument (singleExpression name)) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression prev) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression EqualityConstraint) (arguments ( (argument (singleExpression prev)) , (argument (singleExpression v)) , (argument (singleExpression (singleExpression Strength) . (identifierName REQUIRED))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) == (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression first) = (singleExpression v))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) == (singleExpression n))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression last) = (singleExpression v))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression prev) = (singleExpression v))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression StayConstraint) (arguments ( (argument (singleExpression last)) , (argument (singleExpression (singleExpression Strength) . (identifierName STRONG_DEFAULT))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable edit) = (singleExpression new (singleExpression (singleExpression EditConstraint) (arguments ( (argument (singleExpression first)) , (argument (singleExpression (singleExpression Strength) . (identifierName PREFERRED))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable edits) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression edits) . (identifierName add)) (arguments ( (argument (singleExpression edit)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable plan) = (singleExpression (singleExpression (singleExpression planner) . (identifierName extractPlanFromConstraints)) (arguments ( (argument (singleExpression edits)) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression first) . (identifierName value)) = (singleExpression i))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression plan) . (identifierName execute)) (arguments ( )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression last) . (identifierName value)) != (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Chain test failed."))) )))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function projectionTest ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression planner) = (singleExpression new (singleExpression (singleExpression Planner) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable scale) = (singleExpression new (singleExpression (singleExpression Variable) (arguments ( (argument (singleExpression (literal "scale"))) , (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable offset) = (singleExpression new (singleExpression (singleExpression Variable) (arguments ( (argument (singleExpression (literal "offset"))) , (argument (singleExpression (literal (numericLiteral 1000)))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable src) = (singleExpression (literal null))) , (variableDeclaration (assignable dst) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dests) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression src) = (singleExpression new (singleExpression (singleExpression Variable) (arguments ( (argument (singleExpression (singleExpression (literal "src")) + (singleExpression i))) , (argument (singleExpression i)) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression dst) = (singleExpression new (singleExpression (singleExpression Variable) (arguments ( (argument (singleExpression (singleExpression (literal "dst")) + (singleExpression i))) , (argument (singleExpression i)) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression dests) . (identifierName add)) (arguments ( (argument (singleExpression dst)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression StayConstraint) (arguments ( (argument (singleExpression src)) , (argument (singleExpression (singleExpression Strength) . (identifierName NORMAL))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression ScaleConstraint) (arguments ( (argument (singleExpression src)) , (argument (singleExpression scale)) , (argument (singleExpression offset)) , (argument (singleExpression dst)) , (argument (singleExpression (singleExpression Strength) . (identifierName REQUIRED))) ))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression change) (arguments ( (argument (singleExpression src)) , (argument (singleExpression (literal (numericLiteral 17)))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression dst) . (identifierName value)) != (singleExpression (literal (numericLiteral 1170))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Projection 1 failed"))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression change) (arguments ( (argument (singleExpression dst)) , (argument (singleExpression (literal (numericLiteral 1050)))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression src) . (identifierName value)) != (singleExpression (literal (numericLiteral 5))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Projection 2 failed"))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression change) (arguments ( (argument (singleExpression scale)) , (argument (singleExpression (literal (numericLiteral 5)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression dests) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))) . (identifierName value)) != (singleExpression (singleExpression (singleExpression i) * (singleExpression (literal (numericLiteral 5)))) + (singleExpression (literal (numericLiteral 1000)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Projection 3 failed"))) )))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression change) (arguments ( (argument (singleExpression offset)) , (argument (singleExpression (literal (numericLiteral 2000)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression dests) . (identifierName at)) (arguments ( (argument (singleExpression i)) ))) . (identifierName value)) != (singleExpression (singleExpression (singleExpression i) * (singleExpression (literal (numericLiteral 5)))) + (singleExpression (literal (numericLiteral 2000)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Projection 4 failed"))) )))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function change ( (formalParameterList (formalParameterArg (assignable v)) , (formalParameterArg (assignable newValue))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable edit) = (singleExpression new (singleExpression (singleExpression EditConstraint) (arguments ( (argument (singleExpression v)) , (argument (singleExpression (singleExpression Strength) . (identifierName PREFERRED))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable edits) = (singleExpression new (singleExpression (singleExpression OrderedCollection) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression edits) . (identifierName add)) (arguments ( (argument (singleExpression edit)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable plan) = (singleExpression (singleExpression (singleExpression planner) . (identifierName extractPlanFromConstraints)) (arguments ( (argument (singleExpression edits)) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName value)) = (singleExpression newValue))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression plan) . (identifierName execute)) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression edit) . (identifierName destroyConstraint)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable planner) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (functionDeclaration function deltaBlue ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression chainTest) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression projectionTest) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 155))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression deltaBlue) (arguments ( )))) (eos ;))))))) <EOF>)