(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iteratorPrototype) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Cocoa")) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))) . (identifierName __proto__)) . (identifierName __proto__)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression iteratorPrototype) !== (singleExpression (singleExpression Object) . (identifierName prototype)))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression iteratorPrototype) . (identifierName __proto__))) , (argument (singleExpression (singleExpression Object) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression iteratorPrototype)) )))) )))) , (argument (singleExpression (literal '[]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertySymbols)) (arguments ( (argument (singleExpression iteratorPrototype)) ))) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertySymbols)) (arguments ( (argument (singleExpression iteratorPrototype)) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression iteratorPrototype) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( )))) , (argument (singleExpression iteratorPrototype)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stringIterator) = (singleExpression (singleExpression (singleExpression (literal "Hello")) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression iteratorPrototype) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) . (identifierName call)) (arguments ( (argument (singleExpression stringIterator)) )))) , (argument (singleExpression stringIterator)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function inheritIteratorPrototype ( (formalParameterList (formalParameterArg (assignable iterator))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable prototype) = (singleExpression (singleExpression iterator) . (identifierName __proto__)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression prototype) !== (singleExpression iteratorPrototype))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression prototype)) , (argument (singleExpression (literal 'constructor'))) )))) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression prototype) . (identifierName __proto__))) , (argument (singleExpression iteratorPrototype)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression iteratorPrototype) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) . (identifierName name))) , (argument (singleExpression (literal '[Symbol.iterator]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression iteratorPrototype) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inheritIteratorPrototype) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Cappuccino")) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inheritIteratorPrototype) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression Map) (arguments ( ))) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inheritIteratorPrototype) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression Set) (arguments ( ))) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inheritIteratorPrototype) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression Array) (arguments ( ))) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inheritIteratorPrototype) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arguments)) (eos ;)))))) })) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) )) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression inheritIteratorPrototype) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arguments)) (eos ;)))))) })) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) )) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testChain ( (formalParameterList (formalParameterArg (assignable iterable))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iterator) = (singleExpression (singleExpression (singleExpression iterable) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proto1) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression iterator)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proto2) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression proto1)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression proto2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression proto1) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression iterator) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName iterator))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression iterator) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( )))) , (argument (singleExpression iterator)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testChain) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testChain) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Map) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testChain) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Set) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testChain) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Array) (arguments ( ))))) )))) (eos ;))))) <EOF>)