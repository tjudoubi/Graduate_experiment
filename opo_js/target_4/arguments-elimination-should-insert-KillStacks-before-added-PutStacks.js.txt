(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (functionDeclaration function inlinee ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression value) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function reflect ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression inlinee) . (identifierName apply)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression arguments)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable arr))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable object) = (singleExpression (singleExpression (singleExpression inlinee) . (identifierName apply)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression arr)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reflect) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression (literal (numericLiteral 1))) + (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 100))))))) ; (expressionSequence (singleExpression (singleExpression j) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName push)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression arr)) )))) (eos ;)))) })))))) <EOF>)