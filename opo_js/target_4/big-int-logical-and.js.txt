(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression e))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function logicalAnd ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) && (singleExpression b))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logicalAnd)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression logicalAnd) (arguments ( (argument (singleExpression (literal (bigintLiteral 1n)))) , (argument (singleExpression (literal (bigintLiteral 10n)))) )))) , (argument (singleExpression (literal (bigintLiteral 10n)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression logicalAnd) (arguments ( (argument (singleExpression (literal (bigintLiteral 1n)))) , (argument (singleExpression (literal (bigintLiteral 1n)))) )))) , (argument (singleExpression (literal (bigintLiteral 1n)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression logicalAnd) (arguments ( (argument (singleExpression (literal (bigintLiteral 1n)))) , (argument (singleExpression (literal (bigintLiteral 0n)))) )))) , (argument (singleExpression (literal (bigintLiteral 0n)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression logicalAnd) (arguments ( (argument (singleExpression (literal (bigintLiteral 1n)))) , (argument (singleExpression - (singleExpression (literal (bigintLiteral 1n))))) )))) , (argument (singleExpression - (singleExpression (literal (bigintLiteral 1n))))) )))) (eos ;)))) })))) <EOF>)