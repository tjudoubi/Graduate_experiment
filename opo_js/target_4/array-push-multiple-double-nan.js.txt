(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable val1)) , (formalParameterArg (assignable val2)) , (formalParameterArg (assignable val3))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression val1)) , (argument (singleExpression val2)) , (argument (singleExpression val3)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (literal (numericLiteral 3.3))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (singleExpression (literal (numericLiteral 1e5))) - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression NaN))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( (argument (singleExpression array)) , (argument (singleExpression (literal (numericLiteral 1.1)))) , (argument (singleExpression (literal (numericLiteral 2.2)))) , (argument (singleExpression value)) )))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 1.1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 2.2)))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression (singleExpression (literal (numericLiteral 1e5))) - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName isNaN)) (arguments ( (argument (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 3.3)))) )))) (eos ;)))))) })))))) <EOF>)