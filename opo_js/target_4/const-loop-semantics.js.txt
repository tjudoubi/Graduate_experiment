(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function truth ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression truth)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "broke assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldThrowInvalidConstAssignment ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName name)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "TypeError"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1))))) && (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName message)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "readonly"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1))))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression threw)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression shouldThrowInvalidConstAssignment)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable NUM_LOOPS) = (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 40)))) , (propertyAssignment (propertyName (identifierName c)) : (singleExpression (literal (numericLiteral 50)))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable props) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable p))) in (expressionSequence (singleExpression obj)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression props) . (identifierName push)) (arguments ( (argument (singleExpression p)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression props) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable p))) of (expressionSequence (singleExpression props)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression ! (singleExpression (singleExpression obj) [ (expressionSequence (singleExpression p)) ])))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression props) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "a"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression props) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "b"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression props) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "c"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable funcs) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression funcs) . (identifierName push)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression item)) (eos ;)))))) }))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression funcs) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression funcs)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) (arguments ( ))) === (singleExpression i))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable funcs) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName c)) : (singleExpression (literal (numericLiteral 3)))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable p))) in (expressionSequence (singleExpression obj)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression funcs) . (identifierName push)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression p)) (eos ;)))))) }))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression funcs) . (identifierName length)) === (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression funcs)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression obj) [ (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) ]) === (singleExpression i))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function taz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable item) = (singleExpression (literal (numericLiteral 20))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression item) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function jaz ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 40))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression x) === (singleExpression (literal (numericLiteral 40))))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression taz) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression jaz) (arguments ( )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression item) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "item = 20"))) )))) eos))))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable p))) in (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 40)))) }))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function taz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable p))) in (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 40)))) }))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "p = 20"))) )))) eos))))))) }))) (sourceElement (statement (functionDeclaration function jaz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression x) ++)) ) (statement (block { }))))))) }))) (sourceElement (statement (functionDeclaration function raz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression x))) ) (statement (block { }))))))) }))) (sourceElement (statement (functionDeclaration function paz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression x) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) eos))) }))))))) }))) (sourceElement (statement (functionDeclaration function maz ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression ++ (singleExpression x))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) eos))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression NUM_LOOPS))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression bar)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression baz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression taz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression jaz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression raz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression paz)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowInvalidConstAssignment) (arguments ( (argument (singleExpression maz)) )))) (eos ;)))) }))))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)