(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function factorial ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function aux ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression factorial) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression n) * (singleExpression (singleExpression aux) (arguments ( (argument (singleExpression n)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function factorial2 ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function aux2 ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression factorial2) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function id ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression n)) (eos ;)))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression id) (arguments ( (argument (singleExpression (singleExpression n) * (singleExpression (singleExpression aux2) (arguments ( (argument (singleExpression n)) ))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function factorial3 ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function aux3 ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable acc))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression acc)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression aux3) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression n) * (singleExpression acc))) )))) (eos ;)))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression n) * (singleExpression (singleExpression aux3) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function factorial4 ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable acc))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function aux4 ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable acc))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression acc)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression factorial4) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression n) * (singleExpression acc))) )))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression acc)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression aux4) (arguments ( (argument (singleExpression n)) , (argument (singleExpression acc)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression aux4) (arguments ( (argument (singleExpression n)) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression a) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal (numericLiteral 2))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression b) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression a)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression b) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 43)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function auxBar ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression auxBar) (arguments ( (argument (singleExpression (singleExpression a) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression (literal (numericLiteral 2))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression auxBar) (arguments ( (argument (singleExpression (singleExpression b) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression a)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression auxBar) (arguments ( (argument (singleExpression (singleExpression b) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 43)))) )))) (eos ;)))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression auxBar) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong result for ")) + (singleExpression name)) + (singleExpression (literal ": "))) + (singleExpression result)) + (singleExpression (literal " instead of "))) + (singleExpression expected))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression factorial) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal (numericLiteral 2432902008176640000)))) , (argument (singleExpression (literal "factorial"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression factorial2) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal (numericLiteral 2432902008176640000)))) , (argument (singleExpression (literal "factorial2"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression factorial3) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal (numericLiteral 2432902008176640000)))) , (argument (singleExpression (literal "factorial3"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression factorial4) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal (numericLiteral 2432902008176640000)))) , (argument (singleExpression (literal "factorial4"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal "foo"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression (literal (numericLiteral 10)))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal "bar"))) )))) (eos ;)))) })))))) <EOF>)