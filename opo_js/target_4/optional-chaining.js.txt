(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `expected ${expected} but got ${actual}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected SyntaxError!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowTypeError ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable messagePrefix))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression TypeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected TypeError!'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression (singleExpression error) . (identifierName message)) . (identifierName startsWith)) (arguments ( (argument (singleExpression messagePrefix)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'TypeError has wrong message!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable masquerader) = (singleExpression (singleExpression makeMasquerader) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression masquerader) . (identifierName foo)) = (singleExpression (literal (numericLiteral 3))))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBasicSuccessCases) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression undefined) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression undefined)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal null)) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression undefined)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal true)) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal false)) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 1))) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal '')) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression (literal ''))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'hi')) ? . (identifierName valueOf)) (arguments ( )))) , (argument (singleExpression (literal 'hi'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { }))) )) ? . (identifierName constructor))) , (argument (singleExpression Object)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal 'hi'))) }))) )) ? . (identifierName x))) , (argument (singleExpression (literal 'hi'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (arrayLiteral [ elementList ])) ? . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'hi')))) ])) ? . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression masquerader) ? . (identifierName foo))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression undefined) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression undefined)) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal null)) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression undefined)) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal true)) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression (literal true))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal false)) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression (literal false))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 0))) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression (literal (numericLiteral 0)))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression (literal (numericLiteral 1)))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal '')) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression (literal ''))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal 'hi')) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'valueOf'))) ]) (arguments ( ))) , (singleExpression (literal 'hi'))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { }))) )) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'constructor'))) ]) , (singleExpression Object)) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal 'hi'))) }))) )) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'x'))) ]) , (singleExpression (literal 'hi'))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (arrayLiteral [ elementList ])) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'length'))) ]) , (singleExpression (literal (numericLiteral 0)))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'hi')))) ])) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) , (singleExpression (literal 'hi'))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression masquerader) ? .)) <missing ')'>) [ (expressionSequence (singleExpression (literal 'foo'))) ]) , (singleExpression (literal (numericLiteral 3)))) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression undefined) ? .)) ( )) , (singleExpression undefined)) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal null)) ? .)) ( )) , (singleExpression undefined)) (eos )))) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal (numericLiteral 3))))))) )) ? .)) ( )) , (singleExpression (literal (numericLiteral 3)))) (eos )))) (statement (emptyStatement ;))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testBasicSuccessCases)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBasicFailureCases) (arguments ( )))) eos))) (sourceElement statement) (sourceElement (statement {)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal true))))) ? .)) ( )) , (singleExpression (literal 'true is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal false))))) ? .)) ( )) , (singleExpression (literal 'false is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal (numericLiteral 0)))))) ? .)) ( )) , (singleExpression (literal '0 is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal (numericLiteral 1)))))) ? .)) ( )) , (singleExpression (literal '1 is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal ''))))) ? .)) ( )) , (singleExpression (literal '\'\' is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal 'hi'))))) ? .)) ( )) , (singleExpression (literal '\'hi\' is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression ( (expressionSequence (singleExpression (objectLiteral { }))) ))))) ? .)) ( )) , (singleExpression (literal '({}) is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression ( (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal 'hi'))) }))) ))))) ? .)) ( )) , (singleExpression (literal '({ x: \'hi\' }) is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (arrayLiteral [ elementList ]))))) ? .)) ( )) , (singleExpression (literal '[] is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'hi')))) ]))))) ? .)) ( )) , (singleExpression (literal '[\'hi\'] is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldThrowTypeError)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression masquerader)))) ? .)) ( )) , (singleExpression (literal 'masquerader is not a function'))) (eos ))))) (sourceElement (statement (emptyStatement ;)))) } noInline ( testBasicFailureCases ) ; for ( let i = 0 ; i < 1e5 ; i ++ ) testBasicSuccessCases ( ) ; for ( let i = 0 ; i < 100 ; i ++ ) testBasicFailureCases ( ) ; shouldThrowTypeError ( ( ) => ( { } ) ? . i ( ) , '({})?.i is not a function' ) ; shouldBe ( ( { } ) . i ? . ( ) , undefined ) ; shouldBe ( ( { } ) ? . i ? . ( ) , undefined ) ; shouldThrowTypeError ( ( ) => ( { } ) ? . [ 'i' ] ( ) , '({})?.[\'i\'] is not a function' ) ; shouldBe ( ( { } ) [ 'i' ] ? . ( ) , undefined ) ; shouldBe ( ( { } ) ? . [ 'i' ] ? . ( ) , undefined ) ; shouldThrowTypeError ( ( ) => ( { } ) ? . a [ 'b' ] , 'undefined is not an object' ) ; shouldBe ( ( { } ) ? . a ? . [ 'b' ] , undefined ) ; shouldBe ( null ? . a [ 'b' ] ( ) . c , undefined ) ; shouldThrowTypeError ( ( ) => ( { } ) ? . [ 'a' ] . b , 'undefined is not an object' ) ; shouldBe ( ( { } ) ? . [ 'a' ] ? . b , undefined ) ; shouldBe ( null ? . [ 'a' ] . b ( ) [ 'c' ] , undefined ) ; shouldThrowTypeError ( ( ) => ( ( ) => { } ) ? . ( ) ( ) , '(() => {})?.() is not a function' ) ; shouldBe ( ( ( ) => { } ) ? . ( ) ? . ( ) , undefined ) ; shouldBe ( null ? . ( ) ( ) . a [ 'b' ] , undefined ) ; const o0 = { a : { b ( ) { return this . _b . bind ( this ) ; } , _b ( ) { return this . __b ; } , __b : { c : 42 } } } ; shouldBe ( o0 ? . a ? . [ 'b' ] ? . ( ) ? . ( ) ? . c , 42 ) ; shouldBe ( o0 ? . i ? . [ 'j' ] ? . ( ) ? . ( ) ? . k , undefined ) ; shouldBe ( ( o0 . a ? . _b ) ? . ( ) . c , 42 ) ; shouldBe ( ( o0 . a ? . _b ) ( ) . c , 42 ) ; shouldBe ( ( { undefined : 3 } ) ? . [ null ? . a ] , 3 ) ; shouldBe ( ( ( ) => 3 ) ? . ( null ? . a ) , 3 ) ; const o1 = { count : 0 , get x ( ) { this . count ++ ; return ( ) => { } ; } } ; o1 . x ? . y ; shouldBe ( o1 . count , 1 ) ; o1 . x ? . [ 'y' ] ; shouldBe ( o1 . count , 2 ) ; o1 . x ? . ( ) ; shouldBe ( o1 . count , 3 ) ; null ? . ( o1 . x ) ; shouldBe ( o1 . count , 3 ) ; shouldBe ( delete undefined ? . foo , true ) ; shouldBe ( delete null ? . foo , true ) ; shouldBe ( delete undefined ? . [ 'foo' ] , true ) ; shouldBe ( delete null ? . [ 'foo' ] , true ) ; shouldBe ( delete undefined ? . ( ) , true ) ; shouldBe ( delete null ? . ( ) , true ) ; const o2 = { x : 0 , y : 0 , z ( ) { } } ; shouldBe ( delete o2 ? . x , true ) ; shouldBe ( o2 . x , undefined ) ; shouldBe ( delete o2 ? . x , true ) ; shouldBe ( delete o2 ? . [ 'y' ] , true ) ; shouldBe ( o2 . y , undefined ) ; shouldBe ( delete o2 ? . [ 'y' ] , true ) ; shouldBe ( delete o2 . z ? . ( ) , true ) ; function greet ( name ) { return `hey, ${name}${this.suffix ?? '.'}` ; } shouldBe ( eval ? . ( 'greet("world")' ) , 'hey, world.' ) ; shouldBe ( greet ? . call ( { suffix : '!' } , 'world' ) , 'hey, world!' ) ; shouldBe ( greet . call ? . ( { suffix : '!' } , 'world' ) , 'hey, world!' ) ; shouldBe ( null ? . call ( { suffix : '!' } , 'world' ) , undefined ) ; shouldBe ( ( { } ) . call ? . ( { suffix : '!' } , 'world' ) , undefined ) ; shouldBe ( greet ? . apply ( { suffix : '?' } , [ 'world' ] ) , 'hey, world?' ) ; shouldBe ( greet . apply ? . ( { suffix : '?' } , [ 'world' ] ) , 'hey, world?' ) ; shouldBe ( null ? . apply ( { suffix : '?' } , [ 'world' ] ) , undefined ) ; shouldBe ( ( { } ) . apply ? . ( { suffix : '?' } , [ 'world' ] ) , undefined ) ; shouldThrowSyntaxError ( 'class C {} class D extends C { foo() { return super?.bar; } }' ) ; shouldThrowSyntaxError ( 'class C {} class D extends C { foo() { return super?.["bar"]; } }' ) ; shouldThrowSyntaxError ( 'class C {} class D extends C { constructor() { super?.(); } }' ) ; shouldThrowSyntaxError ( 'const o = { C: class {} }; new o?.C();' ) shouldThrowSyntaxError ( 'const o = { C: class {} }; new o?.["C"]();' ) shouldThrowSyntaxError ( 'class C {} new C?.();' ) shouldThrowSyntaxError ( 'function foo() { new?.target; }' ) ; shouldThrowSyntaxError ( 'function tag() {} tag?.``;' ) ; shouldThrowSyntaxError ( 'const o = { tag() {} }; o?.tag``;' ) ; shouldBe ( false ? .4 : 5 , 5 ) ;)