(program (sourceElements (sourceElement (statement (classDeclaration class MyNumber (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _v)) = (singleExpression v))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName plusOne)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _v)) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression (singleExpression MyNumber) . (identifierName plusOne))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bogus) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression count) ++)) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression count) % (singleExpression (literal (numericLiteral 100))))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fullGC) (arguments ( )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression MyNumber) (arguments ( (argument (singleExpression count)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable index)) , (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression arg) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) ])))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression arg) . (identifierName length)) > (singleExpression (literal (numericLiteral 1))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (singleExpression bar) (arguments ( ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 50000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression i))) ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression i)) , (argument (singleExpression a)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression count) % (singleExpression (literal (numericLiteral 100))))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression edenGC) (arguments ( )))) (eos ;))))) (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 100))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bogus) = (singleExpression new (singleExpression (singleExpression MyNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression count) + (singleExpression (literal (numericLiteral 1))))) )) != (singleExpression (singleExpression (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) . (identifierName plusOne)) (arguments ( ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression ( (expressionSequence (singleExpression (literal "Wrong value for count"))) ))) (eos ;)))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)