(program (sourceElements (sourceElement (statement (functionDeclaration function shouldEqual ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) != (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "ERROR: expect ")) + (singleExpression expected)) + (singleExpression (literal ", actual "))) + (singleExpression actual))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName length)) = (singleExpression (literal (numericLiteral 0x1fff00))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression (singleExpression a) . (identifierName splice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0x100000)))) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable args) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName length)) = (singleExpression (literal (numericLiteral 4094))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName fill)) (arguments ( (argument (singleExpression b)) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable q) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression q) . (identifierName length)) = (singleExpression (literal (numericLiteral 0x1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression q) . (identifierName fill)) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression a) . (identifierName splice)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xfffef)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression (literal (numericLiteral 4094)))) ]) = (singleExpression c))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression (literal (numericLiteral 4095)))) ]) = (singleExpression q))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName concat)) . (identifierName apply)) (arguments ( (argument (singleExpression b)) , (argument (singleExpression args)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldEqual) (arguments ( (argument (singleExpression exception)) , (argument (singleExpression (literal "RangeError: Length exceeded the maximum array length"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)