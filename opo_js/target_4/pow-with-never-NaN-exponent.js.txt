(program (sourceElements (sourceElement (statement (functionDeclaration function exponentIsNonNanDouble1 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable doubleArrayIndex))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleArray) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 4.4))))) ])))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression (singleExpression doubleArray) [ (expressionSequence (singleExpression doubleArrayIndex)) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsNonNanDouble1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function exponentIsNonNanDouble2 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable doubleArray))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression (singleExpression doubleArray) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression exponentIsNonNanDouble2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testExponentIsDoubleConstant ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsNonNanDouble1) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 21.112126572366314))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsNonNanDouble1(2, 0) should be 21.112126572366314, was = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression exponentIsNonNanDouble2) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1.5)))))) ]))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0.19245008972987526))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: exponentIsNonNanDouble2(3, [-1.5]) should be 0.19245008972987526, was = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testExponentIsDoubleConstant) (arguments ( )))) (eos ;))))) <EOF>)