(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 30))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 20000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression j))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName unshift)) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))) }))) })))) <EOF>)