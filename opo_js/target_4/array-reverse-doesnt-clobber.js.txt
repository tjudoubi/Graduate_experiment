(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable outerArrayLength) = (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable innerArrayLength) = (singleExpression (literal (numericLiteral 128))))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArrayReverse) (arguments ( (argument (singleExpression createArray)) )))) eos))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable limit) = (singleExpression (literal (numericLiteral 5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression save) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) at =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression at) < (singleExpression limit))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression at) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (singleExpression createArray) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression v) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 273))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 8))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName reverse)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "X"))) ))) . (identifierName repeat)) (arguments ( (argument (singleExpression (literal (numericLiteral 123008)))) ))))) )))) (eos ;)))) })) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arr) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression i)) ]) . (identifierName length)) != (singleExpression innerArrayLength))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "arr[")) + (singleExpression i)) + (singleExpression (literal "].length has changed from "))) + (singleExpression innerArrayLength)) + (singleExpression (literal " to "))) + (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression i)) ]) . (identifierName length)))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression f) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))) . (identifierName fill)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x42424242)))) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression save) . (identifierName push)) (arguments ( (argument (singleExpression arr)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression save) . (identifierName push)) (arguments ( (argument (singleExpression v)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression save) . (identifierName push)) (arguments ( (argument (singleExpression f)) )))) (eos ;)))) }))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression createArrayOfArrays) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression outerArrayLength)) )))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression result) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression i)) ]) = (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression innerArrayLength)) ))) . (identifierName fill)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x41414141)))) )))))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable alt) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function createArrayStorage ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression createArrayOfArrays) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression ensureArrayStorage)) === (singleExpression undefined))) ))) && (singleExpression (singleExpression (singleExpression alt) ++) % (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ensureArrayStorage) (arguments ( (argument (singleExpression result)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArrayReverse) (arguments ( (argument (singleExpression createArrayOfArrays)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArrayReverse) (arguments ( (argument (singleExpression createArrayStorage)) )))) (eos ;))))) <EOF>)