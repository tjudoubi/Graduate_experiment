(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression platformSupportsSamplingProfiler) (arguments ( )))) ) statement))) (sourceElement (statement {)) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression obj) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal 'p')))) ]) = (singleExpression i))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression stacktraces) = (singleExpression (singleExpression samplingProfilerStackTraces) (arguments ( ))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) stackTrace)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression stacktraces)) (eos )))) (statement (block { }))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startSamplingProfiler) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName displayName)) = (singleExpression (literal '"')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) } <EOF>)