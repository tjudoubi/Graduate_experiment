(program (sourceElements (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression this) . (identifierName WebAssembly)))) ) (statement (returnStatement return (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bigArray) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 0x7000000)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression bigArray) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 1.1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression bigArray) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 1.2))))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable index) = (singleExpression (singleExpression array) . (identifierName length)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression index) >= (singleExpression (singleExpression bigArray) . (identifierName length))) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression index) - (singleExpression (literal (numericLiteral 0x1ffdc01))))) )) < (singleExpression (literal (numericLiteral 0)))))) ) (statement (returnStatement return (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bigArray) [ (expressionSequence (singleExpression (singleExpression index) - (singleExpression (literal (numericLiteral 0x1ffdc01))))) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable okArray) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression (literal (numericLiteral 0x1ffdc02)))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression okArray)) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ok) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable memory) = (singleExpression new (singleExpression (singleExpression (singleExpression WebAssembly) . (identifierName Memory)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName initial)) : (singleExpression (literal (numericLiteral 0x1000)))) }))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression memory) . (identifierName grow)) (arguments ( (argument (singleExpression (literal (numericLiteral 0x7000)))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression (singleExpression memory) . (identifierName buffer))) ))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result at end: ")) + (singleExpression result))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ok) = (singleExpression (literal true)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ok)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: did not throw error"))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)