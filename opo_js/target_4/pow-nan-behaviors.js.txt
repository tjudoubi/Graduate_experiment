(program (sourceElements (sourceElement (statement (functionDeclaration function testIntegerBaseWithNaNExponentStatic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (literal (numericLiteral 5))) ** (singleExpression NaN)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, 5 ** NaN = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression i) ** (singleExpression NaN)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, i ** NaN = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testIntegerBaseWithNaNExponentStatic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerBaseWithNaNExponentStatic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowIntegerBaseWithNaNExponentDynamic ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowIntegerBaseWithNaNExponentDynamic)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntegerBaseWithNaNExponentDynamic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowIntegerBaseWithNaNExponentDynamic) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 32))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowIntegerBaseWithNaNExponentDynamic(2, 5) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 32.")))) eos))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowIntegerBaseWithNaNExponentDynamic) (arguments ( (argument (singleExpression i)) , (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowIntegerBaseWithNaNExponentDynamic(i, NaN) = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testIntegerBaseWithNaNExponentDynamic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntegerBaseWithNaNExponentDynamic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testFloatingPointBaseWithNaNExponentStatic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (literal (numericLiteral 5.5))) ** (singleExpression NaN)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, 5.5 ** NaN = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) )) ** (singleExpression NaN)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, (i + 0.5) ** NaN = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testFloatingPointBaseWithNaNExponentStatic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFloatingPointBaseWithNaNExponentStatic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowFloatingPointBaseWithNaNExponentDynamic ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowFloatingPointBaseWithNaNExponentDynamic)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testFloatingPointBaseWithNaNExponentDynamic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowFloatingPointBaseWithNaNExponentDynamic) (arguments ( (argument (singleExpression (literal (numericLiteral 2.5)))) , (argument (singleExpression (literal (numericLiteral 5.1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 107.02717054543135))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowFloatingPointBaseWithNaNExponentDynamic(2.5, 5.1) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 107.02717054543135.")))) eos))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowFloatingPointBaseWithNaNExponentDynamic) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5))))) , (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowFloatingPointBaseWithNaNExponentDynamic(i + 0.5, NaN) = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testFloatingPointBaseWithNaNExponentDynamic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFloatingPointBaseWithNaNExponentDynamic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testNaNBaseStatic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression NaN) ** (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, NaN ** (i + 1) = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression NaN) ** (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1.5))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, NaN ** (i + 1.5) = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression NaN) ** (singleExpression (literal (numericLiteral 0)))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, NaN ** 0 = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression NaN) ** (singleExpression - (singleExpression (literal (numericLiteral 0))))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, NaN ** -0 = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testNaNBaseStatic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testNaNBaseStatic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowNaNBaseDynamic1 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowNaNBaseDynamic2 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowNaNBaseDynamic3 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowNaNBaseDynamic4 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowNaNBaseDynamic1)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowNaNBaseDynamic2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowNaNBaseDynamic3)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowNaNBaseDynamic4)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testNaNBaseDynamic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowNaNBaseDynamic1) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowNaNBaseDynamic1(NaN, i + 1) = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowNaNBaseDynamic2) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1.5))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowNaNBaseDynamic2(NaN, i + 1.5) = ")) + (singleExpression result)) + (singleExpression (literal " with i = "))) + (singleExpression i))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowNaNBaseDynamic3) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, mathPowNaNBaseDynamic3(NaN, 0) = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowNaNBaseDynamic4) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, mathPowNaNBaseDynamic4(NaN, -0) = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testNaNBaseDynamic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testNaNBaseDynamic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function infiniteExponentsStatic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (literal (numericLiteral 1))) ** (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, 1 ** Number.POSITIVE_INFINITY = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) ** (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, -1 ** Number.POSITIVE_INFINITY = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (literal (numericLiteral 1))) ** (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, 1 ** Number.NEGATIVE_INFINITY = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) ** (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, -1 ** Number.NEGATIVE_INFINITY = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression infiniteExponentsStatic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression infiniteExponentsStatic) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowInfiniteExponentsDynamic1 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowInfiniteExponentsDynamic2 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowInfiniteExponentsDynamic3 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowInfiniteExponentsDynamic4 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ** (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowInfiniteExponentsDynamic1)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowInfiniteExponentsDynamic2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowInfiniteExponentsDynamic3)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowInfiniteExponentsDynamic4)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function infiniteExponentsDynamic ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowInfiniteExponentsDynamic1) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, mathPowInfiniteExponentsDynamic1(1, Number.POSITIVE_INFINITY) = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowInfiniteExponentsDynamic2) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, mathPowInfiniteExponentsDynamic2(-1, Number.POSITIVE_INFINITY) = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowInfiniteExponentsDynamic3) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, mathPowInfiniteExponentsDynamic3(1, Number.NEGATIVE_INFINITY) = ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowInfiniteExponentsDynamic4) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result, mathPowInfiniteExponentsDynamic4(-1, Number.NEGATIVE_INFINITY) = ")) + (singleExpression result))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression infiniteExponentsDynamic)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression infiniteExponentsDynamic) (arguments ( )))) (eos ;))))) <EOF>)