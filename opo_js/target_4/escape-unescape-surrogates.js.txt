(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function toHighSurrogate ( (formalParameterList (formalParameterArg (assignable code))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression code) >> (singleExpression (literal (numericLiteral 10))))) )) + (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 0xD800))) - (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 0x10000))) >> (singleExpression (literal (numericLiteral 10))))) )))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function toLowSurrogate ( (formalParameterList (formalParameterArg (assignable code))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression code) & (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression (literal (numericLiteral 10))))) )) - (singleExpression (literal (numericLiteral 1))))) )))) )) + (singleExpression (literal (numericLiteral 0xDC00))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0x10000))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 0x10ffff))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable high) = (singleExpression (singleExpression toHighSurrogate) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable low) = (singleExpression (singleExpression toLowSurrogate) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable str) = (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression high)) , (argument (singleExpression low)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression unescape) (arguments ( (argument (singleExpression (singleExpression escape) (arguments ( (argument (singleExpression str)) )))) )))) , (argument (singleExpression str)) )))) (eos ;)))) })))))) <EOF>)