(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable val) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 5)))) , (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 10)))) })))) eos))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable obj)) , (formalParameterArg (assignable val)) , (formalParameterArg (assignable j)) , (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable z))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression obj) . (identifierName a)) = (singleExpression (singleExpression val) . (identifierName a)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression val) . (identifierName b))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression val) . (identifierName b)) ++)) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function runTest ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 50))))) ; (expressionSequence (singleExpression (singleExpression j) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable objs) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numberOfObjects) = (singleExpression (literal (numericLiteral 200))))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable k) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression k) < (singleExpression numberOfObjects))) ; (expressionSequence (singleExpression (singleExpression k) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable numInitialProps) = (singleExpression (singleExpression j) % (singleExpression (literal (numericLiteral 20)))))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numInitialProps))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression obj) [ (expressionSequence (singleExpression (singleExpression (literal "i")) + (singleExpression i))) ]) = (singleExpression i))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression objs) [ (expressionSequence (singleExpression k)) ]) = (singleExpression obj))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable k) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression k) < (singleExpression numberOfObjects))) ; (expressionSequence (singleExpression (singleExpression k) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression k) % (singleExpression (literal (numericLiteral 97)))) == (singleExpression (literal (numericLiteral 1)))) && (singleExpression (singleExpression (singleExpression j) % (singleExpression (literal (numericLiteral 5)))) == (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression objs) [ (expressionSequence (singleExpression k)) ])) , (argument (singleExpression val)) , (argument (singleExpression j)) )))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression runTest)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( )))) (eos ;))))) <EOF>)