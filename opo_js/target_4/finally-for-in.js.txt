(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression repeat) (arguments ( (argument (singleExpression count)) , (argument (singleExpression thunk)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal "")))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression count))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression thunk) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression createSimple) (arguments ( (argument (singleExpression outerDepth)) , (argument (singleExpression innerDepth)) , (argument (singleExpression returnDepth)) )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression Function)) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (literal `        return (function(arg) {            ${repeat(outerDepth, (i) => `))) <missing ')'>) for) eos)) (statement (expressionStatement (expressionSequence singleExpression () (eos let))) (statement (expressionStatement (expressionSequence (singleExpression a$)) eos)) statement (statement {) (statement (expressionStatement (expressionSequence (singleExpression i)) eos))) })))) in arg ) ` + "{\n" )}            try {                ${repeat(innerDepth, (i) => ` for ( let b$ { i } in arg ) ` + "{\n" )}                return {};                ${repeat(innerDepth, () => "}")}            }            finally { return a${returnDepth}}            ${repeat(outerDepth, () => "}")}        })        ` ) ( ) ; } function test ( result , argument , ... args ) { let f = createSimple ( ... args ) ; let r = f ( argument ) ; if ( r !== result ) { throw new Error ( r ) ; } } test ( "0" , [ 1 , 2 ] , 1 , 1 , 0 ) ; test ( "0" , [ 1 , 2 ] , 2 , 1 , 0 ) ; test ( "0" , [ 1 , 2 ] , 2 , 4 , 1 ) ; test ( "0" , [ 1 , 2 ] , 1 , 0 , 0 ) ;)