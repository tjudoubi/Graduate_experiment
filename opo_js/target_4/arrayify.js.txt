(program (sourceElements (sourceElement (statement (functionDeclaration function arrayifyInt32 ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arrayifyInt32)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function arrayifyDouble ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 42.195))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arrayifyDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function arrayifyContiguous ( (formalParameterList (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal true)))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression arrayifyContiguous)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'Cocoa'))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cappuccino) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'Cappuccino'))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayifyInt32) (arguments ( (argument (singleExpression cocoa)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayifyInt32) (arguments ( (argument (singleExpression cappuccino)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'Cocoa'))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cappuccino) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'Cappuccino'))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayifyDouble) (arguments ( (argument (singleExpression cocoa)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayifyDouble) (arguments ( (argument (singleExpression cappuccino)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'Cocoa'))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cappuccino) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'Cappuccino'))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayifyContiguous) (arguments ( (argument (singleExpression cocoa)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayifyContiguous) (arguments ( (argument (singleExpression cappuccino)) )))) (eos ;)))) })))))) <EOF>)