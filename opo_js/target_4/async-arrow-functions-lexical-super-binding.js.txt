(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression msg) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (literal "")))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeAsync ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable run)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression hadError)) ) (statement (throwStatement throw (expressionSequence (singleExpression actual)) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression actual)) , (argument (singleExpression msg)) )))) (eos ;)))))) }))) (sourceElement (statement (classDeclaration class BaseClass (classTail { (classElement (methodDefinition (propertyName (identifierName baseClassValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "BaseClassValue"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName property))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "test!"))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class ChildClass (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName asyncSuperProp)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName baseClassValue)) (arguments ( ))))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncSuperProp2)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName baseClassValue)) (arguments ( )))) (eos ;)))))) })))) eos))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "BaseClassValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncSuperProp)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "BaseClassValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncSuperProp2)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class ChildClass2 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable self) = (singleExpression (singleExpression super) (arguments ( ))))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression self) . (identifierName baseClassValue)) (arguments ( ))) + (singleExpression (literal ' '))) + (singleExpression (singleExpression super) . (identifierName property))))))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression (literal "BaseClassValue test!"))) , (argument (singleExpression new (singleExpression (singleExpression ChildClass2) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (classDeclaration class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _id)) = (singleExpression (literal 'class-id')))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable childA1) = (singleExpression new (singleExpression class (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (singleExpression super) (arguments ( ))))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'abc'))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression f) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters val) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression val))) (eos ;)))))) })))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters err) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression err))) (eos ;)))))) })))) )))) (eos ;)))))) })) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression childA1) . (identifierName _id))) , (argument (singleExpression (literal 'class-id'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression (literal 'abc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression error)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable childA2) = (singleExpression new (singleExpression class (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'abc'))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression f) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters val) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression val))) (eos ;)))))) })))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters err) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression err))) (eos ;)))))) })))) )))) (eos ;)))))) })) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression childA2) . (identifierName _id))) , (argument (singleExpression (literal 'class-id'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression (literal 'abc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression error)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable childA3) = (singleExpression new (singleExpression class (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (singleExpression super) (arguments ( ))))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'abc'))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression f) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters val) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression val))) (eos ;)))))) })))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters err) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression err))) (eos ;)))))) })))) )))) (eos ;)))))) })) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression childA3) . (identifierName _id))) , (argument (singleExpression (literal 'class-id'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal 'ReferenceError: \'super()\' can\'t be called more than once in a constructor.'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression childA4)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression catchError)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression childA4) = (singleExpression new (singleExpression class (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'await value')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'abc'))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression f) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters val) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression val))) (eos ;)))))) })))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters err) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression err))) (eos ;)))))) })))) )))) (eos ;)))))) })) }))))) eos))) }) (catchProduction catch ( (assignable err) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression catchError) = (singleExpression err))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression childA4)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression (literal 'abc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression error)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression catchError) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal 'ReferenceError: Cannot access uninitialized variable.'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression catchError) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable childA5) = (singleExpression new (singleExpression class (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'await value')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'abc'))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression f) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters val) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression val))) (eos ;)))))) })))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters err) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression err))) (eos ;)))))) })))) )))) (eos ;)))))) })) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression childA5) . (identifierName _id))) , (argument (singleExpression (literal 'class-id'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression (literal 'abc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression error)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression catchError)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function checkClass ( (formalParameterList (formalParameterArg (assignable classSource))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression base1) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression catchError) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression base1) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression classSource)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable err) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression catchError) = (singleExpression err))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression base1)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression error)) , (argument (singleExpression undefined)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression catchError) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal 'SyntaxError: super is not valid in this context.'))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkClass) (arguments ( (argument (singleExpression (literal `new class {    constructor() {        var f = async (a) => { super(); return 'abc'; }        f().then(val => { value = val; }, err => { error = err; });    }}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkClass) (arguments ( (argument (singleExpression (literal `new class {    constructor() {        var f = async (a) => { await 'p'; super(); return 'abc'; }        f().then(val => { value = val; }, err => { error = err; });    }}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkClass) (arguments ( (argument (singleExpression (literal `new class {    constructor() {        var f = async (a) => { super(); await 'p'; return 'abc'; }        f().then(val => { value = val; }, err => { error = err; });    }}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkClass) (arguments ( (argument (singleExpression (literal `new class extends A {    method() {        var f = async (a) => { super(); return 'abc'; }        f().then(val => { value = val; }, err => { error = err; });    }}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkClass) (arguments ( (argument (singleExpression (literal `new class extends A {    get prop() {        var f = async (a) => { super(); return 'abc'; }        f().then(val => { value = val; }, err => { error = err; });    }}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkClass) (arguments ( (argument (singleExpression (literal `new class extends A {    set prop(_value) {        var f = async (a) => { super(); return 'abc'; }        f().then(val => { value = val; }, err => { error = err; });    }}`))) )))) (eos ;))))) <EOF>)