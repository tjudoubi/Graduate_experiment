(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression platformSupportsSamplingProfiler) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./sampling-profiler/samplingProfiler.js"))) )))) (eos ;))) (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))))) })) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) eos)) statement (statement {) (statement (expressionStatement (expressionSequence (singleExpression foo)) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 5000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression i)) ]) = (singleExpression i))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) --)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) ++)) (eos ;)))) }))) })))))) ) ; } runTest ( baz , [ "(anonymous function)" , "foo" , "baz" ] ) ; })