(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression constructors) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Error)) , (arrayElement (singleExpression String)) , (arrayElement (singleExpression RegExp)) , (arrayElement (singleExpression (anoymousFunction function ( ) { functionBody }))) , (arrayElement (singleExpression class C (classTail { })))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) constructor))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression constructors)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression constructor)) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression new (singleExpression (singleExpression constructor) instanceof (singleExpression proxy)))) )))) (eos ;)))))) }))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))))) }))) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression new (singleExpression (singleExpression proxy) instanceof (singleExpression proxy)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression handler) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable target)) , (formalParameterArg (assignable prop))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression prop) === (singleExpression (literal "prototype")))) ) (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { }))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression target) [ (expressionSequence (singleExpression prop)) ])) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))))) }))) , (argument (singleExpression handler)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression proxy) instanceof (singleExpression proxy)))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression called)) )))) (eos ;)))))) }))) )))) (eos ;))))) <EOF>)