(program (sourceElements (sourceElement (statement (functionDeclaration function effects ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression effects)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression effects) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression foo) (arguments ( ))) !== (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))) })))) <EOF>)