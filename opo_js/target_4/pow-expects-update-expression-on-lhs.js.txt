(program (sourceElements (sourceElement (statement (functionDeclaration function testSyntax ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected syntax error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tokens) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '-'))) , (arrayElement (singleExpression (literal '+'))) , (arrayElement (singleExpression (literal '~'))) , (arrayElement (singleExpression (literal '!'))) , (arrayElement (singleExpression (literal 'typeof'))) , (arrayElement (singleExpression (literal 'void'))) , (arrayElement (singleExpression (literal 'delete'))) ,) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) token)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression tokens)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `        function pow(a, b)        {            return ${token} a ** b;        }        `))) , (argument (singleExpression (literal `SyntaxError: Unexpected token '**'. Ambiguous unary expression in the left hand side of the exponentiation expression; parentheses must be used to disambiguate the expression.`))) )))) (eos ;)))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tokens) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '-'))) , (arrayElement (singleExpression (literal '+'))) , (arrayElement (singleExpression (literal '~'))) , (arrayElement (singleExpression (literal '!'))) , (arrayElement (singleExpression (literal 'typeof'))) , (arrayElement (singleExpression (literal 'void'))) , (arrayElement (singleExpression (literal 'delete'))) ,) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) token)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression tokens)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `        function pow(a, b)        {            return (${token} a) ** b;        }        `))) )))) (eos ;)))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tokens) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '++'))) , (arrayElement (singleExpression (literal '--'))) ,) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) token)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression tokens)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `        function pow(a, b)        {            return ${token} a ** b;        }        `))) )))) (eos ;)))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tokens) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal '++'))) , (arrayElement (singleExpression (literal '--'))) ,) ])))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) token)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression tokens)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `        function pow(a, b)        {            return a ${token} ** b;        }        `))) )))) (eos ;)))) }))) })))) <EOF>)