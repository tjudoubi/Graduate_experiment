(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression msg)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable AsyncFunctionPrototype) = (singleExpression (singleExpression (anoymousFunction async function ( ) { functionBody })) . (identifierName __proto__)))) (eos ;)))) (sourceElement (statement (functionDeclaration function call ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) = (singleExpression (literal (numericLiteral 3))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression call)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function sink ( (formalParameterList (formalParameterArg (assignable p)) , (formalParameterArg (assignable q))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function f ( ) { functionBody })))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression p)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression call) (arguments ( (argument (singleExpression f)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression q)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression OSRExit) (arguments ( )))) (eos ;)))) })))) (statement (returnStatement return (expressionSequence (singleExpression f)) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName 'x') : (singleExpression (literal (numericLiteral 2)))) }))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression sink)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (singleExpression sink) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression o) . (identifierName __proto__))) , (argument (singleExpression AsyncFunctionPrototype)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) != (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: expected o.x to be 2 but is ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (singleExpression sink) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression f) . (identifierName __proto__))) , (argument (singleExpression AsyncFunctionPrototype)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression f) . (identifierName x)) != (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: expected o.x to be 3 but is ")) + (singleExpression result))) (eos ;))))))) <EOF>)