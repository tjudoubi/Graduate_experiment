(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable strings) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression (literal "Cappuccino"))) , (arrayElement (singleExpression (literal "Matcha"))) , (arrayElement (singleExpression (literal "Cocoa\u0080"))) , (arrayElement (singleExpression (literal "ð ®·é‡Žå®¶"))) , (arrayElement (singleExpression (literal "ðŸ“±"))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) lhs))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression strings)) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) rhs)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression strings)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expected) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression $vm) . (identifierName make16BitStringIfPossible)) (arguments ( (argument (singleExpression lhs)) ))) . (identifierName localeCompare)) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName make16BitStringIfPossible)) (arguments ( (argument (singleExpression rhs)) )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression lhs) . (identifierName localeCompare)) (arguments ( (argument (singleExpression rhs)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected)) )))) (eos ;)))) }))) })))) <EOF>)