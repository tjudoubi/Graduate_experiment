(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assert) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error in assert. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but was "'))) + (singleExpression result)) + (singleExpression (literal '":'))) + (singleExpression message))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable Logger) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable type)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable done))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (singleExpression type)) , (propertyAssignment (singleExpression value)) , (propertyAssignment (singleExpression done)) }))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logFulfilledEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable done))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression value)) , (argument (singleExpression done)) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logRejectEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'reject'))) , (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logCatchEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters value) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'catch'))) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName getLogger)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression log)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName clear)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))))) }))))) eos))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable fulfillSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters result) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logFulfilledEvent)) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName value))) , (argument (singleExpression (singleExpression result) . (identifierName done))) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable rejectSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logRejectEvent)) (arguments ( (argument (singleExpression error)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable catchSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logCatchEvent)) (arguments ( (argument (singleExpression error)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable assertLogger) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable loggerObject))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable logger) = (singleExpression (singleExpression (singleExpression loggerObject) . (identifierName getLogger)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable _assertLogger) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable isNotOutOfLength) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression index) < (singleExpression (singleExpression logger) . (identifierName length)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal `Index is greater then log length`))) )))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fullfilled)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on fulfill')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal false))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fullfilledDone)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on fulfill with done true')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName rejected)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on reject')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'reject'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName catched)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedError)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on catch')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'catch'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedError)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isFinal)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable message) = (singleExpression (literal '')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression index)) , (argument (singleExpression (singleExpression logger) . (identifierName length))) , (argument (singleExpression (literal `expected final step: ${message}`))) )))) (eos ;)))))) })))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression _assertLogger) (arguments ( ))))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable getPromise) = (singleExpression (anoymousFunction (arrowFunctionParameters promiseHolder) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Promise) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable resolve)) , (formalParameterArg (assignable reject))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) = (singleExpression resolve))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) = (singleExpression reject))) (eos ;)))))) })))) ))))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable logger) = (singleExpression new (singleExpression (singleExpression Logger) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable someValue) = (singleExpression (literal 'some-value')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable errorMessage) = (singleExpression (literal 'error-message')))) (eos ;)))) (sourceElement (statement (functionDeclaration function * foo ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression re) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal '1:')) + (singleExpression value))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression re) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal '2:')) + (singleExpression re))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression re) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal '3:')) + (singleExpression re))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal 'end foo:')) + (singleExpression re))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * boo ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reply) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal '0:')) + (singleExpression value))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reply) = (singleExpression (singleExpression yield) * (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression reply)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal '4:')) + (singleExpression reply))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal 'init'))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable errorprint) = (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression print) (arguments ( (argument (singleExpression error)) )))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression errorprint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression errorprint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal '2'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression errorprint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal '3'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression errorprint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal '4'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression errorprint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal '5'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression errorprint)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0:init'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1:1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '2:2'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '3:3'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '4:end foo:4'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b2) = (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal ':value'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':0'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':1'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':2'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':3'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':4'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0::value'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1::1'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b2) = (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal '#value'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal '#0'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal '#1'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal '#2'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal '#3'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b2) . (identifierName next)) (arguments ( (argument (singleExpression (literal '#4'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0:#value'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1:#1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '2:#2'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function * bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '1'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '2'))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'end foo'))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * baz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression (singleExpression bar) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '4'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bz1) = (singleExpression (singleExpression baz) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '2'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promiseHolder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (functionDeclaration function * joo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '1'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression promiseHolder)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * goo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal '2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '2'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '3'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) (arguments ( (argument (singleExpression (literal '#2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal '#2'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal '#2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '#2'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) (arguments ( (argument (singleExpression (literal '#2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal '#2'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression someValue)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal '#2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal '#2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '#2'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) (arguments ( (argument (singleExpression (literal '#2'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '1'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal '#2'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;))))) <EOF>)