(program (sourceElements (sourceElement (statement (functionDeclaration function dump ( (formalParameterList (formalParameterArg (assignable callSite))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression callSite)) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (singleExpression callSite) . (identifierName raw))) }))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression dump) `\newcommand{\fun}{\textbf{Fun!}}`)) , (argument (singleExpression (literal `{"cooked":["\\newcommand{\\fun}{\\textbf{Fun!}}"],"raw":["\\\\newcommand{\\\\fun}{\\\\textbf{Fun!}}"]}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression dump) `\newcommand{\unicode}{\textbf{Unicode!}}`)) , (argument (singleExpression (literal `{"cooked":[null],"raw":["\\\\newcommand{\\\\unicode}{\\\\textbf{Unicode!}}"]}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression dump) `\newcommand{\xerxes}{\textbf{King!}}`)) , (argument (singleExpression (literal `{"cooked":[null],"raw":["\\\\newcommand{\\\\xerxes}{\\\\textbf{King!}}"]}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression dump) `Breve over the h goes \u{h}ere`)) , (argument (singleExpression (literal `{"cooked":[null],"raw":["Breve over the h goes \\\\u{h}ere"]}`))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testTag ( (formalParameterList (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function tag ( (formalParameterList (formalParameterArg (assignable callSite))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression callSite) . (identifierName length))) , (argument (singleExpression (singleExpression (singleExpression expected) . (identifierName cooked)) . (identifierName length))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression callSite) . (identifierName raw)) . (identifierName length))) , (argument (singleExpression (singleExpression (singleExpression expected) . (identifierName raw)) . (identifierName length))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression expected) . (identifierName cooked)) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable index))) )) => (arrowFunctionBody (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression callSite) [ (expressionSequence (singleExpression index)) ])) , (argument (singleExpression value)) ))))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression expected) . (identifierName raw)) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable index))) )) => (arrowFunctionBody (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression callSite) . (identifierName raw)) [ (expressionSequence (singleExpression index)) ])) , (argument (singleExpression value)) ))))))) )))) (eos ;)))))) })))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\unicode and \\u{55}")))) ]))) , }))) ))) `\unicode and \u{55}`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal "test")))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\unicode and \\u{55}"))) , (arrayElement (singleExpression (literal "test")))) ]))) , }))) ))) `\unicode and \u{55}${42}test`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal "Cocoa")))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\unicode and \\u{55}"))) , (arrayElement (singleExpression (literal "\\uhello"))) , (arrayElement (singleExpression (literal "Cocoa")))) ]))) , }))) ))) `\unicode and \u{55}${42}\uhello${42}Cocoa`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal "Cocoa")))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression (literal "\\unicode and \\u{55}"))) , (arrayElement (singleExpression (literal "\\uhello"))) , (arrayElement (singleExpression (literal "Cocoa")))) ]))) , }))) ))) `Cocoa${42}\unicode and \u{55}${42}\uhello${42}Cocoa`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal "Cocoa")))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression (literal "\\unicode and \\u{55}"))) , (arrayElement (singleExpression (literal "\\uhello"))) , (arrayElement (singleExpression (literal "Cocoa")))) ]))) , }))) ))) `Cocoa${42}\unicode and \u{55}${42}\uhello${42}Cocoa`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\00"))) , (arrayElement (singleExpression (literal "\\01"))) , (arrayElement (singleExpression (literal "\\1")))) ]))) }))) ))) `\00${42}\01${42}\1`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\xo"))) , (arrayElement (singleExpression (literal "\\x0o")))) ]))) }))) ))) `\xo${42}\x0o`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\uo"))) , (arrayElement (singleExpression (literal "\\u0o"))) , (arrayElement (singleExpression (literal "\\u00o"))) , (arrayElement (singleExpression (literal "\\u000o")))) ]))) }))) ))) `\uo${42}\u0o${42}\u00o${42}\u000o`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testTag) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName cooked)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression undefined))) ]))) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "\\u{o"))) , (arrayElement (singleExpression (literal "\\u{0o"))) , (arrayElement (singleExpression (literal "\\u{110000o")))) ]))) }))) ))) `\u{o${42}\u{0o${42}\u{110000o`)) (eos ;))))) <EOF>)