(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable p) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName apply)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) }))) )))))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable item) = (singleExpression (singleExpression getItem) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression item) . (identifierName foo))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable i))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable shouldReturnBad) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable good) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) eos))))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName b)) : (singleExpression (literal (numericLiteral 20)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName c)) : (singleExpression (literal (numericLiteral 40)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName d)) : (singleExpression (literal (numericLiteral 50)))) })))) ])))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable bad) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName asdfhasf)) : (singleExpression (literal (numericLiteral 20)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName e)) : (singleExpression (literal (numericLiteral 50)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName j)) : (singleExpression (literal (numericLiteral 70)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName k)) : (singleExpression (literal (numericLiteral 100)))) }))) , (arrayElement (singleExpression (literal null)))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function getItem ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression shouldReturnBad)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bad) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (singleExpression bad) . (identifierName length)))) ])) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression good) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (singleExpression good) . (identifierName length)))) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getItem)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function start ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldReturnBad) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression start) (arguments ( )))) (eos ;))))) <EOF>)