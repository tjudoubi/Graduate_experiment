(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable otherObject) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 5.1)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable targetDFG) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 5.5)))) , (propertyAssignment (propertyName (identifierName multiply)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression arg)) == (singleExpression (literal "number")))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) = (singleExpression (singleExpression (singleExpression this) . (identifierName value)) * (singleExpression arg)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression returnValue) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression (singleExpression targetDFG) . (identifierName multiply))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 400))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression targetDFG) . (identifierName multiply)) (arguments ( (argument (singleExpression otherObject)) ))) !== (singleExpression (literal (numericLiteral 2))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed targetDFG.multiply(otherObject)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression targetDFG) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed targetDFG.multiply(Math.PI), expected ")) + (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) ))) + (singleExpression (literal " got "))) + (singleExpression result)) + (singleExpression (literal " at iteration "))) + (singleExpression i))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression targetDFG) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed targetDFG.multiply(Math.PI), expected ")) + (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) ))) + (singleExpression (literal " got "))) + (singleExpression result)) + (singleExpression (literal " at iteration "))) + (singleExpression i))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable targetFTL) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 5.5)))) , (propertyAssignment (propertyName (identifierName multiply)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression arg)) == (singleExpression (literal "number")))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnValue) = (singleExpression (singleExpression (singleExpression this) . (identifierName value)) * (singleExpression arg)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression returnValue) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression (singleExpression targetFTL) . (identifierName multiply))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 400))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression targetFTL) . (identifierName multiply)) (arguments ( (argument (singleExpression otherObject)) ))) !== (singleExpression (literal (numericLiteral 2))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed targetFTL.multiply(otherObject)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression targetFTL) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed targetFTL.multiply(Math.PI), expected ")) + (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) ))) + (singleExpression (literal " got "))) + (singleExpression result)) + (singleExpression (literal " at iteration "))) + (singleExpression i))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression targetFTL) . (identifierName multiply)) (arguments ( (argument (singleExpression otherObject)) ))) !== (singleExpression (literal (numericLiteral 2))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed targetFTL.multiply(otherObject)"))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression targetFTL) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Failed targetFTL.multiply(Math.PI), expected ")) + (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 5.5))) * (singleExpression (singleExpression Math) . (identifierName PI))) + (singleExpression (literal (numericLiteral 1))))) ))) + (singleExpression (literal " got "))) + (singleExpression result)) + (singleExpression (literal " at iteration "))) + (singleExpression i))) (eos ;)))))) })))) <EOF>)