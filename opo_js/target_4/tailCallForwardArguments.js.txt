(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable createBuiltin) = (singleExpression (singleExpression $vm) . (identifierName createBuiltin)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable putFuncToPrivateName) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (literal `(function (func) { @arrayIteratorIsDone = func })`))) ))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression putFuncToPrivateName) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) )))) eos))) (sourceElement (statement (functionDeclaration function createTailCallForwardingFuncWith ( (formalParameterList (formalParameterArg (assignable body)) , (formalParameterArg (assignable thisValue))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (literal `(function (a) {        "use strict";        ${body}        return @tailCallForwardArguments(@arrayIteratorIsDone, ${thisValue});    })`))) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "@undefined"))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fooNoInline) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "@undefined"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression baz) . (identifierName call)) (arguments ( ))) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression fooNoInline) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 3)))) ))) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression putFuncToPrivateName) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName thisValue)) : (singleExpression this)) , (propertyAssignment (propertyName (identifierName argumentsValue)) : (singleExpression arguments)) }))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo2) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "this"))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fooNI2) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "this"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression fooNI2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz2 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo2) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz2)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression foo2) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName argumentsValue)) . (identifierName length)) !== (singleExpression (literal (numericLiteral 1))))) || (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName argumentsValue)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (literal (numericLiteral 7)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression baz2) . (identifierName call)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName argumentsValue)) . (identifierName length)) !== (singleExpression (literal (numericLiteral 1))))) || (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName argumentsValue)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (literal (numericLiteral 7)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI2) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName argumentsValue)) . (identifierName length)) !== (singleExpression (literal (numericLiteral 1))))) || (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName argumentsValue)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (literal (numericLiteral 7)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression putFuncToPrivateName) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo3) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fooNI3) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression fooNI3)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz3 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo3) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz3)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression foo3) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression baz3) . (identifierName call)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI3) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 7)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression putFuncToPrivateName) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable bodyText) = (singleExpression (literal `for (let i = 0; i < 100; i++) {    if (a + i === 100)        return a;}`)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo4) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression bodyText)) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fooNI4) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression bodyText)) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression fooNI4)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz4 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo4) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz4)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression foo4) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression baz4) . (identifierName call)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI4) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI4) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI4) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal ""))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testFunc) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testFunc)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression putFuncToPrivateName) (arguments ( (argument (singleExpression testFunc)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo5) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression bodyText)) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fooNI5) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression bodyText)) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression fooNI5)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz5 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo5) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz5)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression foo5) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression baz5) . (identifierName call)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI5) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI5) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression fooNI5) . (identifierName call)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal ""))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression result) . (identifierName thisValue)) !== (singleExpression (literal true))) || (singleExpression (singleExpression (singleExpression result) . (identifierName otherValue)) !== (singleExpression (literal "hello"))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression i)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression putFuncToPrivateName) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arguments)) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo6) = (singleExpression (singleExpression createTailCallForwardingFuncWith) (arguments ( (argument (singleExpression bodyText)) , (argument (singleExpression (literal "{ thisValue: this, otherValue: 'hello'} "))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz6 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) eos))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo6) . (identifierName apply)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression arguments)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz6)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayEq) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName length)) !== (singleExpression (singleExpression b) . (identifierName length)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;))))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ]) !== (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression args) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "a"))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (arrayLiteral [ elementList ]))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( )))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 1.234)))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal null)))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression baz6) . (identifierName apply)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression args)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayEq) (arguments ( (argument (singleExpression result)) , (argument (singleExpression args)) )))) (eos ;)))) })))) <EOF>)