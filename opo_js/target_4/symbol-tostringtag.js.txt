(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName toStringTag))) ]) = (singleExpression (literal "test the tag")))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression foo) != (singleExpression (literal "[object test the tag]")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "failed on custom toStringTag"))) (eos ;)))))) (sourceElement (statement (functionDeclaration function toStr ( (formalParameterList (formalParameterArg (assignable obj))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression obj)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function strName ( (formalParameterList (formalParameterArg (assignable str))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (literal "[object ")) + (singleExpression str)) + (singleExpression (literal "]")))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( )))) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression (literal "Symbol"))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "failed on Symbol"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName prototype))) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression (literal "Symbol"))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "failed on Symbol.prototype"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression objects) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "JSON"))) , (arrayElement (singleExpression (literal "Math")))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression name) of (expressionSequence (singleExpression objects)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression name)) ))))) eos)) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression value)) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression name)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "failed on ")) + (singleExpression name))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression iterators) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'Array'))) , (arrayElement (singleExpression (literal 'Map'))) , (arrayElement (singleExpression (literal 'Set'))) , (arrayElement (singleExpression (literal 'String')))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression name) of (expressionSequence (singleExpression iterators)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'new ')) + (singleExpression name)) + (singleExpression (literal '()[Symbol.iterator]()')))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression value)) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression (singleExpression name) + (singleExpression (literal ' Iterator')))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal 'failed on Iterator of ')) + (singleExpression name))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression value)) )))) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression (singleExpression name) + (singleExpression (literal ' Iterator')))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal 'failed on Iterator.prototype of ')) + (singleExpression name))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression classes) = (singleExpression (objectLiteral { (propertyAssignment (propertyName "ArrayBuffer") : (singleExpression (literal (numericLiteral 10)))) , (propertyAssignment (propertyName "DataView") : (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) ))))) , (propertyAssignment (propertyName "Promise") : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) eos))))) }))) , (propertyAssignment (propertyName "Set") : (singleExpression undefined)) , (propertyAssignment (propertyName "WeakMap") : (singleExpression undefined)) , (propertyAssignment (propertyName "WeakSet") : (singleExpression undefined)) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression name) in (expressionSequence (singleExpression classes)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression name)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression new (singleExpression (singleExpression value) (arguments ( (argument (singleExpression (singleExpression classes) [ (expressionSequence (singleExpression name)) ])) ))))) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression name)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "failed on new object of ")) + (singleExpression name))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression toStr) (arguments ( (argument (singleExpression (singleExpression value) . (identifierName prototype))) ))) !== (singleExpression (singleExpression strName) (arguments ( (argument (singleExpression name)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "failed on prototype of ")) + (singleExpression name))) (eos ;)))))) })))))) <EOF>)