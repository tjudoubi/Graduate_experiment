(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression b)) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function throwError ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 2)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression throwError)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function makeFoo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression throwError) (arguments ( (argument (singleExpression b)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression OSRExit) (arguments ( )))) (eos ;)))))) })))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foos) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression makeFoo) (arguments ( )))) , (arrayElement (singleExpression (singleExpression makeFoo) (arguments ( ))))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ))))) , (argument (singleExpression (singleExpression foos) [ (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName random)) (arguments ( ))) * (singleExpression (literal (numericLiteral 100))))) )) | (singleExpression (literal (numericLiteral 0))))) )) % (singleExpression (singleExpression foos) . (identifierName length)))) ])) )))) (eos ;)))) })))) <EOF>)