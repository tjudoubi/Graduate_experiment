(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable condition))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression condition))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "assertion failed"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression value) . (identifierName bar)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal false)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression value) [ (expressionSequence (singleExpression (singleExpression (literal "bar")) + (singleExpression i))) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal false)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression passed))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "didn't throw"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)