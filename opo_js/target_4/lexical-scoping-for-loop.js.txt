(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'use strict'))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test1 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) ; (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 30))))) ; (expressionSequence (singleExpression ++ (singleExpression x))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test2 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable x))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test3 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable x))) in (expressionSequence (singleExpression (objectLiteral { }))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test4 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test5 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test6 ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x))) in (expressionSequence (singleExpression (objectLiteral { }))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable test7) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) ; (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 30))))) ; (expressionSequence (singleExpression ++ (singleExpression x))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable test8) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable x))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable test9) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable x))) in (expressionSequence (singleExpression (objectLiteral { }))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable test10) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 20))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable test11) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable test12) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable x))) in (expressionSequence (singleExpression (objectLiteral { }))) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable test))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression test1)) , (arrayElement (singleExpression test2)) , (arrayElement (singleExpression test3)) , (arrayElement (singleExpression test4)) , (arrayElement (singleExpression test5)) , (arrayElement (singleExpression test7)) , (arrayElement (singleExpression test8)) , (arrayElement (singleExpression test9)) , (arrayElement (singleExpression test10)) , (arrayElement (singleExpression test11)) , (arrayElement (singleExpression test12))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal "foo"))) ))) === (singleExpression (literal "foo")))) )))) (eos ;))))))) <EOF>)