(program (sourceElements (sourceElement (statement (functionDeclaration function testSyntax ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected syntax error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(`Hello`)"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(`Hello`) + 42"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\nHello\nWorld`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\nHello\n${World}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`${World}`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`${World} Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`$ {World} Hello`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\uFEFFtest`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\r\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\r\\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\u2028`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\u2028`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\u2029`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\u2029`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\0`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\0`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\x7f`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "(`Hello`) + 42"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\\r\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "`\\\r`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`bad escape sequence: \\unicode`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\00`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\01`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\1`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\xo`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\x0o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\uo`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\u0o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\u00o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\u000o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\u{o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\u{0o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "Hello`\\u{110000o`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr}"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${}"))) , (argument (singleExpression (literal "SyntaxError: Unexpected token '}'. Template literal expression cannot be empty."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr} ${}"))) , (argument (singleExpression (literal "SyntaxError: Unexpected token '}'. Template literal expression cannot be empty."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr}"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr} ${expr}"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr`"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr} ${expr`"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello expr${`"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr} expr${`"))) , (argument (singleExpression (literal "SyntaxError: Unexpected EOF"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello ${}`"))) , (argument (singleExpression (literal "SyntaxError: Unexpected token '}'. Template literal expression cannot be empty."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`Hello${expr} ${}`"))) , (argument (singleExpression (literal "SyntaxError: Unexpected token '}'. Template literal expression cannot be empty."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\07`"))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 7))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "`\\")) + (singleExpression i)) + (singleExpression (literal "`")))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "`${expr}\\")) + (singleExpression i)) + (singleExpression (literal "`")))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 8))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 9))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "`\\")) + (singleExpression i)) + (singleExpression (literal "`")))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "`${expr}\\")) + (singleExpression i)) + (singleExpression (literal "`")))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\x7`"))) , (argument (singleExpression (literal "SyntaxError: \\x can only be followed by a hex character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`${expr}\\x7`"))) , (argument (singleExpression (literal "SyntaxError: \\x can only be followed by a hex character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\x`"))) , (argument (singleExpression (literal "SyntaxError: \\x can only be followed by a hex character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`${expr}\\x`"))) , (argument (singleExpression (literal "SyntaxError: \\x can only be followed by a hex character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`${expr}\\u`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u2`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`${expr}\\u2`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u20`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`${expr}\\u20`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u202`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`${expr}\\u202`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`bad escape sequence: \\unicode`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\00`"))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\01`"))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\1`"))) , (argument (singleExpression (literal "SyntaxError: The only valid numeric escape in strict mode is '\\0'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\xo`"))) , (argument (singleExpression (literal "SyntaxError: \\x can only be followed by a hex character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\x0o`"))) , (argument (singleExpression (literal "SyntaxError: \\x can only be followed by a hex character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\uo`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u0o`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u00o`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u000o`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u{o`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u{0o`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "`\\u{110000o`"))) , (argument (singleExpression (literal "SyntaxError: \\u can only be followed by a Unicode character sequence"))) )))) (eos ;))))) <EOF>)