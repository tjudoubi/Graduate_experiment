(program (sourceElements (sourceElement (statement (functionDeclaration function Cons1 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName f)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Cons1) . (identifierName prototype)) . (identifierName g)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (functionDeclaration function Cons2 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName f)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName h)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Cons2) . (identifierName prototype)) . (identifierName g)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))) (sourceElement (statement (functionDeclaration function Cons3 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName d)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName f)) = (singleExpression (literal (numericLiteral 3))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Cons3) . (identifierName prototype)) = (singleExpression (singleExpression Cons2) . (identifierName prototype)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable p)) , (formalParameterArg (assignable q))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable y) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression p)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression o) . (identifierName f)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression q)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression o) . (identifierName f)))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) + (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Cons1) (arguments ( ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Cons2) (arguments ( ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Cons3) (arguments ( ))))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal true))) , (argument (singleExpression p)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Cons1) (arguments ( ))))) , (argument (singleExpression (literal false))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Cons1) (arguments ( ))))) , (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 4))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;))))))) <EOF>)