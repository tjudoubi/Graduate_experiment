(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression msg)) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable str)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression message)) === (singleExpression (literal "string")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression e) . (identifierName message)) === (singleExpression message))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected '")) + (singleExpression message)) + (singleExpression (literal "' but threw '"))) + (singleExpression (singleExpression e) . (identifierName message))) + (singleExpression (literal "'")))) )))) (eos ;)))))) }))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression hadError)) , (argument (singleExpression (literal "Did not throw syntax error"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression shouldThrowSyntaxError)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable AsyncFunction) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction async function ( ) { functionBody }))) )) . (identifierName constructor)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { var await; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { var [await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { var [...await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { var {await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { var {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { var {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { let await; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { let [await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { let [...await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { let {await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { let {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { let {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { const await; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { const [await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { const [...await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { const {await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { const {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { const {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { function await() {} })"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function() { async function await() {} })"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function(await) {})"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f([await]) {})"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f([...await]) {})"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f(...await) {})"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f({await}) {})"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f({isAsync: await}) {})"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f(x = await => {}) {})"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f(x = (await) => {}) {})"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "(async function f(x = await /1/g) {})"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { var await; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { var [await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { var [...await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { var {await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { var {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { var {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { let await; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { let [await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { let [...await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { let {await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { let {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { let {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { const await; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { const [await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { const [...await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { const {await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { const {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { const {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { function await() {} }"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f() { async function await() {} }"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f(await) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f([await]) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f([...await]) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f(...await) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f({await}) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f({isAsync: await}) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f(x = await => {}) {}"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f(x = (await) => {}) {}"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "async function f(x = await /1/g) {}"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { var await; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { var [await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { var [...await] = []; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { var {await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { var {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { var {isAsync: await} = {}; })"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { let await; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { let [await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { let [...await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { let {await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { let {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { let {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { const await; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { const [await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { const [...await] = []; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { const {await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { const {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { const {isAsync: await} = {}; }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { function await() {} }"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async () => { async function await() {} }"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async await => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async (await) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async ([await]) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async ([...await]) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async (...await) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async ({await}) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async ({isAsync: await}) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async (x = await => {}) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async (x = (await) => {}) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var f = async (x = await /1/g) => {}"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { var await; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { var [await] = []; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { var [...await] = []; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { var {await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { var {isAsync: await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { var {isAsync: await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { let await; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { let [await] = []; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { let [...await] = []; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { let {await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { let {isAsync: await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { let {isAsync: await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { const await; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { const [await] = []; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { const [...await] = []; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { const {await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { const {isAsync: await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { const {isAsync: await} = {}; } }"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { function await() {} }"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f() { async function await() {} } }"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f(await) {} } "))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f([await]) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f([...await]) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f(...await) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f({await}) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f({isAsync: await}) {}"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f(x = await => {}) {} }"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f(x = (await) => {}) {} }"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "var O = { async f(x = await /1/g) {} }"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('var await;')"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('var [await] = [];')"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('var [...await] = [];')"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('var {await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('var {isAsync: await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('var {isAsync: await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('let await;')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('let [await] = [];')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('let [...await] = [];')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('let {await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('let {isAsync: await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('let {isAsync: await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('const await;')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('const [await] = [];')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('const [...await] = [];')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('const {await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('const {isAsync: await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('const {isAsync: await} = {};')"))) , (argument (singleExpression (literal "Cannot use 'await' as a lexical variable name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('function await() {}')"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('async function await() {}')"))) , (argument (singleExpression (literal "Cannot declare function named 'await' in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('await', '')"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('[await]', '')"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('[...await]', '')"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('...await', '')"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('{await}', '')"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('{isAsync: await}', '')"))) , (argument (singleExpression (literal "Cannot use 'await' as a parameter name in an async function."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('x = await => {}', '')"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('x = (await) => {}', '')"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "AsyncFunction('x = await /1/g', '')"))) , (argument (singleExpression (literal "Cannot use 'await' within a parameter default expression."))) )))) (eos ;))))) <EOF>)