(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: ${String(actual)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression (literal /Hello/)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (literal "Hello")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable otherRealm) = (singleExpression (singleExpression createGlobalObject) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression otherRealm) . (identifierName RegExp)) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName match))) ]) . (identifierName call)) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression string)) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression string)) )))) (eos <EOF>))))) <EOF>)