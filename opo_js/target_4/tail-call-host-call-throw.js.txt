(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression func) (arguments ( (argument (singleExpression arg)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function a ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function b ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 2)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function c ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 3)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function d ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 4)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function e ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 5)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 6)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function g ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 7)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function h ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 8)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function i ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 9)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function j ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function k ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function l ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 2)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function m ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 3)))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable funcs) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression a)) , (arrayElement (singleExpression b)) , (arrayElement (singleExpression c)) , (arrayElement (singleExpression d)) , (arrayElement (singleExpression e)) , (arrayElement (singleExpression f)) , (arrayElement (singleExpression g)) , (arrayElement (singleExpression h)) , (arrayElement (singleExpression i)) , (arrayElement (singleExpression l)) , (arrayElement (singleExpression m)) , (arrayElement (singleExpression Array))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression funcs) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (singleExpression funcs) . (identifierName length)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression Array)) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) != (singleExpression (literal "RangeError: Array size is not a small enough positive integer.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad exception at end: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal null)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result at end: ")) + (singleExpression result))) (eos ;))))))) <EOF>)