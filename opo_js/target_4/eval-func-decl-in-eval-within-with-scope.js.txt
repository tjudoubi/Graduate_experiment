(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assert) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error in assert. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but was "'))) + (singleExpression result)) + (singleExpression (literal '":'))) + (singleExpression message))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assertThrow) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable cb)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cb) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) === (singleExpression (literal null)))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'Error is expected. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but error was not thrown."')))) ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( ))) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error is expected. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but error was "'))) + (singleExpression error)) + (singleExpression (literal '"')))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable withScope)) , (formalParameterArg (assignable firstAssertValue)) , (formalParameterArg (assignable secondAssertValue))) ) { (functionBody (sourceElements (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression withScope)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "{ function f() { } }"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression typeof (singleExpression f))) , (argument (singleExpression firstAssertValue)) , (argument (singleExpression f)) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression typeof (singleExpression f))) , (argument (singleExpression secondAssertValue)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function boo ( (formalParameterList (formalParameterArg (assignable withScope)) , (formalParameterArg (assignable firstAssertValue)) , (formalParameterArg (assignable secondAssertValue))) ) { (functionBody (sourceElements (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression withScope)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal " for(var i = 0; i < 10000; i++ ){ if (i > 0) { function f() { }; } } "))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression typeof (singleExpression f))) , (argument (singleExpression firstAssertValue)) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression typeof (singleExpression f))) , (argument (singleExpression secondAssertValue)) )))) (eos ;)))))) }))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression (literal (numericLiteral 10)))) }))) , (argument (singleExpression (literal 'number'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression (literal (numericLiteral 10)))) }))) , (argument (singleExpression (literal 'number'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression (objectLiteral { }))) }))) , (argument (singleExpression (literal 'object'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression (objectLiteral { }))) }))) , (argument (singleExpression (literal 'object'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 12345)))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal (numericLiteral 12345)))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression val) = (singleExpression (literal (numericLiteral 12345))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression val) . (identifierName f)) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression val)) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (literal (numericLiteral 12345))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName f)) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal '12345'))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal '12345'))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression val) = (singleExpression (literal '12345')))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression val) . (identifierName f)) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression val)) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression (literal '12345')))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName f)) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression z)) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (literal 'function'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression val2) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression val2) . (identifierName f)) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression val2)) , (argument (singleExpression (literal 'number'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression f))))) , (argument (singleExpression (literal "ReferenceError: Can't find variable: f"))) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression val3) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression val3) . (identifierName f)) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression val3)) , (argument (singleExpression (literal 'number'))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) })))) <EOF>)