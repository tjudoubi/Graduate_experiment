(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test2) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test2)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test4) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test4)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test8) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 8)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test8)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test16) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test16)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test32) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal (numericLiteral 0))) . . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 32)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test32)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test2) (arguments ( )))) , (argument (singleExpression (literal '0'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test4) (arguments ( )))) , (argument (singleExpression (literal '0'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test8) (arguments ( )))) , (argument (singleExpression (literal '0'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test16) (arguments ( )))) , (argument (singleExpression (literal '0'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test32) (arguments ( )))) , (argument (singleExpression (literal '0'))) )))) (eos ;)))) })))))) <EOF>)