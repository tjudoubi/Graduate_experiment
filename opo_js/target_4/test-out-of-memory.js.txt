(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable a) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName __proto__)) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression foo)) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 80000000)))) , (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression a)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Promise) (arguments ( (argument (singleExpression foo)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression ArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 1000)))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;))))))) <EOF>)