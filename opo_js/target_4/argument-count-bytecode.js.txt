(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable createBuiltin) = (singleExpression (singleExpression $vm) . (identifierName createBuiltin)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression count) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (literal "(function () { return @argumentCount(); })"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression countNoInline) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (literal "(function () { return @argumentCount(); })"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression countNoInline)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function inlineCount ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression count) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression inlineCount)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function inlineCount1 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression count) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression inlineCount1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function inlineCount2 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression count) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression inlineCount2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function inlineCountVarArgs ( (formalParameterList (formalParameterArg (assignable list))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression count) (arguments ( (argument ... (singleExpression list)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression inlineCountVarArgs)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable condition)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression condition))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression message)) ))))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression count) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) ))) === (singleExpression (literal (numericLiteral 3))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression count) (arguments ( ))) === (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression count) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) === (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression count) (arguments ( (argument ... (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4)))) , (arrayElement (singleExpression (literal (numericLiteral 5))))) ]))) ))) === (singleExpression (literal (numericLiteral 5))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression count) (arguments ( (argument ... (singleExpression (arrayLiteral [ elementList ]))) ))) === (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression inlineCount) (arguments ( ))) === (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression inlineCount1) (arguments ( ))) === (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression inlineCount2) (arguments ( ))) === (singleExpression (literal (numericLiteral 2))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression inlineCountVarArgs) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ]))) ))) === (singleExpression (literal (numericLiteral 4))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression inlineCountVarArgs) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) ))) === (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression inlineCountVarArgs) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 4)))) ))) === (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression countNoInline) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))) === (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression i)) )))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression countNoInline) (arguments ( ))) === (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression i)) )))) (eos ;)))) })))))) <EOF>)