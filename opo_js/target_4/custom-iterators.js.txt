(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) === (singleExpression (literal (numericLiteral 42))))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) ++)) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (singleExpression expected) ++))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression returnCalled)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) === (singleExpression (literal (numericLiteral 42))))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) ++)) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression undefined)) }))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Terminate iteration."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: Terminate iteration.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression returnCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is not called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) === (singleExpression (literal (numericLiteral 42))))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) ++)) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression undefined)) }))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression returnCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is not called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (getter get (propertyName (identifierName next))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: looking up next."))) (eos ;)))))) }) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Iteration should not occur."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: looking up next.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression returnCalled)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) === (singleExpression (literal (numericLiteral 42))))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (singleExpression this) . (identifierName __key)) ++)) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (getter get (propertyName (identifierName (reservedWord (keyword return))))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: looking up return."))) eos))))) }) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Terminate iteration."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: looking up return.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: next is called."))) eos))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression undefined)) }))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Terminate iteration."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: next is called.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression returnCalled)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is called."))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Terminate iteration."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: Terminate iteration.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression returnCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is not called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is called."))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: return is called.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression returnCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is not called."))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable primitives) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal "string"))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) ))))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function iteratorInterfaceErrorTest ( (formalParameterList (formalParameterArg (assignable notIteratorResult))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression notIteratorResult)) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Iteration should not occur."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "TypeError: Iterator result interface is not an object.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression returnCalled)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is called."))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function iteratorInterfaceErrorTestReturn ( (formalParameterList (formalParameterArg (assignable notIteratorResult))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression notIteratorResult)) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: Terminate iteration."))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "Error: Terminate iteration.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression returnCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is not called."))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression primitives) . (identifierName forEach)) (arguments ( (argument (singleExpression iteratorInterfaceErrorTest)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression primitives) . (identifierName forEach)) (arguments ( (argument (singleExpression iteratorInterfaceErrorTestReturn)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function iteratorInterfaceBreakTestReturn ( (formalParameterList (formalParameterArg (assignable notIteratorResult))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returnCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __key)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal (numericLiteral 42)))) }))) (eos ;)))))) }))) , (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName iterator)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnCalled) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression notIteratorResult)) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable value))) of (expressionSequence (singleExpression iter)) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) ))) !== (singleExpression (literal "TypeError: Iterator result interface is not an object.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error thrown: ")) + (singleExpression e))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression returnCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: return is not called."))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression primitives) . (identifierName forEach)) (arguments ( (argument (singleExpression iteratorInterfaceBreakTestReturn)) )))) (eos ;))))) <EOF>)