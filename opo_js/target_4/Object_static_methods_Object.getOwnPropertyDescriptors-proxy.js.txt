(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression msg) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (literal '')))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal ' for ')) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'bad value')) + (singleExpression msg)) + (singleExpression (literal ': '))) + (singleExpression actual)) + (singleExpression (literal '. Expected '))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeDataProperty ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression name) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression name) = (singleExpression (literal '<property descriptor>')))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression value)) , (argument (singleExpression (singleExpression expected) . (identifierName value))) , (argument (singleExpression (singleExpression name) + (singleExpression (literal '.value')))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (singleExpression expected) . (identifierName enumerable))) , (argument (singleExpression (singleExpression name) + (singleExpression (literal '.enumerable')))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (singleExpression expected) . (identifierName configurable))) , (argument (singleExpression (singleExpression name) + (singleExpression (literal '.configurable')))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (singleExpression expected) . (identifierName writable))) , (argument (singleExpression (singleExpression name) + (singleExpression (literal '.writable')))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression expected) . (identifierName get))) , (argument (singleExpression (singleExpression name) + (singleExpression (literal '.get')))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression expected) . (identifierName set))) , (argument (singleExpression (singleExpression name) + (singleExpression (literal '.set')))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable op)) , (formalParameterArg (assignable errorConstructor)) , (formalParameterArg (assignable desc))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression op) (arguments ( )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `Expected ${desc || 'operation'} to throw ${errorConstructor.name}, but no exception thrown`))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression errorConstructor))) )))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `threw ${e}, but should have thrown ${errorConstructor.name}`))) ))))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function testPropertyFilteringAndOrder ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sym) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'test'))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable O) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName [ (singleExpression sym) ]) : (singleExpression (literal (numericLiteral 3)))) , (propertyAssignment (propertyName 'a') : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable P) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression O)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName ownKeys)) ( (formalParameterList (formalParameterArg (assignable target))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal 'ownKeys()'))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName ownKeys)) (arguments ( (argument (singleExpression target)) )))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName getOwnPropertyDescriptor)) ( (formalParameterList (formalParameterArg (assignable target)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal `getOwnPropertyDescriptor(${String(name)})`))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression target)) , (argument (singleExpression name)) )))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName get)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Get]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName set)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Set]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName deleteProperty)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Delete]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName defineProperty)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[DefineOwnProperty]] trap should be unreachable'))) ))))) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptors)) (arguments ( (argument (singleExpression P)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal 'ownKeys()|getOwnPropertyDescriptor(0)|getOwnPropertyDescriptor(1)|getOwnPropertyDescriptor(a)|getOwnPropertyDescriptor(Symbol(test))'))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal '|'))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal 'result[0]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal 'result[1]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName a))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal 'result["a"]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result) [ (expressionSequence (singleExpression sym)) ])) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal 'result[Symbol(test)]'))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result2) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptors)) (arguments ( (argument (singleExpression O)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result2) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal 'result2[0]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result2) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal 'result2[1]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result2) . (identifierName a))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal 'result2["a"]'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeDataProperty) (arguments ( (argument (singleExpression (singleExpression result2) [ (expressionSequence (singleExpression sym)) ])) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal 'result2[Symbol(test)]'))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function testDuplicatePropertyNames ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable P) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName ownKeys)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal `ownKeys()`))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'A'))) , (arrayElement (singleExpression (literal 'A')))) ]))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName getOwnPropertyDescriptor)) ( (formalParameterList (formalParameterArg (assignable t)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal `getOwnPropertyDescriptor(${name})`))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (returnStatement return (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal 'VALUE'))) }))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName get)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Get]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName set)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Set]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName deleteProperty)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Delete]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName defineProperty)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[DefineOwnProperty]] trap should be unreachable'))) ))))) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptors)) (arguments ( (argument (singleExpression P)) ))))))) , (argument (singleExpression TypeError)) , (argument (singleExpression (literal 'ownKeys returning duplicates'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal 'ownKeys()'))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal '|'))) )))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function testUndefinedPropertyDescriptor ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable P) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName ownKeys)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal `ownKeys()`))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'fakeProperty')))) ]))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName getOwnPropertyDescriptor)) ( (formalParameterList (formalParameterArg (assignable t)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (literal `getOwnPropertyDescriptor(${name})`))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName get)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Get]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName set)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Set]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName deleteProperty)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[Delete]] trap should be unreachable'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName defineProperty)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal '[[DefineOwnProperty]] trap should be unreachable'))) ))))) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptors)) (arguments ( (argument (singleExpression P)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (singleExpression result) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal 'fakeProperty'))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression (literal 'fakeProperty')) in (singleExpression result))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (literal 'ownKeys()|getOwnPropertyDescriptor(fakeProperty)'))) , (argument (singleExpression (singleExpression (singleExpression log) . (identifierName join)) (arguments ( (argument (singleExpression (literal '|'))) )))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;))))) <EOF>)