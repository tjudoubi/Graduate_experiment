(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression a)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression f2)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression args)) (eos ;)))) (sourceElement (statement (functionDeclaration function setup ( (formalParameterList (formalParameterArg (assignable arg1))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arg1)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName unshift)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) z))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression of) [ (expressionSequence (singleExpression (literal (numericLiteral 4))) , (singleExpression (literal (numericLiteral 4))) , (singleExpression (literal (numericLiteral 4))) , (singleExpression (literal (numericLiteral 4))) , (singleExpression (literal (numericLiteral 4)))) ])) (eos ))))) (sourceElement (statement (block { }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Float64Array) (arguments ( (argument (singleExpression a)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f2) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression args) = (singleExpression arguments))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName length)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (functionDeclaration function forOfArray ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression let) z))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression of) [ (expressionSequence (singleExpression (literal true)) , (singleExpression (literal true)) , (singleExpression (literal true)) , (singleExpression (literal true)) , (singleExpression (literal true)) , (singleExpression (literal true)) , (singleExpression (literal true))) ])) (eos ))))) (sourceElement (statement (block { }))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression forOfArgs) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) v)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression args)) (eos )))) (statement (block { }))) }))) (sourceElement (statement (functionDeclaration function callEveryOnArgs ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName every)) . (identifierName call)) (arguments ( (argument (singleExpression args)) , (argument (singleExpression f2)) , (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setup) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression forOfArray) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression forOfArgs) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression callEveryOnArgs) (arguments ( )))) (eos ;))))) <EOF>)