(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: expected:(${expected}),actual:(${actual})`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function toString ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression value) . (identifierName toString)) (arguments ( (argument (singleExpression radix)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression toString)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function toString10 ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `${value}`))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression toString10)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function expected ( (formalParameterList (formalParameterArg (assignable num)) , (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression characters) = (singleExpression (literal "0123456789abcdefghijklmnopqrstuvwxyz")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negative) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression num) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negative) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression num) = (singleExpression - (singleExpression num)))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable index) = (singleExpression (singleExpression num) % (singleExpression radix)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression characters) [ (expressionSequence (singleExpression index)) ]) + (singleExpression result)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression num) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression num) - (singleExpression index))) )) / (singleExpression radix)))) (eos ;)))) })) while ( (expressionSequence (singleExpression num)) ) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression negative)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal '-')) + (singleExpression result))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression toString) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression toString) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 36)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression toString10) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable radix) = (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression radix) < (singleExpression (literal (numericLiteral 37))))) ; (expressionSequence (singleExpression ++ (singleExpression radix))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable lessThanRadix) = (singleExpression - (singleExpression (literal (numericLiteral 2000)))))) ; (expressionSequence (singleExpression (singleExpression lessThanRadix) < (singleExpression radix))) ; (expressionSequence (singleExpression ++ (singleExpression lessThanRadix))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression toString) (arguments ( (argument (singleExpression lessThanRadix)) , (argument (singleExpression radix)) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression lessThanRadix)) , (argument (singleExpression radix)) )))) )))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable greaterThanRadix) = (singleExpression radix))) ; (expressionSequence (singleExpression (singleExpression greaterThanRadix) < (singleExpression (literal (numericLiteral 2000))))) ; (expressionSequence (singleExpression ++ (singleExpression greaterThanRadix))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression toString) (arguments ( (argument (singleExpression greaterThanRadix)) , (argument (singleExpression radix)) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression greaterThanRadix)) , (argument (singleExpression radix)) )))) )))) (eos ;)))))) }))))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable radix) = (singleExpression (literal (numericLiteral 10))))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable lessThanRadix) = (singleExpression - (singleExpression (literal (numericLiteral 2000)))))) ; (expressionSequence (singleExpression (singleExpression lessThanRadix) < (singleExpression radix))) ; (expressionSequence (singleExpression ++ (singleExpression lessThanRadix))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression toString10) (arguments ( (argument (singleExpression lessThanRadix)) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression lessThanRadix)) , (argument (singleExpression radix)) )))) )))) (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable greaterThanRadix) = (singleExpression radix))) ; (expressionSequence (singleExpression (singleExpression greaterThanRadix) < (singleExpression (literal (numericLiteral 2000))))) ; (expressionSequence (singleExpression ++ (singleExpression greaterThanRadix))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression toString10) (arguments ( (argument (singleExpression greaterThanRadix)) )))) , (argument (singleExpression (singleExpression expected) (arguments ( (argument (singleExpression greaterThanRadix)) , (argument (singleExpression radix)) )))) )))) (eos ;)))))) })))) <EOF>)