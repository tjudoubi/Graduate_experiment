(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testValue) = (singleExpression (literal 'test-value')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable A) = (singleExpression class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression testValue))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName getConstValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression testValue)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName getValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName value))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName setValue)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression value))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable B) = (singleExpression class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName getParentValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable C) = (singleExpression class C (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression testValue))) (eos ;)))))) })) (classElement static (methodDefinition (propertyName (identifierName getStaticValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression testValue)) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable D) = (singleExpression class D (classTail extends (singleExpression C) { (classElement static (methodDefinition (propertyName (identifierName getParentStaticValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getStaticValue)) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable E) = (singleExpression class E (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName prop))) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression super) . (identifierName getConstValue)) (arguments ( ))) + (singleExpression (literal '-'))) + (singleExpression (singleExpression this) . (identifierName value)))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;)))))) })) (classElement (methodDefinition (setter set (propertyName (identifierName prop))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable newVal))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName setValue)) (arguments ( (argument (singleExpression newVal)) )))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName setInitValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression testValue))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression new (singleExpression (singleExpression B) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName getParentValue)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression i)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression D) . (identifierName getParentStaticValue)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression i)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable e) = (singleExpression new (singleExpression (singleExpression E) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName setInitValue)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression e) . (identifierName prop))) , (argument (singleExpression (singleExpression (singleExpression testValue) + (singleExpression (literal '-'))) + (singleExpression testValue))) , (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName prop)) = (singleExpression (literal 'new-test-value')))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression e) . (identifierName prop))) , (argument (singleExpression (singleExpression testValue) + (singleExpression (literal '-new-test-value')))) , (argument (singleExpression i)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable F) = (singleExpression class F (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName newMethod)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'super.getValue()'))) )))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression new (singleExpression (singleExpression F) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression f) . (identifierName newMethod)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression result)) , (argument (singleExpression testValue)) , (argument (singleExpression i)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))))) }))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable G) = (singleExpression class G (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName prop))) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression super) . (identifierName getConstValue)) (arguments ( ))) + (singleExpression (literal '-'))) + (singleExpression (singleExpression this) . (identifierName value))))))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arrow) (arguments ( ))) (arguments ( )))) (eos ;)))))) })) (classElement (methodDefinition (setter set (propertyName (identifierName prop))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable newVal))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression newVal)))))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arrow) (arguments ( ))) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName setInitValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression testValue))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName getValueCB)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arrow)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName setValueCB)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable newVal))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression newVal))))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arrow)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName getParentValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName getValueBlockScope)) ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable someValue) = (singleExpression (literal '')))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression internalValue) = (singleExpression (literal '')))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))) (eos ;)))) }))))))) })))) eos))) }))))) }))))))) })) (classElement (methodDefinition * (propertyName (identifierName genGetParentValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) (arguments ( )))) (eos ;)))))) })) (classElement (methodDefinition * (propertyName (identifierName genGetParentValueDeepArrow)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))))))))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arr) (arguments ( ))) (arguments ( ))) (arguments ( )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable g) = (singleExpression new (singleExpression (singleExpression G) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression g) . (identifierName setInitValue)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression g) . (identifierName prop))) , (argument (singleExpression (singleExpression (singleExpression testValue) + (singleExpression (literal '-'))) + (singleExpression testValue))) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" inside of the method'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression g) . (identifierName prop)) = (singleExpression (literal 'new-test-value')))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression g) . (identifierName prop))) , (argument (singleExpression (singleExpression testValue) + (singleExpression (literal '-new-test-value')))) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" inside of the getter and setter'))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable g1) = (singleExpression new (singleExpression (singleExpression G) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression g1) . (identifierName setInitValue)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getValue) = (singleExpression (singleExpression (singleExpression g1) . (identifierName getValueCB)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression getValue) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" inside of the method that retun arrow function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setValue) = (singleExpression (singleExpression (singleExpression g1) . (identifierName setValueCB)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setValue) (arguments ( (argument (singleExpression (literal 'new-value'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression getValue) (arguments ( )))) , (argument (singleExpression (literal 'new-value'))) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" inside of the method that retun arrow function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getValue) = (singleExpression (singleExpression (singleExpression g1) . (identifierName getValueBlockScope)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression getValue) (arguments ( )))) , (argument (singleExpression (literal 'new-value'))) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" with deep nesting inside of the method that retun arrow function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g1) . (identifierName genGetParentValue)) (arguments ( ))) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal 'new-value'))) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" with deep nesting inside of the generator method that retun arrow function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g1) . (identifierName genGetParentValueDeepArrow)) (arguments ( ))) . (identifierName next)) (arguments ( ))) . (identifierName value))) , (argument (singleExpression (literal 'new-value'))) , (argument (singleExpression (literal 'Error: Some problem with using arrow and "super" with deep nesting inside of the generator method that retun arrow function'))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable H) = (singleExpression class H (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( ))))))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName newValue)) = (singleExpression (singleExpression (singleExpression arrow) (arguments ( ))) (arguments ( ))))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression h) = (singleExpression new (singleExpression (singleExpression H) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression h) . (identifierName newValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Some problem with using "super" inside of the constructor'))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable I) = (singleExpression class I (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable beforeSuper))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getValue)) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression beforeSuper)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _value)) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _value)) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) }))))))) })) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable J) = (singleExpression class J (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable beforeSuper))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable _value))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression super) . (identifierName getConstValue)) (arguments ( )))))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression beforeSuper)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression _value) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression _value) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _value)) = (singleExpression _value))) (eos ;)))))) })) })))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression new (singleExpression (singleExpression I) (arguments ( (argument (singleExpression (literal false))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression i) . (identifierName _value))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Some problem with using "super" inside of the constructor'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression new (singleExpression (singleExpression J) (arguments ( (argument (singleExpression (literal false))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression j) . (identifierName _value))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Some problem with using "super" inside of the constructor'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (literal false)))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression I) (arguments ( (argument (singleExpression (literal true))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (singleExpression e) instanceof (singleExpression ReferenceError)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression error)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal 'Error: using "super" property before super() should lead to error'))) )))) (eos ;)))) }))))) (sourceElement (statement (classDeclaration class K (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName newMethodArrowEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'super.getValue()'))) )))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodArrowDoubleEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('super.getValue()')"))) )))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodArrowEvalEvalArrow)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('(() => super.getValue())()')"))) )))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodArrowEvalEvalArrowEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('(() => eval(\"super.getValue()\"))()')"))) )))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression arrow) (arguments ( ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "super.getValue()"))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodEvalEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('super.getValue()')"))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodEvalArrow)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(() => super.getValue())()"))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodEvalEvalArrow)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('(() => super.getValue())()')"))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName newMethodEvalEvalArrowEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "eval('(() => eval(\"(super.getValue())\"))()')"))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable k) = (singleExpression new (singleExpression (singleExpression K) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodArrowEval)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #1'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodArrowDoubleEval)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #2'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodArrowEvalEvalArrow)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #3'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodArrowEvalEvalArrowEval)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #4'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodEval)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #5'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodEvalEval)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #6'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodEvalArrow)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #7'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodEvalEvalArrow)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function 8'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression k) . (identifierName newMethodEvalEvalArrowEval)) (arguments ( )))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal 'Error: Error in lexical bind with eval and arrow function #9'))) )))) (eos ;)))) })))))) <EOF>)