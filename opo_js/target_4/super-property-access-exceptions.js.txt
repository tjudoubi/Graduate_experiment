(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable m) = (singleExpression (literal "Bad!")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))) }))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) , (argument (singleExpression (singleExpression iters) = (singleExpression (literal (numericLiteral 1000))))) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression iters))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function fooProp ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'foo'))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression fooProp)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (classDeclaration class A (classTail { (classElement (methodDefinition (getter get (propertyName (identifierName foo))) ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression shouldThrow)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName x))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName _x))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _x)) = (singleExpression x))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName bar)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _x)) = (singleExpression (singleExpression super) . (identifierName foo)))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName baz)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _x)) = (singleExpression (singleExpression super) [ (expressionSequence (singleExpression (singleExpression fooProp) (arguments ( )))) ]))) (eos ;)))))) })) })))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression i)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName __lookupGetter__)) (arguments ( (argument (singleExpression (literal 'foo'))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName bar)) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression threw)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName x)) === (singleExpression i))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName x)) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression i)) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName __lookupGetter__)) (arguments ( (argument (singleExpression (literal 'foo'))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName baz)) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression threw)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName x)) === (singleExpression i))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName x)) === (singleExpression (literal (numericLiteral 20))))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "b.x ")) + (singleExpression (singleExpression b) . (identifierName x))) + (singleExpression (literal "  "))) + (singleExpression i))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression i)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 23)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 24)))) )))) (eos ;))))) } , 1 ) ; test ( function ( ) { function fooProp ( ) { return 'foo' ; } noInline ( fooProp ) ; function func ( i ) { if ( shouldThrow ) throw new Error ( ) ; return i ; } noInline ( func ) ; let shouldThrow = false ; class A { set foo ( x ) { this . _x = x ; } get x ( ) { return this . _x ; } } class B extends A { constructor ( x ) { super ( ) ; this . _x = x ; } bar ( x ) { super . foo = func ( x ) ; } baz ( x ) { super [ fooProp ( ) ] = func ( x ) ; } } function foo ( i ) { let b = new B ( i ) ; noInline ( b . __lookupGetter__ ( 'foo' ) ) ; let threw = false ; try { b . bar ( i + 1 ) ; } catch ( e ) { threw = true ; } if ( threw ) assert ( b . x === i ) ; else assert ( b . x === i + 1 ) ; } function bar ( i ) { let b = new B ( i ) ; noInline ( b . __lookupGetter__ ( 'foo' ) ) ; let threw = false ; try { b . baz ( i + 1 ) ; } catch ( e ) { threw = true ; } if ( threw ) assert ( b . x === i ) ; else assert ( b . x === i + 1 ) ; } noInline ( bar ) ; for ( let i = 0 ; i < 10000 ; i ++ ) { foo ( i ) ; bar ( i ) ; } shouldThrow = true ; foo ( 23 ) ; bar ( 24 ) ; } , 1 ) ;)