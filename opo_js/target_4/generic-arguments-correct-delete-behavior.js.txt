(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) eos))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression shouldCaptureArgument)) , (argument (singleExpression deleteTwice)) , (argument (singleExpression zeroAsString)) )))) eos))) (sourceElement (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression eval)) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (literal `        function foo(x) {            ${shouldCaptureArgument ? `))) <missing ')'>) function) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) eos)) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (literal ` : ""}            assert(x === null);            let prop = ${zeroAsString ? "'0'" : "0"};            Object.defineProperty(arguments, "0", {enumerable: false, value:45});            assert(arguments[prop] === 45);            assert(x === 45);            let result = delete arguments[prop];            assert(result);            ${deleteTwice ? `))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression delete (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression prop)) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (literal ` : ""};            assert(arguments[prop] === undefined);             assert(!(prop in arguments));            arguments[prop] = 50;            assert(arguments[prop] === 50);            assert(x === 45);        }; foo;    `))) (eos )))) (statement (emptyStatement ;))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functions) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal true))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression functions) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression makeTest) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) )))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) f))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression functions)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (literal null))) )))) (eos ;)))) })))) <EOF>)