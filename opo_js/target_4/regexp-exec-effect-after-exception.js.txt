(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (literal /.*/)) . (identifierName exec)) (arguments ( (argument (singleExpression s)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal "foo bar"))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RegExp) . (identifierName input)) = (singleExpression (literal "blah")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable didFinish) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "error"))) (eos ;)))))) }))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression didFinish) = (singleExpression (literal true)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) != (singleExpression (literal "error")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad exception at end: ")) + (singleExpression e))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression RegExp) . (identifierName input)) != (singleExpression (literal "blah")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value of input: ")) + (singleExpression (singleExpression RegExp) . (identifierName input)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression didFinish)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: did not throw exception."))) (eos ;))))))) <EOF>)