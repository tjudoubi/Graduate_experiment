(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable abort) = (singleExpression (singleExpression $vm) . (identifierName abort)))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected syntax error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `Bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function testSyntax ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression error)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Syntax error thrown"))) ))))) (eos ;)))))) }))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import)`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ')'. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `new import(`))) , (argument (singleExpression (literal `SyntaxError: Cannot use new with import.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import.hello()`))) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'hello'. "import." can only followed with meta.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import[`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token '['. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import<`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token '<'. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import()`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ')'`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import(a, b)`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import(a, b, c)`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import(...a)`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token '...'`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import(,a)`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import(,)`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import("Hello";`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ';'. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import("Hello"];`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ']'. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import("Hello",;`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import("Hello", "Hello2";`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `import = 42`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token '='. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `[import] = 42`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token ']'. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `{import} = 42`))) , (argument (singleExpression (literal `SyntaxError: Unexpected token '}'. import call expects exactly one argument.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `let import = 42`))) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'import'`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `var import = 42`))) , (argument (singleExpression (literal `SyntaxError: Cannot use the keyword 'import' as a variable name.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal `const import = 42`))) , (argument (singleExpression (literal `SyntaxError: Cannot use the keyword 'import' as a lexical variable name.`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction async function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `import("./import-tests/cocoa.js")`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `import("./import-tests/../import-tests/cocoa.js")`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `import("./import-tests/../import-tests/cocoa.js").then(() => { })`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `(import("./import-tests/../import-tests/cocoa.js").then(() => { }))`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `(import("./import-tests/../import-tests/cocoa.js"))`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `import("./import-tests/../import-tests/cocoa.js").catch(() => { })`))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `(import("./import-tests/../import-tests/cocoa.js").catch(() => { }))`))) ))))) (eos ;)))))) })) (arguments ( )))) )) . (identifierName (reservedWord (keyword catch)))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable error))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression abort) (arguments ( )))) (eos ;)))))) })))) )))) (eos ;))))) <EOF>)