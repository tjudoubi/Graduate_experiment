(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function strict ( (formalParameterList (formalParameterArg (assignable flag))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression flag)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) + (singleExpression (literal (numericLiteral 42))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strict)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function sloppy ( (formalParameterList (formalParameterArg (assignable flag))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression flag)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) + (singleExpression (literal (numericLiteral 42))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression sloppy)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression strict) (arguments ( (argument (singleExpression (literal false))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression sloppy) (arguments ( (argument (singleExpression (literal false))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression strict) (arguments ( (argument (singleExpression (literal true))) )))) , (argument (singleExpression (literal (numericLiteral 43)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression sloppy) (arguments ( (argument (singleExpression (literal true))) )))) , (argument (singleExpression (literal (numericLiteral 43)))) )))) (eos ;))))) <EOF>)