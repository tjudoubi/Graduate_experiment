(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable casted) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression Math) . (identifierName random)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression casted) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable casted))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression array) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression casted) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression Number) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) < (singleExpression (literal (numericLiteral .5)))) ? (singleExpression (literal (numericLiteral 1))) : (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function check ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable casted))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression array) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression casted) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) < (singleExpression (literal (numericLiteral .5)))) ? (singleExpression (literal (numericLiteral 1))) : (singleExpression (literal (numericLiteral 0))))) ))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression check)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression array)) , (argument (singleExpression casted)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression check) (arguments ( (argument (singleExpression array)) , (argument (singleExpression casted)) )))) (eos ;)))) })))))) <EOF>)