(program (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement statement) (sourceElement (statement {)) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 3))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression j) + (singleExpression (literal "asdf"))))) (eos )))) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable cond) = (singleExpression (singleExpression Error) != (singleExpression Error)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 42))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) (eos ;)))) })))) (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arg) . (identifierName baz)) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))))) })) (statement (iterationStatement for ( (singleExpression let) k =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression k))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument ... (singleExpression arguments)) )))) (eos ;)))) }))) })) (statement (iterationStatement for ( (singleExpression let) j =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) < (singleExpression (literal (numericLiteral 1000000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression j))) (eos )))) (statement (block { }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))))) } <EOF>)