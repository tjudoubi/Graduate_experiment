(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expected) = (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName bar)) : (singleExpression (literal (numericLiteral 20)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression foo) . (identifierName bar)))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression toString) = (singleExpression (singleExpression foo) . (identifierName toString)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression toString) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName toString)) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expected) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)