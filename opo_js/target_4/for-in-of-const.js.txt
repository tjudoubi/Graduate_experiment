(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expect_nothrow) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable why)) , (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expect_throw) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable why)) , (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) != (singleExpression (literal "TypeError: Attempted to assign to readonly property.")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "expected a TypeError, got ")) + (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression threw))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "expected to throw"))) )))) (eos ;)))))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expect_nothrow) (arguments ( (argument (singleExpression (literal "regular for-in"))) , (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression x) in (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expect_nothrow) (arguments ( (argument (singleExpression (literal "var for-in"))) , (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable x))) in (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ) (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression expect_nothrow)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (literal "let for-in"))) <missing ')'>)) (eos ,)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (anoymousFunction (arrowFunctionParameters ( )) <missing '=>'> (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression let) x))))) <missing '}'>))) in (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;))))) } ) ; expect_nothrow ( "for-in with const variable" , function ( ) { for ( const x in [ 1 , 2 , 3 ] ) x ; } ) ; expect_nothrow ( "for-in which never iterates" , function ( ) { const x = 20 ; for ( x in [ ] ) x ; } ) ; expect_throw ( "for-in on const from func's scope" , function ( ) { const x = 20 ; for ( x in [ 1 , 2 , 3 ] ) x ; } ) ; expect_throw ( "same, with intervening capture" , function ( ) { const x = 20 ; capture = function ( ) { x ; } ; for ( x in [ 1 , 2 , 3 ] ) x ; } ) ; expect_throw ( "same, iterating in capture" , function ( ) { const x = 20 ; capture = function ( ) { for ( x in [ 1 , 2 , 3 ] ) x ; } ; capture ( ) ; } ) ; expect_nothrow ( "regular for-of" , function ( ) { for ( x of [ 1 , 2 , 3 ] ) x ; } ) ; expect_nothrow ( "var for-of" , function ( ) { for ( var x of [ 1 , 2 , 3 ] ) x ; } ) ; expect_nothrow ( "let for-of" , function ( ) { for ( let x of [ 1 , 2 , 3 ] ) x ; } ) ; expect_nothrow ( "for-of with const variable" , function ( ) { for ( const x of [ 1 , 2 , 3 ] ) x ; } ) ; expect_nothrow ( "for-of which never iterates" , function ( ) { const x = 20 ; for ( x of [ ] ) x ; } ) ; expect_throw ( "for-of on const from func's scope" , function ( ) { const x = 20 ; for ( x of [ 1 , 2 , 3 ] ) x ; } ) ; expect_throw ( "same, with intervening capture" , function ( ) { const x = 20 ; capture = function ( ) { x ; } ; for ( x of [ 1 , 2 , 3 ] ) x ; } ) ; expect_throw ( "same, iterating in capture" , function ( ) { const x = 20 ; capture = function ( ) { for ( x of [ 1 , 2 , 3 ] ) x ; } ; capture ( ) ; } ) ; expect_throw ( "bad destructuring" , function ( ) { let arr = [ { x : 20 } ] ; const x = 50 ; for ( { x } of arr ) x ; } ) ; expect_nothrow ( "good destructuring" , function ( ) { let arr = [ { x : 20 } ] ; const x = 50 ; for ( { x : foo } of arr ) x ; } ) ; expect_nothrow ( "const good destructuring" , function ( ) { let arr = [ { x : 20 } ] ; const x = 50 ; for ( const { x } of arr ) x ; } ) ; expect_nothrow ( "let good destructuring" , function ( ) { let arr = [ { x : 20 } ] ; const x = 50 ; for ( let { x } of arr ) x ; } ) ;)