(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression typedArrays) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Int8Array)) , (arrayElement (singleExpression Uint8Array)) , (arrayElement (singleExpression Uint8ClampedArray)) , (arrayElement (singleExpression Int16Array)) , (arrayElement (singleExpression Uint16Array)) , (arrayElement (singleExpression Int32Array)) , (arrayElement (singleExpression Uint32Array)) , (arrayElement (singleExpression Float32Array)) , (arrayElement (singleExpression Float64Array))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable cond))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression cond))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "bad assertion!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression constructor) of (expressionSequence (singleExpression typedArrays)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName value)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName writable)) === (singleExpression (literal true)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName enumerable)) === (singleExpression (literal true)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) . (identifierName configurable)) === (singleExpression (literal false)))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))))) <EOF>)