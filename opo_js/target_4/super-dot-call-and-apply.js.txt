(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad Assertion!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (classDeclaration class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable prop))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName prop)) = (singleExpression prop))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName call)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName prop))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName apply)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName prop))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName testSuper)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression super) . (identifierName call)) (arguments ( ))) == (singleExpression (literal 'value')))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression super) . (identifierName apply)) (arguments ( ))) == (singleExpression (literal 'value')))) )))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable obj) = (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal 'value'))) )))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression obj) . (identifierName testSuper)) (arguments ( )))) eos))) (sourceElement (statement (classDeclaration class C (classTail { })))) (sourceElement (statement (classDeclaration class D (classTail extends (singleExpression C) { (classElement (methodDefinition (propertyName (identifierName testSuper)) ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName call)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression e) . (identifierName message)) == (singleExpression (literal "super.call is not a function. (In 'super.call()', 'super.call' is undefined)")))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName apply)) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression e) . (identifierName message)) == (singleExpression (literal "super.apply is not a function. (In 'super.apply()', 'super.apply' is undefined)")))) )))) (eos ;)))) }))))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) = (singleExpression new (singleExpression (singleExpression D) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName testSuper)) (arguments ( )))) (eos ;))))) <EOF>)