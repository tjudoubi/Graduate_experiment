(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class C (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName func)) = (singleExpression func))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName runTest)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName func)) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (functionDeclaration function recurseAndTest ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression recurseAndTest) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression test) . (identifierName runTest)) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable howManyParentheses) = (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable deepRE) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal '(')) . (identifierName repeat)) (arguments ( (argument (singleExpression howManyParentheses)) ))) + (singleExpression (singleExpression (singleExpression (literal ')')) . (identifierName repeat)) (arguments ( (argument (singleExpression howManyParentheses)) ))))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) = (singleExpression new (singleExpression (singleExpression C) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression deepRE) . (identifierName exec)) (arguments ( (argument (singleExpression (literal ''))) )))) (eos ;)))))) })))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression recurseAndTest) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression $vm) . (identifierName callWithStackSize)) (arguments ( (argument (singleExpression foo)) , (argument (singleExpression (singleExpression (literal (numericLiteral 100))) * (singleExpression (literal (numericLiteral 1024))))) )))) (eos <EOF>))))) <EOF>)