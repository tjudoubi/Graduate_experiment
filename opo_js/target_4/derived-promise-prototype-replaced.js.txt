(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function DerivedPromise ( (formalParameterList (formalParameterArg (assignable executor))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Promise)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression executor))) ]))) , (argument (singleExpression DerivedPromise)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable originalPrototype) = (singleExpression (singleExpression DerivedPromise) . (identifierName prototype)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable replacedPrototype) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression (singleExpression Promise) . (identifierName prototype))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression DerivedPromise) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable resolve)) , (formalParameterArg (assignable reject))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resolve) (arguments ( (argument (singleExpression i)) )))) (eos ;)))))) }))) ))))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression DerivedPromise) . (identifierName prototype)) = (singleExpression replacedPrototype))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression new (singleExpression (singleExpression DerivedPromise) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable resolve)) , (formalParameterArg (assignable reject))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resolve) (arguments ( (argument (singleExpression (literal "Derived"))) )))) (eos ;)))))) }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression array) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]) . (identifierName __proto__))) , (argument (singleExpression originalPrototype)) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression promise) . (identifierName __proto__))) , (argument (singleExpression replacedPrototype)) )))) (eos ;))))) <EOF>)