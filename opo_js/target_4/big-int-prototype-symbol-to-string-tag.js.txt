(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression BigInt) . (identifierName prototype))) , (argument (singleExpression (singleExpression Symbol) . (identifierName toStringTag))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression p) . (identifierName writable)) === (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression p) . (identifierName enumerable)) === (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression p) . (identifierName configurable)) === (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression p) . (identifierName value)) === (singleExpression (literal "BigInt")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression (literal (bigintLiteral 3n)))) ))) === (singleExpression (literal "[object BigInt]")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression (singleExpression Object) (arguments ( (argument (singleExpression (literal (bigintLiteral 3n)))) )))) ))) === (singleExpression (literal "[object BigInt]")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (singleExpression BigInt) . (identifierName prototype))) , (argument (singleExpression (singleExpression Symbol) . (identifierName toStringTag))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal "FooBar"))) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName configurable)) : (singleExpression (literal true))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression (literal (bigintLiteral 3n)))) ))) === (singleExpression (literal "[object FooBar]")))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression (singleExpression Object) (arguments ( (argument (singleExpression (literal (bigintLiteral 3n)))) )))) ))) === (singleExpression (literal "[object FooBar]")))) )))) (eos ;))))) <EOF>)