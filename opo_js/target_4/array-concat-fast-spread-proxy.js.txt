(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrayEq) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName length)) !== (singleExpression (singleExpression b) . (identifierName length)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;))))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression i)) ]) !== (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) statement (statement {) (statement (labelledStatement proxy : (statement (expressionStatement (expressionSequence (singleExpression p) , (singleExpression revoke)) eos))))) })))) = Proxy . revocable ( [ 4 , 5 ] , { } ) ; for ( let i = 0 ; i < 10000 ; i ++ ) { if ( ! arrayEq ( Array . prototype . concat . call ( array , p ) , [ 1 , 2 , 3 , 4 , 5 ] ) ) throw "failed normally with a proxy" } p [ Symbol . isConcatSpreadable ] = false ; for ( let i = 0 ; i < 10000 ; i ++ ) { if ( ! arrayEq ( Array . prototype . concat . call ( array , p ) , [ 1 , 2 , 3 , p ] ) ) throw "failed with no spread" } p [ Symbol . isConcatSpreadable ] = undefined ; revoke ( ) ; passed = true ; try { Array . prototype . concat . call ( array , p ) ; passed = false ; } catch ( e ) { } if ( ! passed ) throw "failed to throw spreading revoked proxy" ; })