(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testValue) = (singleExpression (literal 'test-value')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable A) = (singleExpression class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName idValue)) = (singleExpression testValue))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable B) = (singleExpression class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable doRunSuper))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName (reservedWord (keyword if)))) ( (formalParameterList (formalParameterArg (assignable doRunSuper))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: super() should create this and put value into idValue property"))) )))) (eos ;)))))) }) }))))))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression doRunSuper)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName idValue))) , (argument (singleExpression testValue)) , (argument (singleExpression (literal "Error: arrow function should return this to constructor"))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression this) . (identifierName idValue)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression value)) )))) (eos ;)))) }))))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable exception))) (eos ;))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal false))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression ReferenceError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Exception thrown was not a reference error"))) (eos ;)))))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression exception))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Exception not thrown for an unitialized this at iteration #")) + (singleExpression i))) (eos ;)))))) })))))) <EOF>)