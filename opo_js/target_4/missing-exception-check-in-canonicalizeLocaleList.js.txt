(program (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s1) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) . (identifierName toLocaleString)) (arguments ( ))) . (identifierName padEnd)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 31)))) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal 'aa'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'a')) . (identifierName toLocaleLowerCase)) (arguments ( (argument (singleExpression s1)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) eos))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;)))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s1) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) . (identifierName toLocaleString)) (arguments ( ))) . (identifierName padEnd)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 31)))) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal 'aa'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'a')) . (identifierName toLocaleUpperCase)) (arguments ( (argument (singleExpression s1)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception2) = (singleExpression e))) eos))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception2) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;)))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s1) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) . (identifierName toLocaleString)) (arguments ( ))) . (identifierName padEnd)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 31)))) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal 'aa'))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'a')) . (identifierName localeCompare)) (arguments ( (argument (singleExpression (literal 'b'))) , (argument (singleExpression s1)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception3) = (singleExpression e))) eos))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception3) != (singleExpression (literal "Error: Out of memory")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;))))))) <EOF>)