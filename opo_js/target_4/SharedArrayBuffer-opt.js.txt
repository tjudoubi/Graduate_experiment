(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dv) = (singleExpression new (singleExpression (singleExpression DataView) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i8a) = (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i16a) = (singleExpression new (singleExpression (singleExpression Int16Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i32a) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u8a) = (singleExpression new (singleExpression (singleExpression Uint8Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u8ca) = (singleExpression new (singleExpression (singleExpression Uint8ClampedArray) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u16a) = (singleExpression new (singleExpression (singleExpression Uint16Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u32a) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f32a) = (singleExpression new (singleExpression (singleExpression Float32Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f64a) = (singleExpression new (singleExpression (singleExpression Float64Array) (arguments ( (argument (singleExpression new (singleExpression (singleExpression SharedArrayBuffer) (arguments ( (argument (singleExpression (literal (numericLiteral 128)))) ))))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arrays) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression i8a)) , (arrayElement (singleExpression i16a)) , (arrayElement (singleExpression i32a)) , (arrayElement (singleExpression u8a)) , (arrayElement (singleExpression u16a)) , (arrayElement (singleExpression u32a))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable atomics) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable genericAtomics) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) of (expressionSequence (singleExpression arrays)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression atomics) . (identifierName set)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression map)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable op))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "add"))) , (arrayElement (singleExpression (literal "and"))) , (arrayElement (singleExpression (literal "compareExchange"))) , (arrayElement (singleExpression (literal "exchange"))) , (arrayElement (singleExpression (literal "load"))) , (arrayElement (singleExpression (literal "or"))) , (arrayElement (singleExpression (literal "store"))) , (arrayElement (singleExpression (literal "sub"))) , (arrayElement (singleExpression (literal "xor")))) ]))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable numExtraArgs))) (eos ;))) (statement (switchStatement switch ( (expressionSequence (singleExpression op)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal "compareExchange"))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numExtraArgs) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "load"))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numExtraArgs) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (breakStatement break (eos ;)))))) (defaultClause default : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression numExtraArgs) = (singleExpression (literal (numericLiteral 1))))) (eos ;))) (statement (breakStatement break (eos ;))))) }))) (statement (functionDeclaration function str ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable str) = (singleExpression (singleExpression (singleExpression (literal "(function (array")) + (singleExpression count)) + (singleExpression (literal ", index"))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numExtraArgs))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) (assignmentOperator +=) (singleExpression (singleExpression (literal ", a")) + (singleExpression i)))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal ") { return Atomics.")) + (singleExpression op)) + (singleExpression (literal "(array"))) + (singleExpression count)) + (singleExpression (literal ", index"))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression numExtraArgs))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) (assignmentOperator +=) (singleExpression (singleExpression (literal ", a")) + (singleExpression i)))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) (assignmentOperator +=) (singleExpression (literal "); })")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression count) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression str)) (eos ;)))))) })) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression str) (arguments ( )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (singleExpression arrays) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (singleExpression arrays) . (identifierName length)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName set)) (arguments ( (argument (singleExpression op)) , (argument (singleExpression f)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) of (expressionSequence (singleExpression arrays)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression (singleExpression (singleExpression atomics) . (identifierName get)) (arguments ( (argument (singleExpression a)) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (singleExpression str) (arguments ( )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression op)) , (argument (singleExpression f)) )))) (eos ;)))) }))))) }))))) (sourceElement (statement (functionDeclaration function runAtomic ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable index)) , (formalParameterArg (assignable init)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable args)) , (formalParameterArg (assignable expectedResult)) , (formalParameterArg (assignable expectedOutcome))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable f))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "specialized"))) , (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression atomics) . (identifierName get)) (arguments ( (argument (singleExpression array)) ))) . (identifierName get)) (arguments ( (argument (singleExpression name)) )))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "generic"))) , (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression name)) )))) })))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ]) = (singleExpression init))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression f) . (identifierName func)) (arguments ( (argument (singleExpression array)) , (argument (singleExpression index)) , (argument ... (singleExpression args)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression expectedResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected Atomics.")) + (singleExpression name)) + (singleExpression (literal "(array, "))) + (singleExpression index)) + (singleExpression (literal ", "))) + (singleExpression (singleExpression (singleExpression args) . (identifierName join)) (arguments ( (argument (singleExpression (literal ", "))) )))) + (singleExpression (literal ") to return "))) + (singleExpression expectedResult)) + (singleExpression (literal " but returned "))) + (singleExpression result)) + (singleExpression (literal " for "))) + (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName apply)) (arguments ( (argument (singleExpression array)) )))) + (singleExpression (literal " and "))) + (singleExpression (singleExpression f) . (identifierName name)))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ]) !== (singleExpression expectedOutcome))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected Atomics.")) + (singleExpression name)) + (singleExpression (literal "(array, "))) + (singleExpression index)) + (singleExpression (literal ", "))) + (singleExpression (singleExpression (singleExpression args) . (identifierName join)) (arguments ( (argument (singleExpression (literal ", "))) )))) + (singleExpression (literal ") to result in array["))) + (singleExpression index)) + (singleExpression (literal "] = "))) + (singleExpression expectedOutcome)) + (singleExpression (literal " but got "))) + (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ])) + (singleExpression (literal " for "))) + (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName apply)) (arguments ( (argument (singleExpression array)) )))) + (singleExpression (literal " and "))) + (singleExpression (singleExpression f) . (identifierName name)))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) of (expressionSequence (singleExpression arrays)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "add"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 55)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "and"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 8)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "compareExchange"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 25)))) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 13)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "compareExchange"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 13)))) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "exchange"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "load"))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 13)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "or"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 47)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "store"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal "sub"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 13))))) ]))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 29)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runAtomic) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal "xor"))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (argument (singleExpression (literal (numericLiteral 13)))) , (argument (singleExpression (literal (numericLiteral 39)))) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function shouldFail ( (formalParameterList (formalParameterArg (assignable f)) , (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName name)) == (singleExpression (singleExpression name) . (identifierName name)))) ) (statement (returnStatement return (eos ;))))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) + (singleExpression (literal " threw the wrong error: "))) + (singleExpression e))) ))))) (eos ;)))) }))))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression f) + (singleExpression (literal " succeeded!")))) ))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable bad))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 0.5)))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( )))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal "hello"))) , (arrayElement (singleExpression dv)) , (arrayElement (singleExpression u8ca)) , (arrayElement (singleExpression f32a)) , (arrayElement (singleExpression f64a))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "add"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "and"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "compareExchange"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "exchange"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "load"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "or"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "store"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "sub"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression genericAtomics) . (identifierName get)) (arguments ( (argument (singleExpression (literal "xor"))) ))) (arguments ( (argument (singleExpression bad)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression TypeError)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable idx))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1000000000000))))) , (arrayElement (singleExpression (literal (numericLiteral 10000)))) , (arrayElement (singleExpression (literal (numericLiteral 10000000000000)))) , (arrayElement (singleExpression (literal "hello")))) ]))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable a))) of (expressionSequence (singleExpression arrays)) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable m))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression atomics) . (identifierName get)) (arguments ( (argument (singleExpression a)) )))) , (arrayElement (singleExpression genericAtomics))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "add"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "and"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "compareExchange"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "exchange"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "load"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "or"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "store"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "sub"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldFail) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName get)) (arguments ( (argument (singleExpression (literal "xor"))) ))) (arguments ( (argument (singleExpression a)) , (argument (singleExpression idx)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))))) , (argument (singleExpression RangeError)) )))) (eos ;)))) }))))) }))))) })))))) <EOF>)