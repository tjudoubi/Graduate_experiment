(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable called) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (classDeclaration class B (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal 'B')))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class C (classTail extends (singleExpression B) { })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression B) . (identifierName prototype)) . (identifierName constructor)) = (singleExpression (anoymousFunction (functionDeclaration function F ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal 'F')))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression C) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression called)) , (argument (singleExpression (literal 'B'))) )))) (eos ;))))) <EOF>)