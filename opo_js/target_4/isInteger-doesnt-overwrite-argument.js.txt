(program (sourceElements (sourceElement (statement (functionDeclaration function testIsInteger ( (formalParameterList (formalParameterArg (assignable arg))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression (singleExpression Number) . (identifierName isInteger)) (arguments ( (argument (singleExpression arg)) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arg)) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression testIsInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 13.37)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression r) === (singleExpression (literal false)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Wrong value returned from function calling Number.isInteger"))) (eos ;)))))) })))))) <EOF>)