(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./resources/typedarray-constructor-helper-functions.js"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression TypedArray) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression Int32Array)) ))))) (eos ;)))) (sourceElement (statement (classDeclaration class A (classTail extends (singleExpression TypedArray) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (literal "new A()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function iterator ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName i)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) < (singleExpression (singleExpression (singleExpression foo) . (identifierName length)) / (singleExpression (literal (numericLiteral 2)))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression foo) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) ++)) ])) }))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) }))) (eos ;)))))) }))) }))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) = (singleExpression iterator))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructor('(foo)', [1,2])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression debug) (arguments ( (argument (singleExpression (literal "Test that we don't premptively convert to native values and use a gc-safe temporary storage."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression done) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression done))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "bad"))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression obj)) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function iterator2 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression done) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName i)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName next)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) < (singleExpression (singleExpression (singleExpression foo) . (identifierName length)) / (singleExpression (literal (numericLiteral 2)))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression foo) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) ++)) ])) }))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression done) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) }))) (eos ;)))))) }))) }))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) = (singleExpression iterator2))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructor('(foo)', [1,2])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructor('(true)', [0])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeTrue) (arguments ( (argument (singleExpression (literal "testConstructor('(`hi`)', [])"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression finishJSTest) (arguments ( )))) (eos ;))))) <EOF>)