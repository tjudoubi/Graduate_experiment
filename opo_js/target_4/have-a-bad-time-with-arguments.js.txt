(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression verbose) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable utilities) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'function shouldEqual(testId, actual, expected) {')) + (singleExpression (literal '\n'))) + (singleExpression (literal '    if (actual != expected)'))) + (singleExpression (literal '\n'))) + (singleExpression (literal '        throw testId + ": ERROR: expect " + expected + ", actual " + actual;'))) + (singleExpression (literal '\n'))) + (singleExpression (literal '}'))) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable haveABadTime) = (singleExpression (singleExpression (literal 'Object.defineProperty(Object.prototype, 20, { get() { return 20; } });')) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable directArgumentsDecl) = (singleExpression (singleExpression (literal '    var args = arguments;')) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable scopedArgumentsDecl) = (singleExpression (singleExpression (singleExpression (singleExpression (literal '    var args = arguments;')) + (singleExpression (literal '\n'))) + (singleExpression (literal '    function closure() { return x; }'))) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable clonedArgumentsDecl) = (singleExpression (singleExpression (singleExpression (singleExpression (literal '    "use strict";')) + (singleExpression (literal '\n'))) + (singleExpression (literal '    var args = arguments;'))) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (functionDeclaration function testFunction ( (formalParameterList (formalParameterArg (assignable argsDecl)) , (formalParameterArg (assignable insertElementAction)) , (formalParameterArg (assignable indexToReturn))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable script) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'function test(x) {')) + (singleExpression (literal '\n'))) + (singleExpression argsDecl)) + (singleExpression insertElementAction)) + (singleExpression (literal '    return args['))) + (singleExpression indexToReturn)) + (singleExpression (literal '];'))) + (singleExpression (literal '\n'))) + (singleExpression (literal '}'))) + (singleExpression (literal '\n'))) + (singleExpression (literal 'noInline(test);'))) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression script)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function warmupFunction ( (formalParameterList (formalParameterArg (assignable tierWarmupCount)) , (formalParameterArg (assignable testArgs))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable script) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'function warmup() {')) + (singleExpression (literal '\n'))) + (singleExpression (literal '    for (var i = 0; i < '))) + (singleExpression tierWarmupCount)) + (singleExpression (literal '; i++) {'))) + (singleExpression (literal '\n'))) + (singleExpression (literal '        test('))) + (singleExpression testArgs)) + (singleExpression (literal ');'))) + (singleExpression (literal '\n'))) + (singleExpression (literal '    }'))) + (singleExpression (literal '\n'))) + (singleExpression (literal '}'))) + (singleExpression (literal '\n'))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression script)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression argumentsDecls) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName direct)) : (singleExpression directArgumentsDecl)) , (propertyAssignment (propertyName (identifierName scoped)) : (singleExpression scopedArgumentsDecl)) , (propertyAssignment (propertyName (identifierName cloned)) : (singleExpression clonedArgumentsDecl)) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression indicesToReturn) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName inBounds)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName outOfBoundsInsertedElement)) : (singleExpression (literal (numericLiteral 10)))) , (propertyAssignment (propertyName (identifierName outOfBoundsInPrototype)) : (singleExpression (literal (numericLiteral 20)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tierWarmupCounts) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName llint)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName baseline)) : (singleExpression (literal (numericLiteral 50)))) , (propertyAssignment (propertyName (identifierName dfg)) : (singleExpression (literal (numericLiteral 1000)))) , (propertyAssignment (propertyName (identifierName ftl)) : (singleExpression (literal (numericLiteral 10000)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArgsList) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName noArgs)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName args)) : (singleExpression (literal ''))) , (propertyAssignment (propertyName (identifierName result)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName inBounds)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName beforeBadTime)) : (singleExpression (literal 'undefined'))) , (propertyAssignment (propertyName (identifierName afterBadTime)) : (singleExpression (literal 'undefined'))) , }))) , (propertyAssignment (propertyName (identifierName outOfBoundsInsertedElement)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName beforeBadTime)) : (singleExpression (literal '10'))) , (propertyAssignment (propertyName (identifierName afterBadTime)) : (singleExpression (literal '10'))) , }))) , (propertyAssignment (propertyName (identifierName outOfBoundsInPrototype)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName beforeBadTime)) : (singleExpression (literal 'undefined'))) , (propertyAssignment (propertyName (identifierName afterBadTime)) : (singleExpression (literal '20'))) , }))) , }))) }))) , (propertyAssignment (propertyName (identifierName someArgs)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName args)) : (singleExpression (literal '1, 2, 3'))) , (propertyAssignment (propertyName (identifierName result)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName inBounds)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName beforeBadTime)) : (singleExpression (literal '1'))) , (propertyAssignment (propertyName (identifierName afterBadTime)) : (singleExpression (literal '1'))) , }))) , (propertyAssignment (propertyName (identifierName outOfBoundsInsertedElement)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName beforeBadTime)) : (singleExpression (literal '10'))) , (propertyAssignment (propertyName (identifierName afterBadTime)) : (singleExpression (literal '10'))) , }))) , (propertyAssignment (propertyName (identifierName outOfBoundsInPrototype)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName beforeBadTime)) : (singleExpression (literal 'undefined'))) , (propertyAssignment (propertyName (identifierName afterBadTime)) : (singleExpression (literal '20'))) , }))) , }))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression insertElementActions) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName insertElement)) : (singleExpression (singleExpression (literal '    args[10] = 10;')) + (singleExpression (literal '\n')))) , (propertyAssignment (propertyName (identifierName dontInsertElement)) : (singleExpression (literal ''))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) argsDeclIndex in))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression argumentsDecls)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression argsDecl) = (singleExpression (singleExpression argumentsDecls) [ (expressionSequence (singleExpression argsDeclIndex)) ]))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) indexToReturnIndex in)) (statement (expressionStatement (expressionSequence (singleExpression indicesToReturn)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression indexToReturn) = (singleExpression (singleExpression indicesToReturn) [ (expressionSequence (singleExpression indexToReturnIndex)) ]))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) insertElementActionIndex in)) (statement (expressionStatement (expressionSequence (singleExpression insertElementActions)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression insertElementAction) = (singleExpression (singleExpression insertElementActions) [ (expressionSequence (singleExpression insertElementActionIndex)) ]))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) tierWarmupCountIndex in)) (statement (expressionStatement (expressionSequence (singleExpression tierWarmupCounts)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tierWarmupCount) = (singleExpression (singleExpression tierWarmupCounts) [ (expressionSequence (singleExpression tierWarmupCountIndex)) ]))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) testArgsIndex in)) (statement (expressionStatement (expressionSequence (singleExpression testArgsList)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArgs) = (singleExpression (singleExpression (singleExpression testArgsList) [ (expressionSequence (singleExpression testArgsIndex)) ]) . (identifierName args)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedResult) = (singleExpression (singleExpression (singleExpression (singleExpression testArgsList) [ (expressionSequence (singleExpression testArgsIndex)) ]) . (identifierName result)) [ (expressionSequence (singleExpression indexToReturnIndex)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression indexToReturnIndex) == (singleExpression (literal 'outOfBoundsInsertedElement'))) && (singleExpression (singleExpression insertElementActionIndex) == (singleExpression (literal 'dontInsertElement'))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedResult) = (singleExpression (literal 'undefined')))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testName) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression argsDeclIndex) + (singleExpression (literal '-'))) + (singleExpression indexToReturnIndex)) + (singleExpression (literal '-'))) + (singleExpression insertElementActionIndex)) + (singleExpression (literal '-'))) + (singleExpression tierWarmupCountIndex)) + (singleExpression (literal '-'))) + (singleExpression testArgsIndex)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression script) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression utilities) + (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression argsDecl)) , (argument (singleExpression insertElementAction)) , (argument (singleExpression indexToReturn)) )))) + (singleExpression (singleExpression warmupFunction) (arguments ( (argument (singleExpression tierWarmupCount)) , (argument (singleExpression testArgs)) )))) + (singleExpression (literal 'warmup()'))) + (singleExpression (literal '\n'))) + (singleExpression (literal 'shouldEqual(10000, test('))) + (singleExpression testArgs)) + (singleExpression (literal '), '))) + (singleExpression (singleExpression expectedResult) [ (expressionSequence (singleExpression (literal 'beforeBadTime'))) ])) + (singleExpression (literal ');'))) + (singleExpression (literal '\n'))) + (singleExpression haveABadTime)) + (singleExpression (literal 'shouldEqual(20000, test('))) + (singleExpression testArgs)) + (singleExpression (literal '), '))) + (singleExpression (singleExpression expectedResult) [ (expressionSequence (singleExpression (literal 'afterBadTime'))) ])) + (singleExpression (literal ');'))) + (singleExpression (literal '\n'))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal 'Running test configuration: ')) + (singleExpression testName))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'Test script: ====================================================\n')) + (singleExpression script)) + (singleExpression (literal '=== END script ==================================================')))) )))) (eos ;)))) })))) (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runString) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal 'FAILED test configuration: ')) + (singleExpression testName))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal 'FAILED test script:\n')) + (singleExpression script))) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))) }))))) }))) }))) }))) }))) })))) <EOF>)