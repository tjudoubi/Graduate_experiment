(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (switchStatement switch ( (expressionSequence (singleExpression s)) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal "ƑẦǏŁ"))) :) (caseClause case (expressionSequence (singleExpression (literal "ÌŅ"))) :) (caseClause case (expressionSequence (singleExpression (literal "ṤĻŐⱲ"))) :) (caseClause case (expressionSequence (singleExpression (literal "ṔÄȚĦ"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal "due"))) :) (caseClause case (expressionSequence (singleExpression (literal "to"))) :) (caseClause case (expressionSequence (singleExpression (literal "16-bit"))) :) (caseClause case (expressionSequence (singleExpression (literal "strings"))) : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 43)))) (eos ;)))))) (defaultClause default : (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 44)))) (eos ;))))) })))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function cat ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression b))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression cat) (arguments ( (argument (singleExpression (literal "16-"))) , (argument (singleExpression (literal "bit"))) )))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 43))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result (1): ")) + (singleExpression result))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal "ƑẦǏŁ"))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result (2): ")) + (singleExpression result))) (eos ;)))))) })))))) <EOF>)