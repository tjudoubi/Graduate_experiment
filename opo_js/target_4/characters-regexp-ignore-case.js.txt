(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testH ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /h/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testH)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHe ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /he/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHe)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHel ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /hel/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHel)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHell ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /hell/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHell)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHello ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /hello/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHello)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHelloW ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /hellow/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHelloW)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHelloWo ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /hellowo/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHelloWo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHelloWor ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /hellowor/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHelloWor)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHelloWorl ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /helloworl/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHelloWorl)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testHelloWorld ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName match)) (arguments ( (argument (singleExpression (literal /helloworld/i))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testHelloWorld)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testH) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `H`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHe) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `He`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHel) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `Hel`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHell) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `Hell`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHello) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `Hello`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloW) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloW`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWo) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWo`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWor) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWor`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWorl) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWorl`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWorld) (arguments ( (argument (singleExpression (literal "HelloWorld"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWorld`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testH) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `H`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHe) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `He`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHel) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `Hel`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHell) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `Hell`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHello) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `Hello`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloW) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloW`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWo) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWo`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWor) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWor`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWorl) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWorl`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression testHelloWorld) (arguments ( (argument (singleExpression (literal "HelloWorldこんにちは"))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal `HelloWorld`))) )))) (eos ;)))) })))))) <EOF>)