(program (sourceElements (sourceElement (statement (functionDeclaration function e ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression e)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable d))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) eos))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) eos))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression c)) ) (statement (block { (statementList (statement (functionDeclaration function baz ( ) { functionBody })) (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) (arguments ( (argument (singleExpression y)) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) (arguments ( (argument (singleExpression y)) )))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression d)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) (arguments ( )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ))))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression threw) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression threw))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad test"))) ))))) (eos <EOF>))))))) <EOF>)