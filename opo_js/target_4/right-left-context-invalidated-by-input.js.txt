(program (sourceElements (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable when))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal /bar/)) . (identifierName exec)) (arguments ( (argument (singleExpression (literal "foo bar baz"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function validateContexts ( (formalParameterList (formalParameterArg (assignable when))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression RegExp) . (identifierName leftContext)) !== (singleExpression (literal "foo ")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: ")) + (singleExpression when)) + (singleExpression (literal ": bad leftContext: "))) + (singleExpression (singleExpression RegExp) . (identifierName leftContext)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression RegExp) . (identifierName rightContext)) !== (singleExpression (literal " baz")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: ")) + (singleExpression when)) + (singleExpression (literal ": bad rightContext: "))) + (singleExpression (singleExpression RegExp) . (identifierName rightContext)))) (eos ;)))))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression when) === (singleExpression (literal "before")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression validateContexts) (arguments ( (argument (singleExpression (literal "before"))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RegExp) . (identifierName input)) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression when) === (singleExpression (literal "after")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression validateContexts) (arguments ( (argument (singleExpression (literal "after"))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal "before"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal "after"))) )))) (eos ;))))) <EOF>)