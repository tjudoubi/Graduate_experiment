(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression platformSupportsSamplingProfiler) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./sampling-profiler/samplingProfiler.js"))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression new (singleExpression (singleExpression Error) (arguments ( )))))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression foo)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Error"))) , (arrayElement (singleExpression (literal "foo")))) ]))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression new (singleExpression (singleExpression Function) (arguments ( )))))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression bar)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Function"))) , (arrayElement (singleExpression (literal "bar")))) ]))) )))) (eos ;)))) })))))) <EOF>)