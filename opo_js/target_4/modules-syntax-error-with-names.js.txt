(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function checkModuleSyntaxError ( (formalParameterList (formalParameterArg (assignable source)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression source)) ))))))) , (argument (singleExpression errorMessage)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"const A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a const variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `const A = 20;import A from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"let A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a let variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `let A = 20;import A from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as A from "Cocoa"const A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a const variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `const A = 20;import * as A from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as A from "Cocoa"let A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a let variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `let A = 20;import * as A from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { A } from "Cocoa"const A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a const variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `const A = 20;import { A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { A } from "Cocoa"let A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a let variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `let A = 20;import { A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { B as A } from "Cocoa"const A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a const variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `const A = 20;import { B as A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { B as A } from "Cocoa"let A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a let variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `let A = 20;import { B as A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { A as B } from "Cocoa"const A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `const A = 20;import { A as B } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { A as B } from "Cocoa"let A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `let A = 20;import { A as B } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { A, B as A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { A, A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { C as A, B as A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A, { A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A, { B as A } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A, * as A from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare an imported binding name twice: 'A'.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"const { A } = obj;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '}'. Cannot declare a lexical variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"const [ A ] = array;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'A'. Cannot declare a lexical variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"const { B:A } = obj;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'A'. Cannot declare a lexical variable twice: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"const { A:B } = obj;`)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { A as B } from 'mod'export B from 'mod2'`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'B'. Expected either a declaration or a variable statement.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { A as B } from 'mod'const A = 42;const B = 'Cocoa';`)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { A as B }const B = 'Cocoa';`)) , (argument (singleExpression (literal `SyntaxError: Exported binding 'A' needs to refer to a top-level declared variable.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export default 20;export default function hello () { }`)) , (argument (singleExpression (literal `SyntaxError: Only one 'default' export is allowed.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export default function hello () { }export default 20;`)) , (argument (singleExpression (literal `SyntaxError: Only one 'default' export is allowed.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `var a = 42;var b = 55;export { a as Cocoa, b as Cocoa };`)) , (argument (singleExpression (literal `SyntaxError: Cannot export a duplicate name 'Cocoa'.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `var a = 42;var b = 55;export { a as Cocoa, b as Cocoa };`)) , (argument (singleExpression (literal `SyntaxError: Cannot export a duplicate name 'Cocoa'.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `var Cocoa = 42;var b = 55;export { Cocoa, b as Cocoa };`)) , (argument (singleExpression (literal `SyntaxError: Cannot export a duplicate name 'Cocoa'.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export var Cocoa = 42;var b = 55;export { b as Cocoa };`)) , (argument (singleExpression (literal `SyntaxError: Cannot export a duplicate name 'Cocoa'.:4`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `var a = 42;export { a as Cocoa };export function Cocoa() { }`)) , (argument (singleExpression (literal `SyntaxError: Cannot export a duplicate function name: 'Cocoa'.:5`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `var a = 42;export { a as Cocoa };export class Cocoa { }`)) , (argument (singleExpression (literal `SyntaxError: Cannot export a duplicate class name: 'Cocoa'.:5`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"var A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a var variable that shadows a let/const/class variable: 'A'.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import A from "Cocoa"var A = 20;`)) , (argument (singleExpression (literal `SyntaxError: Cannot declare a var variable that shadows a let/const/class variable: 'A'.:3`))) )))) (eos ;))))) <EOF>)