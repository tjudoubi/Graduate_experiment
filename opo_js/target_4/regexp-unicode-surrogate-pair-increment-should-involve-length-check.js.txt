(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpMatch) (arguments ( (argument (singleExpression re)) , (argument (singleExpression str)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression match) = (singleExpression (singleExpression (singleExpression re) . (identifierName exec)) (arguments ( (argument (singleExpression str)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression match)) || (singleExpression (singleExpression (singleExpression match) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) != (singleExpression str)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression match)) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression re)) + (singleExpression (literal " to match \""))) + (singleExpression str)) + (singleExpression (literal "\" but it didn't")))) (eos ;)))) }))))) }))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpNotMatch) (arguments ( (argument (singleExpression re)) , (argument (singleExpression str)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression match) = (singleExpression (singleExpression (singleExpression re) . (identifierName exec)) (arguments ( (argument (singleExpression str)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression match)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression match)) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression re)) + (singleExpression (literal " to match \""))) + (singleExpression str)) + (singleExpression (literal "\" but it didn't")))) (eos ;)))) }))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testString) = (singleExpression (literal "\ud800\ud800\udc00")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression greedyRegExp) = (singleExpression (literal /([^x]+)[^]*\1([^])/u)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpNotMatch) (arguments ( (argument (singleExpression greedyRegExp)) , (argument (singleExpression testString)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nonGreedyRegExp) = (singleExpression (literal /(.*[^x]+?)[^]*([^])/u)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpMatch) (arguments ( (argument (singleExpression nonGreedyRegExp)) , (argument (singleExpression testString)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testString2) = (singleExpression (literal "\ud800\ud800\udc00Test\udc00123")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression backtrackGreedyRegExp) = (singleExpression (literal /.*[\x20-\udffff].\w*.\d{3}/u)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpMatch) (arguments ( (argument (singleExpression backtrackGreedyRegExp)) , (argument (singleExpression testString2)) )))) (eos ;))))) <EOF>)