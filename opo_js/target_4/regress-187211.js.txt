(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable successCondition))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression successCondition))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression $vm) . (identifierName print)) (arguments ( (argument (singleExpression (literal "FAILED at:"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression $vm) . (identifierName dumpStack)) (arguments ( )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAIL"))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function testNonStrict ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrow2) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression native) = (singleExpression (singleExpression $vm) . (identifierName dataLog)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression native2) = (singleExpression (singleExpression $vm) . (identifierName print)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isNaN) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression foo) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isFinite) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression bar) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isNaN) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression foo) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isFinite) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression bar) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testNonStrict)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testStrict ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable foo) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable bar) = (singleExpression (anoymousFunction function ( ) { functionBody })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arrow) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arrow2) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable native) = (singleExpression (singleExpression $vm) . (identifierName dataLog)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable native2) = (singleExpression (singleExpression $vm) . (identifierName print)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isNaN) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression foo) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isFinite) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression bar) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isNaN) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression foo) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression isFinite) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression bar) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal true)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression arrow2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression native2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) ))) == (singleExpression (literal false)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testStrict)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testNonStrict) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testStrict) (arguments ( )))) (eos ;)))) })))))) <EOF>)