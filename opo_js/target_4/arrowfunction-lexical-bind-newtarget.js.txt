(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function getTarget ( (formalParameterList (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression new . target))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getTarget)) )))) eos))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable undefinedTarget) = (singleExpression (singleExpression (singleExpression getTarget) (arguments ( ))) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression undefinedTarget)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #1.0"))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newTarget) = (singleExpression new (singleExpression (singleExpression (singleExpression getTarget) (arguments ( ))) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression newTarget)) , (argument (singleExpression getTarget)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #2.0"))) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function getTargetWithBlock ( (formalParameterList (formalParameterArg (assignable name))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal false))) ) (statement (returnStatement return (expressionSequence (singleExpression new . target)) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression new . target)) (eos ;)))))))) })))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getTargetWithBlock)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable undefinedTarget) = (singleExpression (singleExpression (singleExpression getTargetWithBlock) (arguments ( ))) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression undefinedTarget)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #1.1"))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newTarget) = (singleExpression new (singleExpression (singleExpression (singleExpression getTargetWithBlock) (arguments ( ))) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression newTarget)) , (argument (singleExpression getTargetWithBlock)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #2.1"))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable passed) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable A) = (singleExpression class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName idValue)) = (singleExpression (literal (numericLiteral 123))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (singleExpression passed) && (singleExpression (singleExpression new . target) === (singleExpression B))))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable B) = (singleExpression class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (singleExpression new . target) === (singleExpression B)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))))) })) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal false)))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression new (singleExpression (singleExpression B) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression passed)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function in constructor #3"))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable C) = (singleExpression class C (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable tryToAccessToVarInArrow))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression tryToAccessToVarInArrow)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName id2)) = (singleExpression newTargetLocal))) (eos ;)))))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression tryToAccessToVarInArrow))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName id)) = (singleExpression newTargetLocal))) (eos ;)))))))) })) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tryToCreateClass) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable val))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression C) (arguments ( (argument (singleExpression val)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression e) instanceof (singleExpression ReferenceError)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression tryToCreateClass) (arguments ( (argument (singleExpression (literal true))) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: newTargetLocal should be hided variable"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression tryToCreateClass) (arguments ( (argument (singleExpression (literal false))) )))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: newTargetLocal should be hided variable"))) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function getTargetBlockScope ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression someValue) = (singleExpression (literal '')))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (literal true))) ) (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression new . target))))) (eos ;)))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression value))))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable undefinedTarget) = (singleExpression (singleExpression (singleExpression getTargetBlockScope) (arguments ( ))) (arguments ( ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression undefinedTarget)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #4"))) )))) (eos ;)))) }))))) (sourceElement (statement (classDeclaration class D (classTail { (classElement (methodDefinition (propertyName (identifierName getNewTarget)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (literal false))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression new . target)) (eos ;)))) })) else (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression new . target)) (eos ;)))) }))))))) }))))) eos))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arr) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (classDeclaration class E (classTail extends (singleExpression D) { (classElement (methodDefinition (propertyName (identifierName getParentNewTarget)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression super) . (identifierName getNewTarget)) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable e) = (singleExpression new (singleExpression (singleExpression E) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable parentNewTarget) = (singleExpression (singleExpression (singleExpression e) . (identifierName getParentNewTarget)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression parentNewTarget)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #5"))) )))) (eos ;)))) }))))) (sourceElement (statement (classDeclaration class F (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression c)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'c=(()=>new.target===F)()'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName result)) = (singleExpression c))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName getNewTargetFromEval)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal '(()=>new.target===F)()'))) )))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression new (singleExpression (singleExpression F) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression f) . (identifierName result))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #6"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) . (identifierName getNewTargetFromEval)) (arguments ( )))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #7"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class G (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'arr = () => new.target'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName arrow)) = (singleExpression arr))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression new (singleExpression (singleExpression G) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression g) . (identifierName arrow)) (arguments ( )))) , (argument (singleExpression G)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #8"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class H (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'arr = () => eval("(() => new.target)()")'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName arrow)) = (singleExpression arr))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression h) = (singleExpression new (singleExpression (singleExpression H) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression h) . (identifierName arrow)) (arguments ( )))) , (argument (singleExpression H)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #9"))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class J (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName result)) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'eval("(() => new.target)()")'))) ))))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression new (singleExpression (singleExpression J) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression j) . (identifierName result))) , (argument (singleExpression J)) , (argument (singleExpression (literal "Error: new.target is not lexically binded inside of the arrow function #10"))) )))) (eos ;))))) <EOF>)