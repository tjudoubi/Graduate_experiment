(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function typeOf ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (literal "string")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dispatcher) = (singleExpression (singleExpression n) % (singleExpression (literal (numericLiteral 3)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression dispatcher) === (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (literal (bigintLiteral 1n))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression dispatcher) === (singleExpression (literal (numericLiteral 1))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (literal "string")))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "symbol"))) ))))) (eos ;)))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression typeof (singleExpression value))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression typeOf)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (switchStatement switch ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 3))))) ) (caseBlock { (caseClauses (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 0)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression typeOf) (arguments ( (argument (singleExpression i)) ))) === (singleExpression (literal "bigint")))) )))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 1)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression typeOf) (arguments ( (argument (singleExpression i)) ))) === (singleExpression (literal "string")))) )))) (eos ;))) (statement (breakStatement break (eos ;))))) (caseClause case (expressionSequence (singleExpression (literal (numericLiteral 2)))) : (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression typeOf) (arguments ( (argument (singleExpression i)) ))) === (singleExpression (literal "symbol")))) )))) (eos ;))) (statement (breakStatement break (eos ;)))))) })))) })))) <EOF>)