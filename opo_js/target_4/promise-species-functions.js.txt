(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression C) = (singleExpression class (classTail extends (singleExpression Promise) { })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression N) = (singleExpression class (classTail { })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression N) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "this should never be called"))) (eos ;)))))) })))) eos))) (sourceElement (statement (functionDeclaration function id ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFunctions) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression Promise) . (identifierName prototype)) . (identifierName then))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression id))) ])))) ])))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression objProp) = (singleExpression (singleExpression Object) . (identifierName defineProperty)))) (eos ;)))) (sourceElement (statement (functionDeclaration function funcThrows ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable args))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression func) . (identifierName call)) (arguments ( (argument ... (singleExpression args)) )))) eos)) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function makeC ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression C) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable resolve))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resolve) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) }))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable testData))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression protoFunction)) , (arrayElement (singleExpression args))) ])) = (singleExpression testData))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable foo) = (singleExpression (singleExpression makeC) (arguments ( ))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable n) = (singleExpression new (singleExpression (singleExpression N) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) = (singleExpression (singleExpression makeC) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression objProp) (arguments ( (argument (singleExpression C)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression undefined)) , (propertyAssignment (propertyName (identifierName writable)) : (singleExpression (literal true))) }))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable bar) = (singleExpression (singleExpression (singleExpression protoFunction) . (identifierName call)) (arguments ( (argument (singleExpression foo)) , (argument ... (singleExpression args)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression bar) instanceof (singleExpression Promise))) ))) || (singleExpression (singleExpression bar) instanceof (singleExpression C)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression C) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) = (singleExpression (singleExpression (singleExpression protoFunction) . (identifierName call)) (arguments ( (argument (singleExpression foo)) , (argument ... (singleExpression args)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression bar) instanceof (singleExpression Promise))) ))) || (singleExpression (singleExpression bar) instanceof (singleExpression C)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable called) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function species ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression called) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression C) (arguments ( (argument ... (singleExpression arguments)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression C) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression species))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) = (singleExpression (singleExpression (singleExpression protoFunction) . (identifierName call)) (arguments ( (argument (singleExpression foo)) , (argument ... (singleExpression args)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression bar) instanceof (singleExpression Promise))) ))) || (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression bar) instanceof (singleExpression C))) )))) || (singleExpression ! (singleExpression called)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "failed on ")) + (singleExpression protoFunction))) )))) (eos ;)))))) (sourceElement (statement (functionDeclaration function speciesThrows ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression C) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression speciesThrows))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression funcThrows) (arguments ( (argument (singleExpression protoFunction)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression foo)) , (arrayElement ... (singleExpression args))) ]))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "didn't throw"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression C) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression funcThrows) (arguments ( (argument (singleExpression protoFunction)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression foo)) , (arrayElement ... (singleExpression args))) ]))) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "didn't throw"))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testFunctions) . (identifierName forEach)) (arguments ( (argument (singleExpression test)) )))) (eos ;))))) <EOF>)