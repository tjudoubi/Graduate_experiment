(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functions) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'sin'))) , (arrayElement (singleExpression (literal 'sinh'))) , (arrayElement (singleExpression (literal 'cos'))) , (arrayElement (singleExpression (literal 'cosh'))) , (arrayElement (singleExpression (literal 'tan'))) , (arrayElement (singleExpression (literal 'tanh'))) , (arrayElement (singleExpression (literal 'asin'))) , (arrayElement (singleExpression (literal 'asinh'))) , (arrayElement (singleExpression (literal 'acos'))) , (arrayElement (singleExpression (literal 'acosh'))) , (arrayElement (singleExpression (literal 'atan'))) , (arrayElement (singleExpression (literal 'atanh'))) , (arrayElement (singleExpression (literal 'log'))) , (arrayElement (singleExpression (literal 'log10'))) , (arrayElement (singleExpression (literal 'log1p'))) , (arrayElement (singleExpression (literal 'log2'))) , (arrayElement (singleExpression (literal 'cbrt'))) , (arrayElement (singleExpression (literal 'exp'))) , (arrayElement (singleExpression (literal 'expm1')))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression repository) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) func))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression functions)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression wrap) = (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `return Math.${func}()`))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression wrap)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression repository) [ (expressionSequence (singleExpression func)) ]) = (singleExpression wrap))) (eos ;)))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) func)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression functions)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Number) . (identifierName isNaN)) (arguments ( (argument (singleExpression (singleExpression (singleExpression repository) [ (expressionSequence (singleExpression func)) ]) (arguments ( )))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) })))) <EOF>)