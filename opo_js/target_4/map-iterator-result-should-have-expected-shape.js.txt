(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression iterator) = (singleExpression (singleExpression (singleExpression map) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression result)) ))) . (identifierName sort)) (arguments ( )))) )))) , (argument (singleExpression (literal `["done","value"]`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName done))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName value))) )))) , (argument (singleExpression (literal `[42,42]`))) )))) (eos ;)))) })) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression result)) ))) . (identifierName sort)) (arguments ( )))) )))) , (argument (singleExpression (literal `["done","value"]`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName done))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName value))) , (argument (singleExpression undefined)) )))) (eos ;)))) }))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression iterator) = (singleExpression (singleExpression (singleExpression map) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyNames)) (arguments ( (argument (singleExpression result)) ))) . (identifierName sort)) (arguments ( )))) )))) , (argument (singleExpression (literal `["done","value"]`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName done))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName value))) , (argument (singleExpression undefined)) )))) (eos ;)))) }))) })))) <EOF>)