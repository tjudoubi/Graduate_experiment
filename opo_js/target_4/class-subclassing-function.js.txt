(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression F) = (singleExpression class (classTail extends (singleExpression Function) { })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression N) = (singleExpression class (classTail extends (singleExpression (literal null)) { })))) eos))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression new (singleExpression (singleExpression F) (arguments ( (argument (singleExpression (literal "x"))) , (argument (singleExpression (singleExpression (singleExpression (literal "return x + ")) + (singleExpression i)) + (singleExpression (literal ";")))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression C) = (singleExpression new (singleExpression (singleExpression F) (arguments ( (argument (singleExpression (literal "x"))) , (argument (singleExpression (singleExpression (literal "this.x = x; this.i = ")) + (singleExpression i))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression f) instanceof (singleExpression Function)) && (singleExpression (singleExpression f) instanceof (singleExpression F)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "bad chain"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "function was not called correctly"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression new (singleExpression (singleExpression C) (arguments ( (argument (singleExpression (literal "hello"))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression o) . (identifierName x)) !== (singleExpression (literal "hello"))) || (singleExpression (singleExpression (singleExpression o) . (identifierName i)) !== (singleExpression i)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "function as constructor was not correct"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression new (singleExpression (singleExpression F) (arguments ( (argument (singleExpression (literal "x"))) , (argument (singleExpression (literal "y"))) , (argument (singleExpression (literal "return this.foo + x + y"))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName call)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 1)))) }))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "function was not .callable"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g2) = (singleExpression (singleExpression (singleExpression g) . (identifierName bind)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 1)))) }))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression g2) instanceof (singleExpression F))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "the binding of a subclass should inherit from the bound function's class"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression g2) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) !== (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "binding didn't work"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bound) = (singleExpression (singleExpression (singleExpression C) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) ))))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression bound) . (identifierName __proto__)) !== (singleExpression (singleExpression C) . (identifierName __proto__)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "binding with null as prototype didn't work"))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression i)) )))) (eos ;))))))) <EOF>)