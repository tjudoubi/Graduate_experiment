(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression msg)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testSyntax ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) + (singleExpression (literal "\n       evaluating `"))) + (singleExpression script)) + (singleExpression (literal "`")))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Expected syntax error not thrown\n       evaluating `")) + (singleExpression script)) + (singleExpression (literal "`")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression typeof (singleExpression message)) === (singleExpression (literal "string"))) && (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) + (singleExpression (literal "\n       evaluating `"))) + (singleExpression script)) + (singleExpression (literal "`")))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function testTopLevelAsyncAwaitSyntaxSloppyMode ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `({async: 1})`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = !await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = ~await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = typeof await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = void await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = !(await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = ~(await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = typeof (await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = void (await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = !!await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = ~~await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = typeof typeof await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function() { var t = void void await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async function withName() { await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => !await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => ~await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => typeof await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => void await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => - await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => + await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => delete await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => !!await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => ~~await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => typeof typeof await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async () => void void await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async x => await x + 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `function foo(fn) { fn({ async: true }); }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `async function asyncFn() { await 1; }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var O = { async method() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var O = { async ['meth' + 'od']() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var O = { async 'method'() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var O = { async 0() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var O = { async function() {} };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async method() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async ['meth' + 'od']() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async 'method'() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async 0() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async({ foo = 1 }) => foo;`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `var asyncFn = async({ foo = 1 } = {}) => foo;`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `function* g() { var f = async(yield); }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `function* g() { var f = async(x = yield); }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C {}; class C2 extends C { async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { static async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C {}; class C2 extends C { static async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C {}; class C2 extends C { async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { static async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C {}; class C2 extends C { static async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { async 'function'() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C {}; class C2 extends C { async 'function'() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C { static async 'function'() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `class C {}; class C2 extends C { static async 'function'() {} }`))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function testTopLevelAsyncAwaitSyntaxStrictMode ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; ({async: 1})`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = ~await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = +await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = -await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = typeof await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = void await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !(await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = ~(await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = -(await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = +(await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = typeof (await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = void (await 1); };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !!await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = ~~await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = typeof typeof await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = void void await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !!await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !~await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !typeof typeof await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function() { var t = !void void await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async function withName() { await 1; };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async () => await 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async x => await x + 'test';`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; function foo(fn) { fn({ async: true }); }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; async function asyncFn() { await 1; }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var O = { async method() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var O = { async ['meth' + 'od']() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var O = { async 'method'() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var O = { async 0() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async method() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async ['meth' + 'od']() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async 'method'() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async 0() { await 1; } };`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async({ foo = 1 }) => foo;`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; var asyncFn = async({ foo = 1 } = {}) => foo;`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; function* g() { var f = async(yield); }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; function* g() { var f = async(x = yield); }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { static async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { static async ['function']() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { static async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { static async function() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { async 'function'() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { async 'function'() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C { static async 'function'() {} }`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; class C {}; class C2 extends C { static async 'function'() {} }`))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function testNestedAsyncAwaitSyntax ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable contextData) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "function outerFunction() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " }"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "function* outerGenerator() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " }"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerFuncExpr = function() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerGenExpr = function*() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerObject = { outerMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerObject = { *outerGenMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerClassExpr = class C { outerMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerClassExpr = class C { *outerGenMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerClassExpr = class C { static outerStaticMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerClassExpr = class C { static *outerStaticGenMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "class outerClass { outerMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "class outerClass { *outerGenMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "class outerClass { static outerStaticMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "class outerClass { static *outerStaticGenMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerArrow = () => { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "async function outerAsyncFunction() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " }"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerAsyncFuncExpr = async function() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerAsyncArrowFunc = async () => { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerObject = { async outerAsyncMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerClassExpr = class C { async outerAsyncMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "var outerClassExpr = class C { static async outerStaticAsyncMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "class outerClass { async outerAsyncMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName prefix)) : (singleExpression (literal "class outerClass { static async outerStaticAsyncMethod() { "))) , (propertyAssignment (propertyName (identifierName suffix)) : (singleExpression (literal " } };"))) }))) ,) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testData) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal `var async = 1; return async;`))) , (arrayElement (singleExpression (literal `let async = 1; return async;`))) , (arrayElement (singleExpression (literal `const async = 1; return async;`))) , (arrayElement (singleExpression (literal `function async() {} return async();`))) , (arrayElement (singleExpression (literal `var async = async => async; return async();`))) , (arrayElement (singleExpression (literal `function foo() { var await = 1; return await; }`))) , (arrayElement (singleExpression (literal `function foo(await) { return await; }`))) , (arrayElement (singleExpression (literal `function* foo() { var await = 1; return await; }`))) , (arrayElement (singleExpression (literal `function* foo(await) { return await; }`))) , (arrayElement (singleExpression (literal `var f = () => { var await = 1; return await; }`))) , (arrayElement (singleExpression (literal `var O = { method() { var await = 1; return await; } };`))) , (arrayElement (singleExpression (literal `var O = { method(await) { return await; } };`))) , (arrayElement (singleExpression (literal `var O = { *method() { var await = 1; return await; } };`))) , (arrayElement (singleExpression (literal `var O = { *method(await) { return await; } };`))) , (arrayElement (singleExpression (literal `(function await() {})`))) , (arrayElement (singleExpression (literal `(function () { await => {}; })`))) , (arrayElement (singleExpression (literal `(function () { (await) => {}; })`))) , (arrayElement (singleExpression (literal `(function () { (x = await => {}) => {}; })`))) , (arrayElement (singleExpression (literal `(function () { (x = (await) => {}) => {}; })`))) , (arrayElement (singleExpression (literal `(function () { (x = await /1/g) => {}; })`))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) context))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression contextData)) eos))))) <missing '}'>)))) ))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) test)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression testData)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression script) = (singleExpression (singleExpression (singleExpression (singleExpression context) . (identifierName prefix)) + (singleExpression test)) + (singleExpression (singleExpression context) . (identifierName suffix))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression script)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal `"use strict"; ${script}`))) )))) (eos ;)))) }))) })))) } ) ( ) ; ( function testTopLevelAsyncAwaitSyntaxSloppyMode ( ) { testSyntaxError ( `({ async         foo() {} })` ) ; testSyntaxError ( `({async =  1})` ) ; testSyntaxError ( `var asyncFn = async function await() {}` ) ; testSyntaxError ( `var asyncFn = async () => var await = 'test';` ) ; testSyntaxError ( `var asyncFn = async () => { var await = 'test'; };` ) ; testSyntaxError ( `var asyncFn = async await => await + 'test'` ) ; testSyntaxError ( `var asyncFn = async function(await) {}` ) ; testSyntaxError ( `var asyncFn = async function withName(await) {}` ) ; testSyntaxError ( `var asyncFn = async (await) => 'test';` ) ; testSyntaxError ( `async function asyncFunctionDeclaration(await) {}` ) ; testSyntaxError ( `var outerObject = { async method(a, a) {} }` ) ; testSyntaxError ( `var outerObject = { async ['meth' + 'od'](a, a) {} }` ) ; testSyntaxError ( `var outerObject = { async 'method'(a, a) {} }` ) ; testSyntaxError ( `var outerObject = { async 0(a, a) {} }` ) ; testSyntaxError ( `var outerObject = { async method(a, {a}) {} }` ) ; testSyntaxError ( `var outerObject = { async method({a}, a) {} }` ) ; testSyntaxError ( `var outerObject = { async method({a}, {a}) {} }` ) ; testSyntaxError ( `var outerObject = { async method(a, ...a) {} }` ) ; testSyntaxError ( `var outerObject = { async method({a}, ...a) {} }` ) ; testSyntaxError ( `var outerObject = { async method(a, ...a) {} }` ) ; testSyntaxError ( `var outerObject = { async method({a, ...a}) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function(a, {a}) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function({a}, a) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function({a}, {a}) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function(a, ...a) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function({a}, ...a) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function(a, ...a) {} }` ) ; testSyntaxError ( `var outerObject = { func: async function({a, ...a}) {} }` ) ; testSyntaxError ( `var asyncArrowFn = async() => await;` ) ; testSyntaxError ( `var O = { *async asyncGeneratorMethod() {} };` ) ; testSyntaxError ( `var O = { async asyncGeneratorMethod*() {} };` ) ; testSyntaxError ( `var asyncFn = async function(x = await 1) { return x; }` ) ; testSyntaxError ( `async function f(x = await 1) { return x; }` ) ; testSyntaxError ( `var f = async(x = await 1) => x;` ) ; testSyntaxError ( `var O = { async method(x = await 1) { return x; } };` ) ; testSyntaxError ( `function* outerGenerator() { var asyncArrowFn = async yield => 1; }` ) ; testSyntaxError ( `function* outerGenerator() { var asyncArrowFn = async(yield) => 1; }` ) ; testSyntaxError ( `function* outerGenerator() { var asyncArrowFn = async(x = yield) => 1; }` ) ; testSyntaxError ( `function* outerGenerator() { var asyncArrowFn = async({x = yield}) => 1; }` ) ; testSyntaxError ( `class C { async constructor() {} }` ) ; testSyntaxError ( `class C {}; class C2 extends C { async constructor() {} }` ) ; testSyntaxError ( `class C { static async prototype() {} }` ) ; testSyntaxError ( `class C {}; class C2 extends C { static async prototype() {} }` ) ; testSyntaxError ( `var f = async() => ((async(x = await 1) => x)();` ) ; testSyntaxError ( `(async function foo1() { } foo2 => 1)` ) ; testSyntaxError ( `(async function foo3() { } () => 1)` ) ; testSyntaxError ( `(async function foo4() { } => 1)` ) ; testSyntaxError ( `(async function() { } foo5 => 1)` ) ; testSyntaxError ( `(async function() { } () => 1)` ) ; testSyntaxError ( `(async function() { } => 1)` ) ; testSyntaxError ( `(async.foo6 => 1)` ) ; testSyntaxError ( `(async.foo7 foo8 => 1)` ) ; testSyntaxError ( `(async.foo9 () => 1)` ) ; testSyntaxError ( `(async().foo10 => 1)` ) ; testSyntaxError ( `(async().foo11 foo12 => 1)` ) ; testSyntaxError ( `(async().foo13 () => 1)` ) ; testSyntaxError ( `(async['foo14'] => 1)` ) ; testSyntaxError ( `(async['foo15'] foo16 => 1)` ) ; testSyntaxError ( `(async['foo17'] () => 1)` ) ; testSyntaxError ( `(async()['foo18'] => 1)` ) ; testSyntaxError ( `(async()['foo19'] foo20 => 1)` ) ; testSyntaxError ( `(async()['foo21'] () => 1` ) ; testSyntaxError ( "(async`foo22` => 1)" ) ; testSyntaxError ( "(async`foo23` foo24 => 1)" ) ; testSyntaxError ( "(async`foo25` () => 1)" ) ; testSyntaxError ( "(async`foo26`.bar27 => 1)" ) ; testSyntaxError ( "(async`foo28`.bar29 foo30 => 1)" ) ; testSyntaxError ( "(async`foo31`.bar32 () => 1)" ) ; testSyntaxError ( `function async() {}                     async({ foo33 = 1 })` ) ; } ) ( ) ; ( function testTopLevelAsyncAwaitSyntaxStrictMode ( ) { testSyntaxError ( `"use strict"; ({ async         foo() {} })` ) ; testSyntaxError ( `"use strict"; ({async =  1})` ) ; testSyntaxError ( `"use strict"; var asyncFn = async function await() {}` ) ; testSyntaxError ( `"use strict"; var asyncFn = async () => var await = 'test';` ) ; testSyntaxError ( `"use strict"; var asyncFn = async () => { var await = 'test'; };` ) ; testSyntaxError ( `"use strict"; var asyncFn = async await => await + 'test'` ) ; testSyntaxError ( `"use strict"; var asyncFn = async function(await) {}` ) ; testSyntaxError ( `"use strict"; var asyncFn = async function withName(await) {}` ) ; testSyntaxError ( `"use strict"; var asyncFn = async (await) => 'test';` ) ; testSyntaxError ( `"use strict"; async function asyncFunctionDeclaration(await) {}` ) ; testSyntaxError ( `"use strict"; var outerObject = { async method(a, a) {} }` ) ; testSyntaxError ( `"use strict"; var outerObject = { async ['meth' + 'od'](a, a) {} }` ) ; testSyntaxError ( `"use strict"; var outerObject = { async 'method'(a, a) {} }` ) ; testSyntaxError ( `"use strict"; var outerObject = { async 0(a, a) {} }` ) ; testSyntaxError ( `"use strict"; var asyncArrowFn = async() => await;` ) ; testSyntaxError ( `"use strict"; var O = { *async asyncGeneratorMethod() {} };` ) ; testSyntaxError ( `"use strict"; var O = { async asyncGeneratorMethod*() {} };` ) ; testSyntax ( `"use strict"; var O = { async function() {} };` ) ; testSyntaxError ( `"use strict"; var asyncFn = async function(x = await 1) { return x; }` ) ; testSyntaxError ( `"use strict"; async function f(x = await 1) { return x; }` ) ; testSyntaxError ( `"use strict"; var f = async(x = await 1) => x;` ) ; testSyntaxError ( `"use strict"; var O = { async method(x = await 1) { return x; } };` ) ; testSyntaxError ( `"use strict"; function* outerGenerator() { var asyncArrowFn = async yield => 1; }` ) ; testSyntaxError ( `"use strict"; function* outerGenerator() { var asyncArrowFn = async(yield) => 1; }` ) ; testSyntaxError ( `"use strict"; function* outerGenerator() { var asyncArrowFn = async(x = yield) => 1; }` ) ; testSyntaxError ( `"use strict"; function* outerGenerator() { var asyncArrowFn = async({x = yield}) => 1; }` ) ; testSyntaxError ( `"use strict"; class C { async constructor() {} }` ) ; testSyntaxError ( `"use strict"; class C {}; class C2 extends C { async constructor() {} }` ) ; testSyntaxError ( `"use strict"; class C { static async prototype() {} }` ) ; testSyntaxError ( `"use strict"; class C {}; class C2 extends C { static async prototype() {} }` ) ; testSyntaxError ( `"use strict"; var f = async() => ((async(x = await 1) => x)();` ) ; testSyntaxError ( `"use strict"; (async function foo1() { } foo2 => 1)` ) ; testSyntaxError ( `"use strict"; (async function foo3() { } () => 1)` ) ; testSyntaxError ( `"use strict"; (async function foo4() { } => 1)` ) ; testSyntaxError ( `"use strict"; (async function() { } foo5 => 1)` ) ; testSyntaxError ( `"use strict"; (async function() { } () => 1)` ) ; testSyntaxError ( `"use strict"; (async function() { } => 1)` ) ; testSyntaxError ( `"use strict"; (async.foo6 => 1)` ) ; testSyntaxError ( `"use strict"; (async.foo7 foo8 => 1)` ) ; testSyntaxError ( `"use strict"; (async.foo9 () => 1)` ) ; testSyntaxError ( `"use strict"; (async().foo10 => 1)` ) ; testSyntaxError ( `"use strict"; (async().foo11 foo12 => 1)` ) ; testSyntaxError ( `"use strict"; (async().foo13 () => 1)` ) ; testSyntaxError ( `"use strict"; (async['foo14'] => 1)` ) ; testSyntaxError ( `"use strict"; (async['foo15'] foo16 => 1)` ) ; testSyntaxError ( `"use strict"; (async['foo17'] () => 1)` ) ; testSyntaxError ( `"use strict"; (async()['foo18'] => 1)` ) ; testSyntaxError ( `"use strict"; (async()['foo19'] foo20 => 1)` ) ; testSyntaxError ( `"use strict"; (async()['foo21'] () => 1)` ) ; testSyntaxError ( '"use strict"; (async`foo22` => 1)' ) ; testSyntaxError ( '"use strict"; (async`foo23` foo24 => 1)' ) ; testSyntaxError ( '"use strict"; (async`foo25` () => 1)' ) ; testSyntaxError ( '"use strict"; (async`foo26`.bar27 => 1)' ) ; testSyntaxError ( '"use strict"; (async`foo28`.bar29 foo30 => 1)' ) ; testSyntaxError ( '"use strict"; (async`foo31`.bar32 () => 1)' ) ; testSyntaxError ( `"use strict"; function async() {}                     async({ foo33 = 1 })` ) ; testSyntaxError ( `"use strict"; var O = { async method(eval) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async ['meth' + 'od'](eval) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async 'method'(eval) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async 0(eval) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async method(arguments) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async ['meth' + 'od'](arguments) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async 'method'(arguments) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async 0(arguments) {} }` ) ; testSyntaxError ( `"use strict"; var O = { async method(dupe, dupe) {} }` ) ; } ) ( ) ; ( function testAwaitInFormalParameters ( ) { var testData = [ `async function f(await) {}` , `async function f(...await) {}` , `async function f(await = 1) {}` , `async function f([await]) {}` , `async function f([await = 1]) {}` , `async function f({ await }) {}` , `async function f({ await = 1 }) {}` , `async function f({ } = await) {}` , `(async function(await) {})` , `(async function(...await) {})` , `(async function(await = 1) {})` , `(async function([await]) {})` , `(async function([await = 1]) {})` , `(async function({ await }) {})` , `(async function({ await = 1 }) {})` , `(async function({ } = await) {})` , `var asyncArrow = async(await) => 1;` , `var asyncArrow = async(await) => {};` , `var asyncArrow = async(...await) => 1;` , `var asyncArrow = async(...await) => {};` , `var asyncArrow = async(await = 1) => 1;` , `var asyncArrow = async(await = 1) => {};` , `var asyncArrow = async([await]) => 1;` , `var asyncArrow = async([await]) => {};` , `var asyncArrow = async([await = 1]) => 1;` , `var asyncArrow = async([await = 1]) => {};` , `var asyncArrow = async([] = await) => 1;` , `var asyncArrow = async([] = await) => {};` , `var asyncArrow = async({ await }) => 1;` , `var asyncArrow = async({ await } ) => {};` , `var asyncArrow = async({ await = 1}) => 1;` , `var asyncArrow = async({ await = 1}) => {};` , `var asyncArrow = async({ } = await) => 1;` , `var asyncArrow = async({ } = await) => {};` , `var asyncArrow = async() => { (x = await => {}) => {} };` , `var asyncArrow = async() => { (x = (await) => {}) => {} };` , `var asyncArrow = async() => { (x = await /1/g) => {} };` , `({ async method(await) {} })` , `({ async method(...await) {} })` , `({ async method(await = 1) {} })` , `({ async method([await]) {} })` , `({ async method([await = 1]) {} })` , `({ async method({ await }) {} })` , `({ async method({ await = 1 }) {} })` , `({ async method({ } = await) {} })` , `(class { async method(await) {} })` , `(class { async method(...await) {} })` , `(class { async method(await = 1) {} })` , `(class { async method([await]) {} })` , `(class { async method([await = 1]) {} })` , `(class { async method({ await }) {} })` , `(class { async method({ await = 1 }) {} })` , `(class { async method({ } = await) {} })` , `(class { static async method(await) {} })` , `(class { static async method(...await) {} })` , `(class { static async method(await = 1) {} })` , `(class { static async method([await]) {} })` , `(class { static async method([await = 1]) {} })` , `(class { static async method({ await }) {} })` , `(class { static async method({ await = 1 }) {} })` , `(class { static async method({ } = await) {} })` , ] ; for ( let script of testData ) { testSyntaxError ( script ) ; testSyntaxError ( `"use strict"; ${script}` ) ; var nested = `var await; var f = (async function() { ${script} });` ; testSyntaxError ( nested ) ; testSyntaxError ( `"use strict"; ${nested}` ) ; } } ) ( ) ; testSyntaxError ( `async function fn(arguments) {    "use strict";}` , `SyntaxError: Invalid parameters or function name in strict mode.` ) ; testSyntaxError ( `async function fn(eval) {    "use strict";}` , `SyntaxError: Invalid parameters or function name in strict mode.` ) ; testSyntaxError ( `async function arguments() {    "use strict";}` , `SyntaxError: 'arguments' is not a valid function name in strict mode.` ) ; testSyntaxError ( `async function eval() {    "use strict";}` , `SyntaxError: 'eval' is not a valid function name in strict mode.` ) ; testSyntaxError ( `async function fn(a) {    let a = 1;}` , `SyntaxError: Cannot declare a let variable twice: 'a'.` ) ; testSyntaxError ( `async function fn(b) {    const b = 1;}` , `SyntaxError: Cannot declare a const variable twice: 'b'.` ) ; ( function testMethodDefinition ( ) { testSyntax ( "({ async [foo]() {} })" ) ; testSyntax ( "({ async [Symbol.asyncIterator]() {} })" ) ; testSyntax ( "({ async 0() {} })" ) ; testSyntax ( "({ async 'string'() {} })" ) ; testSyntax ( "({ async ident() {} })" ) ; testSyntax ( "(class { async [foo]() {} })" ) ; testSyntax ( "(class { async [Symbol.asyncIterator]() {} })" ) ; testSyntax ( "(class { async 0() {} })" ) ; testSyntax ( "(class { async 'string'() {} })" ) ; testSyntax ( "(class { async ident() {} })" ) ; testSyntax ( "(class { static async [foo]() {} })" ) ; testSyntax ( "(class { static async [Symbol.asyncIterator]() {} })" ) ; testSyntax ( "(class { static async 0() {} })" ) ; testSyntax ( "(class { static async 'string'() {} })" ) ; testSyntax ( "(class { static async ident() {} })" ) ; } ) ( ) ; ( function testLineTerminator ( ) { let testLineFeedErrors = ( prefix , suffix ) => { testSyntaxError ( `${prefix}                         ${suffix}` ) ; testSyntaxError ( `${prefix} ${suffix}` ) ; testSyntaxError ( `${prefix}                         ${suffix}` ) ; testSyntaxError ( `"use strict";${prefix}                         ${suffix}` ) ; testSyntaxError ( `"use strict";${prefix} ${suffix}` ) ; testSyntaxError ( `"use strict";${prefix}                         ${suffix}` ) ; } ; let testLineFeeds = ( prefix , suffix ) => { testSyntax ( `${prefix}                    ${suffix}` ) ; testSyntax ( `${prefix}${suffix}` ) ; testSyntax ( `${prefix}                    ${suffix}` ) ; testSyntax ( `"use strict";${prefix}                    ${suffix}` ) ; testSyntax ( `"use strict";${prefix}${suffix}` ) ; testSyntax ( `"use strict";${prefix}                    ${suffix}` ) ; } ; let tests = [ { prefix : "({ async" , suffix : "method() {} }).method" } , { prefix : "(class { async" , suffix : "method() {} }).prototype.method" } , { prefix : "(async" , suffix : "param => 1)" } , { prefix : "(async" , suffix : "(param) => 1)" } , { prefix : "(async" , suffix : "param => {})" } , { prefix : "(async" , suffix : "(param) => {})" } , ] ; for ( let { prefix , suffix } of tests ) { testSyntax ( `${prefix} ${suffix}` ) ; testSyntax ( `"use strict";${prefix} ${suffix}` ) ; shouldBe ( "function" , typeof eval ( `${prefix} ${suffix}` ) ) ; shouldBe ( "function" , typeof eval ( `"use strict";${prefix} ${suffix}` ) ) ; testLineFeedErrors ( prefix , suffix ) ; } testSyntax ( "async function foo() {}" ) ; testLineFeeds ( "async" , "function foo() {}" ) ; testSyntax ( "var x = async function foo() {}" ) ; testSyntax ( "'use strict';var x = async function foo() {}" ) ; testLineFeeds ( "var x = async" , "function foo() {}" ) ; testLineFeedErrors ( "var x = async" , "function() {}" ) ; } ) ( ) ;)