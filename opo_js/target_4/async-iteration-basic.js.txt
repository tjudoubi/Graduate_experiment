(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assert) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error in assert. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but was "'))) + (singleExpression result)) + (singleExpression (literal '":'))) + (singleExpression message))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable Logger) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable type)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable done))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (singleExpression type)) , (propertyAssignment (singleExpression value)) , (propertyAssignment (singleExpression done)) }))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logFulfilledEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable done))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression value)) , (argument (singleExpression done)) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logRejectEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'reject'))) , (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logCatchEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters value) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'catch'))) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName getLogger)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression log)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName clear)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))))) }))))) eos))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable fulfillSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters result) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logFulfilledEvent)) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName value))) , (argument (singleExpression (singleExpression result) . (identifierName done))) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable rejectSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logRejectEvent)) (arguments ( (argument (singleExpression error)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable catchSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logCatchEvent)) (arguments ( (argument (singleExpression error)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable assertLogger) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable loggerObject))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable logger) = (singleExpression (singleExpression (singleExpression loggerObject) . (identifierName getLogger)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable _assertLogger) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable isNotOutOfLength) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression index) < (singleExpression (singleExpression logger) . (identifierName length)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal `Index is greater then log length`))) )))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fullfilled)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on fulfill')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal false))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fullfilledDone)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on fulfill with done true')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName rejected)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on reject')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'reject'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName catched)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedError)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on catch')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'catch'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedError)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isFinal)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable message) = (singleExpression (literal '')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression index)) , (argument (singleExpression (singleExpression logger) . (identifierName length))) , (argument (singleExpression (literal `expected final step: ${message}`))) )))) (eos ;)))))) })))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression _assertLogger) (arguments ( ))))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable getPromise) = (singleExpression (anoymousFunction (arrowFunctionParameters promiseHolder) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Promise) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable resolve)) , (formalParameterArg (assignable reject))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) = (singleExpression resolve))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) = (singleExpression reject))) (eos ;)))))) })))) ))))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * generator ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable passed) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iterator) = (singleExpression (singleExpression generator) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable step))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression iterator) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName asyncIterator))) ]) (arguments ( ))) === (singleExpression iterator)) && (singleExpression (singleExpression (singleExpression step) . (identifierName done)) === (singleExpression (literal false)))) && (singleExpression (singleExpression (singleExpression step) . (identifierName value)) === (singleExpression (literal (numericLiteral 42)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal true)))) (eos ;)))))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression passed)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal ''))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression generator) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName toStringTag))) ])) , (argument (singleExpression (literal 'AsyncGeneratorFunction'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName toString)) . (identifierName call)) (arguments ( (argument (singleExpression generator)) )))) , (argument (singleExpression (literal '[object AsyncGeneratorFunction]'))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable logger) = (singleExpression new (singleExpression (singleExpression Logger) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * baz ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression reply) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression t) + (singleExpression (literal ' data-0'))) + (singleExpression value))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression last) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression t) + (singleExpression (literal ' data-1'))) + (singleExpression reply))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal 'data-result')) + (singleExpression last))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bz1) = (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal ':init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':0'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':1'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz1) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':2'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'abcd'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-0:init'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-1:1'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression (literal 'data-result:2'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bz2) = (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal ':init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':0'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':1'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression bz2) . (identifierName next)) (arguments ( (argument (singleExpression (literal ':2'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName reject)) (arguments ( (argument (singleExpression (literal 'abcd'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'abcd'))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable holder1) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder2) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise1) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder1)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise2) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder2)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * boo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t1) = (singleExpression await (singleExpression promise1)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t1) + (singleExpression (literal ' data-1')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t1) + (singleExpression (literal ' data-2')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t2) = (singleExpression await (singleExpression promise2)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t2) + (singleExpression (literal ' data-3')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t2) + (singleExpression (literal ' data-4')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'data-5'))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression boo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName isFinal)) (arguments ( (argument (singleExpression (literal 'async generator should not resolve any promise until await is no resolved'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder1) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'abcd'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-2'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder2) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'efgh'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-2'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'efgh data-3'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'efgh data-4'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression (literal 'data-5'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression print) (arguments ( (argument (singleExpression error)) ))))))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression await (singleExpression (literal 'abcd'))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal ' data-5')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t2) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t2) + (singleExpression (literal ' data-6')))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable f) = (singleExpression (singleExpression foo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-5'))) ))) . (identifierName isFinal)) (arguments ( (argument (singleExpression (literal 'async generator should not resolve any promise until await is not resolved'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-5'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'xyz data-6'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( (argument (singleExpression (literal 'async generator should not resolve any promise until await is not resolved'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * goo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'data-5'))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal ' data-6')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal ' data-7')))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorText) = (singleExpression (literal 'error-reject')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable g) = (singleExpression (singleExpression goo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-5'))) ))) . (identifierName isFinal)) (arguments ( (argument (singleExpression (literal 'async generator should not resolve any promise until await is not resolved'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression g) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-5'))) ))) . (identifierName isFinal)) (arguments ( (argument (singleExpression (literal 'async generator should not resolve any promise until await is not resolved'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName reject)) (arguments ( (argument (singleExpression errorText)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-5'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression errorText)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal 'After reject all resolved value have undefined'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable someText) = (singleExpression (literal 'foo')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable resolveText) = (singleExpression (literal 'bar')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (classDeclaration class A (classTail { (classElement async (methodDefinition * (propertyName (identifierName foo)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression someText)) (eos ;)))))) })) (classElement async (methodDefinition * (propertyName (identifierName boo)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable text) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) + (singleExpression someText))) (eos ;)))))) })) })))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression new (singleExpression A)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable gf) = (singleExpression (singleExpression (singleExpression a) . (identifierName foo)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression gf) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression someText)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable gb) = (singleExpression (singleExpression (singleExpression a) . (identifierName boo)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression gb) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression someText)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression resolveText)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression someText)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (singleExpression resolveText) + (singleExpression someText))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable asyncGenExp) = (singleExpression (anoymousFunction async function * ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression t) + (singleExpression someText)) + (singleExpression someText))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable gAsyncGenExp) = (singleExpression (singleExpression asyncGenExp) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression gAsyncGenExp) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression resolveText)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (singleExpression (singleExpression resolveText) + (singleExpression someText)) + (singleExpression someText))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * joo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'data-1'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'data-2'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal 'data-3'))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorTextInFunction) = (singleExpression (literal "ErrorInFunction")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable errorWrongGenerator) = (singleExpression (literal "|this| should be an async generator")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorRaised) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression value)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression j) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorTextInFunction)) ))))) )))) (eos ;)))))) }))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression error)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression j) . (identifierName next)) (arguments ( )))) (eos ;)))))) }))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-1'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorTextInFunction)) ))))) )) . (identifierName toString)) (arguments ( )))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j1) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j2) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable returnValue) = (singleExpression (literal 'return-value')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression returnValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression returnValue)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TypeError) (arguments ( (argument (singleExpression errorWrongGenerator)) ))))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TypeError) (arguments ( (argument (singleExpression errorWrongGenerator)) ))))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-2'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-3'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TypeError) (arguments ( (argument (singleExpression errorWrongGenerator)) ))))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-2'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-3'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TypeError) (arguments ( (argument (singleExpression errorWrongGenerator)) ))))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-1'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-2'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'data-3'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression (objectLiteral { }))) ))) . (identifierName (reservedWord (keyword catch)))) (arguments ( (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TypeError) (arguments ( (argument (singleExpression errorWrongGenerator)) ))))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression (literal 'string'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression TypeError) (arguments ( (argument (singleExpression errorWrongGenerator)) ))))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j3) = (singleExpression (singleExpression joo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gen) = (singleExpression (singleExpression generator) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression j3) . (identifierName next)) . (identifierName call)) (arguments ( (argument (singleExpression gen)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * koo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression await (singleExpression (literal 'abcd'))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal ' data-first')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t2) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t2) + (singleExpression (literal ' data-second')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t2) + (singleExpression (literal ' data-third')))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable k1) = (singleExpression (singleExpression koo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k1) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-first'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-first'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'xyz data-second'))) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable k2) = (singleExpression (singleExpression koo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k2) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression returnValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k2) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression k2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abcd data-first'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'xyz data-second'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression returnValue)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * loo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression await (singleExpression promise)))) (eos ;)))) (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal 'data-first')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal 'data-second')))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable l1) = (singleExpression (singleExpression loo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'qwe'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable l2) = (singleExpression (singleExpression loo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l2) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'another error'))) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'abc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'another error'))) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable l3) = (singleExpression (singleExpression loo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l3) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression someText)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression l3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName resolve)) (arguments ( (argument (singleExpression resolveText)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression someText)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * moo ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal 'data-first')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal 'data-second')))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable m1) = (singleExpression (singleExpression moo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorText)) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable m2) = (singleExpression (singleExpression moo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m2) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'another error'))) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'another error'))) ))))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable m3) = (singleExpression (singleExpression moo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m3) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression someText)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression m3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression someText)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * noo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable x) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable y) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable fromX) = (singleExpression yield))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression x)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable n1) = (singleExpression (singleExpression noo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value1) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal "a"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value2) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal "b"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression n1) . (identifierName next)) (arguments ( (argument (singleExpression value1)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression n1) . (identifierName next)) (arguments ( (argument (singleExpression value2)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable n2) = (singleExpression (singleExpression noo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value1) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal "a"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value2) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal "b"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression n2) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression value1)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression n2) . (identifierName next)) (arguments ( (argument (singleExpression value2)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression (literal 'a'))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * ooo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression promise)) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable o1) = (singleExpression (singleExpression ooo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression o1) . (identifierName next)) (arguments ( (argument (singleExpression value1)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName reject)) (arguments ( (argument (singleExpression (literal "a"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'a'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * roo ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression yield)) eos)) (statement (expressionStatement (expressionSequence (singleExpression promise)) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression yield)) eos)) (statement (expressionStatement (expressionSequence (singleExpression e)) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable r1) = (singleExpression (singleExpression roo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value1) = (singleExpression (literal 'value-1')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value2) = (singleExpression (literal 'value-2')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value3) = (singleExpression (literal 'value-3')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression r1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression r1) . (identifierName next)) (arguments ( (argument (singleExpression value1)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression r1) . (identifierName next)) (arguments ( (argument (singleExpression value1)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder) . (identifierName reject)) (arguments ( (argument (singleExpression (literal "abc"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'abc'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder1) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression holder2) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise1) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder1)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise2) = (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression holder2)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * poo ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression yield)) eos)) (statement (expressionStatement (expressionSequence (singleExpression promise1)) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression yield)) eos)) (statement (expressionStatement (expressionSequence (singleExpression promise2)) (eos ;)))) }))))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable p1) = (singleExpression (singleExpression poo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p1) . (identifierName next)) (arguments ( (argument (singleExpression value3)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression p1) . (identifierName next)) (arguments ( (argument (singleExpression value3)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder1) . (identifierName reject)) (arguments ( (argument (singleExpression value1)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression holder2) . (identifierName reject)) (arguments ( (argument (singleExpression value2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression value2)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * soo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable endValue) = (singleExpression (literal 'end-value-1')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s1) = (singleExpression (singleExpression soo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s1) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s1) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression endValue)) )))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression endValue)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s2) = (singleExpression (singleExpression soo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s2) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s2) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression (singleExpression (singleExpression Promise) . (identifierName reject)) (arguments ( (argument (singleExpression endValue)) )))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName rejected)) (arguments ( (argument (singleExpression endValue)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s3) = (singleExpression (singleExpression soo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s3) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s3) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression endValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression endValue)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s4) = (singleExpression (singleExpression soo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression promise1) = (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression endValue)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s4) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s4) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s4) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression promise1)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName rejected)) (arguments ( (argument (singleExpression promise1)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s5) = (singleExpression (singleExpression soo) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s5) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s5) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s5) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression endValue)) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) . (identifierName fullfilledDone)) (arguments ( ))) . (identifierName rejected)) (arguments ( (argument (singleExpression endValue)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * too ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Promise) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'abcd'))) )))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable t) = (singleExpression (singleExpression too) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression t) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression (literal 'abcd'))) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;))))) <EOF>)