(program (sourceElements (sourceElement (statement (classDeclaration class A (classTail extends (singleExpression ArrayBuffer) { })))) (sourceElement (statement (classDeclaration class B (classTail extends (singleExpression Boolean) { })))) (sourceElement (statement (classDeclaration class D (classTail extends (singleExpression Date) { })))) (sourceElement (statement (classDeclaration class E (classTail extends (singleExpression Error) { })))) (sourceElement (statement (classDeclaration class N (classTail extends (singleExpression Number) { })))) (sourceElement (statement (classDeclaration class M (classTail extends (singleExpression Map) { })))) (sourceElement (statement (classDeclaration class R (classTail extends (singleExpression RegExp) { })))) (sourceElement (statement (classDeclaration class S (classTail extends (singleExpression Set) { })))) (sourceElement (statement (classDeclaration class WM (classTail extends (singleExpression WeakMap) { })))) (sourceElement (statement (classDeclaration class WS (classTail extends (singleExpression WeakSet) { })))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression new (singleExpression (singleExpression A) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression a) instanceof (singleExpression ArrayBuffer)) && (singleExpression (singleExpression a) instanceof (singleExpression A)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "a has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal true))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression b) instanceof (singleExpression Boolean)) && (singleExpression (singleExpression b) instanceof (singleExpression B)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "b has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) = (singleExpression new (singleExpression (singleExpression D) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression d) instanceof (singleExpression Date)) && (singleExpression (singleExpression d) instanceof (singleExpression D)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "d has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression e) = (singleExpression new (singleExpression (singleExpression E) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression e) instanceof (singleExpression Error)) && (singleExpression (singleExpression e) instanceof (singleExpression E)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "e has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression n) = (singleExpression new (singleExpression (singleExpression N) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression n) instanceof (singleExpression Number)) && (singleExpression (singleExpression n) instanceof (singleExpression N)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "n has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression m) = (singleExpression new (singleExpression (singleExpression M) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression m) instanceof (singleExpression Map)) && (singleExpression (singleExpression m) instanceof (singleExpression M)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "m has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression new (singleExpression (singleExpression R) (arguments ( (argument (singleExpression (literal "foo"))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression r) instanceof (singleExpression RegExp)) && (singleExpression (singleExpression r) instanceof (singleExpression R)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "r has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s) = (singleExpression new (singleExpression (singleExpression S) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression s) instanceof (singleExpression Set)) && (singleExpression (singleExpression s) instanceof (singleExpression S)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "s has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression wm) = (singleExpression new (singleExpression (singleExpression WM) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression wm) instanceof (singleExpression WeakMap)) && (singleExpression (singleExpression wm) instanceof (singleExpression WM)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "wm has incorrect prototype chain"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ws) = (singleExpression new (singleExpression (singleExpression WS) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression ws) instanceof (singleExpression WeakSet)) && (singleExpression (singleExpression ws) instanceof (singleExpression WS)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "ws has incorrect prototype chain"))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))))) <EOF>)