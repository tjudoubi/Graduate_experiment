(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function nonInlinedTailCall ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function callee ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression callee) . (identifierName caller)) != (singleExpression nonInlinedTailCall))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression callee)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function caller ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression callee) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression caller) (arguments ( )))) (eos ;)))))) (sourceElement (statement (functionDeclaration function loop ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression loop)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression (literal (numericLiteral 1000000)))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function inlinedTailCall ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function callee ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression callee) . (identifierName caller)) != (singleExpression inlinedTailCall))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function caller ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression callee) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression caller) (arguments ( )))) (eos ;)))))) (sourceElement (statement (functionDeclaration function loop ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression (literal (numericLiteral 1000000)))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function nonInlinedEmulatedTailCall ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function emulator ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression caller) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function callee ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression callee) . (identifierName caller)) != (singleExpression emulator))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression callee)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function caller ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression callee) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression emulator) (arguments ( )))) (eos ;)))))) (sourceElement (statement (functionDeclaration function pad ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function loop ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression pad) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression loop)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression (literal (numericLiteral 1000000)))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function inlinedEmulatedTailCall ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function emulator ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression caller) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function callee ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression callee) . (identifierName caller)) != (singleExpression emulator))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function caller ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression callee) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression emulator) (arguments ( )))) (eos ;)))))) (sourceElement (statement (functionDeclaration function pad ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function loop ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression pad) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loop) (arguments ( (argument (singleExpression (literal (numericLiteral 1000000)))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;))))) <EOF>)