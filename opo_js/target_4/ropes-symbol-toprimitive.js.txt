(program (sourceElements (sourceElement (statement (functionDeclaration function ropify ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression a) + (singleExpression b)) + (singleExpression c))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression ropify)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function ropify2 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression a) + (singleExpression b)) + (singleExpression c))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression ropify2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) = (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "test"))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ropify) (arguments ( (argument (singleExpression (literal "a"))) , (argument (singleExpression (literal "b"))) , (argument (singleExpression test)) ))) !== (singleExpression (literal "abtest")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "wrong on warmup"))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName toPrimitive))) ]) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "changed"))) (eos ;)))))) })))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ropify) (arguments ( (argument (singleExpression (literal "a"))) , (argument (singleExpression (literal "b"))) , (argument (singleExpression test)) ))) !== (singleExpression (literal "abchanged")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "watchpoint didn't fire"))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression ropify2) (arguments ( (argument (singleExpression (literal "a"))) , (argument (singleExpression (literal "b"))) , (argument (singleExpression test)) ))) !== (singleExpression (literal "abchanged")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "wrong on warmup"))) (eos ;)))))) })))) <EOF>)