(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedException) = (singleExpression (literal "SyntaxError: Invalid regular expression: regular expression too large")))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression source) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 50000)))) ))) . (identifierName join)) (arguments ( (argument (singleExpression (literal "("))) ))) + (singleExpression (singleExpression (singleExpression (literal /(?:^|:|,)(?:\s*\[)+/g)) . (identifierName toString)) (arguments ( )))) + (singleExpression (singleExpression (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 50000)))) ))) . (identifierName join)) (arguments ( (argument (singleExpression (literal ")"))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression source)) )))) (eos ;)))))) }))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) != (singleExpression expectedException))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected \"")) + (singleExpression expectedException)) + (singleExpression (literal "\" exception, but got \""))) + (singleExpression e)) + (singleExpression (literal "\"")))) (eos ;)))))) })))))) <EOF>)