(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable index))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression index) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression index)) ])) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 13)))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (singleExpression i) & (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal (numericLiteral 53)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 53))))) ])) [ (expressionSequence (singleExpression index)) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result in first loop: ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (singleExpression - (singleExpression ( (expressionSequence (singleExpression (singleExpression i) & (singleExpression (literal (numericLiteral 1))))) ))) - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression bar) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 13))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result in second loop: ")) + (singleExpression result))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression bar) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result at end: ")) + (singleExpression result))) (eos ;))))))) <EOF>)