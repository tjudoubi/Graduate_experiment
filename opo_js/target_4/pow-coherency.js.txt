(program (sourceElements (sourceElement (statement (functionDeclaration function pow42 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (literal (numericLiteral 2.1))) ** (singleExpression (literal (numericLiteral 42))))) , (propertyAssignment (propertyName (identifierName ftl)) : (singleExpression (singleExpression isFinalTier) (arguments ( )))) }))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function build42AsDouble ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function opaqueAdd ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) + (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression opaqueAdd) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 42))) - (singleExpression (literal (numericLiteral 0.123))))) , (argument (singleExpression (literal (numericLiteral 0.123)))) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable double42) = (singleExpression (singleExpression build42AsDouble) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression double42) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "42 (as double) should be === to 42 (as int)"))) ))))) (eos ;)))))) (sourceElement (statement (functionDeclaration function powDouble42 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (literal (numericLiteral 2.1))) ** (singleExpression double42))) , (propertyAssignment (propertyName (identifierName ftl)) : (singleExpression (singleExpression isFinalTier) (arguments ( )))) }))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function clobber ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression clobber)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function pow42NoConstantFolding ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 2.1)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 42)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression clobber) (arguments ( (argument (singleExpression obj)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (singleExpression obj) . (identifierName x)) ** (singleExpression (singleExpression obj) . (identifierName y)))) , (propertyAssignment (propertyName (identifierName ftl)) : (singleExpression (singleExpression isFinalTier) (arguments ( )))) }))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function powDouble42NoConstantFolding ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 2.1)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression double42)) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression clobber) (arguments ( (argument (singleExpression obj)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression (singleExpression obj) . (identifierName x)) ** (singleExpression (singleExpression obj) . (identifierName y)))) , (propertyAssignment (propertyName (identifierName ftl)) : (singleExpression (singleExpression isFinalTier) (arguments ( )))) }))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable results) = (singleExpression (objectLiteral { (propertyAssignment (propertyName 'jit') : (singleExpression (objectLiteral { }))) , (propertyAssignment (propertyName 'dfg') : (singleExpression (objectLiteral { }))) , (propertyAssignment (propertyName 'ftl') : (singleExpression (objectLiteral { }))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable funs) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'pow42'))) , (arrayElement (singleExpression pow42))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'powDouble42'))) , (arrayElement (singleExpression powDouble42))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'pow42NoConstantFolding'))) , (arrayElement (singleExpression pow42NoConstantFolding))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'powDouble42NoConstantFolding'))) , (arrayElement (singleExpression powDouble42NoConstantFolding))) ])))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tiers) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'jit'))) , (arrayElement (singleExpression (literal 'dfg'))) , (arrayElement (singleExpression (literal 'ftl')))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j))) in (expressionSequence (singleExpression funs)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable name) = (singleExpression (singleExpression (singleExpression funs) [ (expressionSequence (singleExpression j)) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fun) = (singleExpression (singleExpression (singleExpression funs) [ (expressionSequence (singleExpression j)) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression fun) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) . (identifierName ftl))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (literal 'ftl'))) ]) [ (expressionSequence (singleExpression name)) ]) = (singleExpression (singleExpression result) . (identifierName value)))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression numberOfDFGCompiles) (arguments ( (argument (singleExpression fun)) ))) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (literal 'dfg'))) ]) [ (expressionSequence (singleExpression name)) ]) = (singleExpression (singleExpression result) . (identifierName value)))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression results) [ (expressionSequence (singleExpression (literal 'jit'))) ]) [ (expressionSequence (singleExpression name)) ]) = (singleExpression (singleExpression result) . (identifierName value)))) (eos ;)))))))) }))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errors) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable valuesFor) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i))) in (expressionSequence (singleExpression tiers)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tier) = (singleExpression (singleExpression tiers) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression results) [ (expressionSequence (singleExpression tier)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName keys)) (arguments ( (argument (singleExpression result)) ))) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) ) (statement (continueStatement continue (eos ;))))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j))) in (expressionSequence (singleExpression funs)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable name) = (singleExpression (singleExpression (singleExpression funs) [ (expressionSequence (singleExpression j)) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression name) in (singleExpression result))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression errors) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression name) + (singleExpression (literal " was not compiled to "))) + (singleExpression tier))) )))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression name) in (singleExpression valuesFor))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression result) [ (expressionSequence (singleExpression name)) ])) , (propertyAssignment (propertyName (identifierName tiers)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression tier))) ]))) })))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression result) [ (expressionSequence (singleExpression name)) ]) !== (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) . (identifierName value)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression errors) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression name) + (singleExpression (literal " has different results in "))) + (singleExpression tier)) + (singleExpression (literal " ("))) + (singleExpression (singleExpression result) [ (expressionSequence (singleExpression name)) ])) + (singleExpression (literal ") and "))) + (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) . (identifierName tiers))) + (singleExpression (literal " ("))) + (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) . (identifierName value))) + (singleExpression (literal ")")))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) . (identifierName tiers)) . (identifierName push)) (arguments ( (argument (singleExpression tier)) )))) (eos ;)))))))))) }))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable reference) = (singleExpression (singleExpression (singleExpression funs) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression reference)) ]) . (identifierName value)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j))) in (expressionSequence (singleExpression funs)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable name) = (singleExpression (singleExpression (singleExpression funs) [ (expressionSequence (singleExpression j)) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) . (identifierName value)) !== (singleExpression result))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression errors) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression name) + (singleExpression (literal " ("))) + (singleExpression (singleExpression (singleExpression valuesFor) [ (expressionSequence (singleExpression name)) ]) . (identifierName value))) + (singleExpression (literal ") and "))) + (singleExpression reference)) + (singleExpression (literal " ("))) + (singleExpression result)) + (singleExpression (literal ") have different results")))) )))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression errors) . (identifierName length)) > (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression errors) . (identifierName join)) (arguments ( (argument (singleExpression (literal '\n'))) )))) ))))) (eos ;))))))) <EOF>)