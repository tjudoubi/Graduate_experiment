(program (sourceElements (sourceElement (statement (functionDeclaration function sqrtOnInteger ( (formalParameterList (formalParameterArg (assignable radicand))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression radicand)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression sqrtOnInteger)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSquareRoot16 ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression sqrtOnInteger) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 4))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "sqrtOnInteger(16) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 4")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSquareRoot16) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sqrtOnIntegerNegativeNumber) = (singleExpression (singleExpression sqrtOnDouble) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 4))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression sqrtOnIntegerNegativeNumber)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "sqrtOnDouble(-4) = ")) + (singleExpression sqrtOnIntegerNegativeNumber)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sqrtOnIntegerFallback) = (singleExpression (singleExpression sqrtOnInteger) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sqrtOnIntegerFallback) != (singleExpression (literal (numericLiteral 1.7724538509055159))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "sqrtOnInteger(Math.PI) = ")) + (singleExpression sqrtOnIntegerFallback)) + (singleExpression (literal ", expected 1.7724538509055159")))) (eos ;)))))) (sourceElement (statement (functionDeclaration function sqrtOnDouble ( (formalParameterList (formalParameterArg (assignable radicand))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName sqrt)) (arguments ( (argument (singleExpression radicand)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression sqrtOnDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSquareRootDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression sqrtOnInteger) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName LN2))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0.8325546111576977))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "sqrtOnInteger(Math.LN2) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 0.8325546111576977")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSquareRootDouble) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sqrtOnDoubleNegativeNumber) = (singleExpression (singleExpression sqrtOnDouble) (arguments ( (argument (singleExpression - (singleExpression (singleExpression Math) . (identifierName PI)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression sqrtOnDoubleNegativeNumber)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "sqrtOnDouble(-Math.PI) = ")) + (singleExpression sqrtOnDoubleNegativeNumber)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sqrtOnDoubleFallback) = (singleExpression (singleExpression sqrtOnDouble) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sqrtOnDoubleFallback) !== (singleExpression (literal (numericLiteral 2))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "sqrtOnDouble(4) = ")) + (singleExpression sqrtOnDoubleFallback)) + (singleExpression (literal ", expected 2")))) (eos ;))))))) <EOF>)