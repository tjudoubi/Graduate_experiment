(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: ${actual}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) . (identifierName name))) , (argument (singleExpression (literal 'raw'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: String.raw requires template not be null or undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression undefined)) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: String.raw requires template not be null or undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression undefined)) }))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: String.raw requires template.raw not be null or undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (literal null))) }))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: String.raw requires template.raw not be null or undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName length))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'template.length called'))) ))))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName length))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "template.raw.length called"))) ))))) (eos ;)))))) }) }))) }))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "Error: template.raw.length called"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression - (singleExpression (literal (numericLiteral 1))))) }))) }))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression - (singleExpression (literal (numericLiteral 2.5))))) }))) }))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression - (singleExpression Infinity))) }))) }))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 0)))) }))) }))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression NaN)) }))) }))) )))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function generateTemplate ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cooked) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression cooked) . (identifierName raw)) = (singleExpression (singleExpression (singleExpression Array) . (identifierName (reservedWord (keyword from)))) (arguments ( (argument (singleExpression arguments)) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression cooked)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ""))) )))) , (argument (singleExpression (literal "Cocoa"))) , (argument (singleExpression (literal "Cappuccino"))) , (argument (singleExpression (literal "Matcha"))) )))) , (argument (singleExpression (literal "Cocoa,Cappuccino,Matcha"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ""))) )))) , (argument (singleExpression (literal "Cocoa"))) , (argument (singleExpression (literal "Cappuccino"))) , (argument (singleExpression (literal "Matcha"))) , (argument (singleExpression (literal "Hello"))) )))) , (argument (singleExpression (literal "Cocoa,Cappuccino,Matcha"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ""))) )))) , (argument (singleExpression (literal "Cocoa"))) , (argument (singleExpression (literal "Cappuccino"))) )))) , (argument (singleExpression (literal "Cocoa,Cappuccino,"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ""))) )))) , (argument (singleExpression (literal "Cocoa"))) )))) , (argument (singleExpression (literal "Cocoa,,"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ","))) , (argument (singleExpression (literal ""))) )))) )))) , (argument (singleExpression (literal ",,"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function Counter ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression count) ++)) (eos ;)))))) }) }))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) )))) , (argument (singleExpression (literal "0123"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression counter)) )))) , (argument (singleExpression (literal "01234"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression (literal "012345"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression (literal "0123456"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression (literal "0123456"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression (literal "0123456"))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable counter) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (singleExpression generateTemplate) (arguments ( (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) , (argument (singleExpression counter)) )))) , (argument (singleExpression (literal "0123456"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 3.5)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal "a"))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal "b"))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal "c"))) }))) }))) , (argument (singleExpression (literal "d"))) , (argument (singleExpression (literal "e"))) , (argument (singleExpression (literal "f"))) , (argument (singleExpression (literal "g"))) )))) , (argument (singleExpression (literal "adbec"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 2.3)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal "a"))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal "b"))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal "c"))) }))) }))) , (argument (singleExpression (literal "d"))) , (argument (singleExpression (literal "e"))) , (argument (singleExpression (literal "f"))) , (argument (singleExpression (literal "g"))) )))) , (argument (singleExpression (literal "adb"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 2.3)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal "a"))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal "c"))) }))) }))) , (argument (singleExpression (literal "d"))) , (argument (singleExpression (literal "e"))) , (argument (singleExpression (literal "f"))) , (argument (singleExpression (literal "g"))) )))) , (argument (singleExpression (literal "adundefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName raw)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName length)) : (singleExpression (literal (numericLiteral 2.3)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal "a"))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal "b"))) , (propertyAssignment (propertyName (numericLiteral 2)) : (singleExpression (literal "c"))) }))) }))) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "e"))) , (argument (singleExpression (literal "f"))) , (argument (singleExpression (literal "g"))) )))) , (argument (singleExpression (literal "aundefinedb"))) )))) (eos ;))))) <EOF>)