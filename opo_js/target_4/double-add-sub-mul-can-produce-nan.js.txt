(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function sub ( (formalParameterList (formalParameterArg (assignable arr)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (singleExpression b) - (singleExpression c)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression x))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression sub)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 10.5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sub) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression (literal (numericLiteral 10.5)))) , (argument (singleExpression (literal (numericLiteral 20.5)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) in (singleExpression arr))) )))) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 10.5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sub) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression Infinity)) , (argument (singleExpression Infinity)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression typeof (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) === (singleExpression (literal "number"))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) in (singleExpression arr))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function mul ( (formalParameterList (formalParameterArg (assignable arr)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (singleExpression b) * (singleExpression c)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression x))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mul)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 10.5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression mul) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression (literal (numericLiteral 10.5)))) , (argument (singleExpression (literal (numericLiteral 20.5)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) in (singleExpression arr))) )))) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 10.5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression mul) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression Infinity)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression typeof (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) === (singleExpression (literal "number"))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) in (singleExpression arr))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function add ( (formalParameterList (formalParameterArg (assignable arr)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable x) = (singleExpression (singleExpression b) + (singleExpression c)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression x))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression add)) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 10.5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression add) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression (literal (numericLiteral 10.5)))) , (argument (singleExpression (literal (numericLiteral 20.5)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) in (singleExpression arr))) )))) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName length)) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal (numericLiteral 10.5))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression add) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression Infinity)) , (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression typeof (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) === (singleExpression (literal "number"))) && (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0))) in (singleExpression arr))) )))) (eos ;)))) })))) <EOF>)