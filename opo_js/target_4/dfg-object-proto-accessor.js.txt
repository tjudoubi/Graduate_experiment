(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) , (argument (singleExpression (singleExpression Object) . (identifierName prototype))) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal null))) ))))))) , (argument (singleExpression (literal `TypeError: null is not an object (evaluating 'object.__proto__')`))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression target) (arguments ( (argument (singleExpression undefined)) ))))))) , (argument (singleExpression (literal `TypeError: undefined is not an object (evaluating 'object.__proto__')`))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) , (argument (singleExpression (singleExpression String) . (identifierName prototype))) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) , (argument (singleExpression (singleExpression Number) . (identifierName prototype))) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal (numericLiteral 42.195)))) )))) , (argument (singleExpression (singleExpression Number) . (identifierName prototype))) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal true))) )))) , (argument (singleExpression (singleExpression Boolean) . (identifierName prototype))) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) )))) , (argument (singleExpression (singleExpression Symbol) . (identifierName prototype))) )))) (eos ;)))))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName __proto__))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e3))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) , (argument (singleExpression (singleExpression String) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) , (argument (singleExpression (singleExpression Number) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal (numericLiteral 42.195)))) )))) , (argument (singleExpression (singleExpression Number) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (literal true))) )))) , (argument (singleExpression (singleExpression Boolean) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression target) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) )))) , (argument (singleExpression (singleExpression Symbol) . (identifierName prototype))) )))) (eos ;)))) }))))))) })) (arguments ( )))) ))) (eos ;))))) <EOF>)