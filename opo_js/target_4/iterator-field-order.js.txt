(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression array) . (identifierName values)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":42,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression array) . (identifierName keys)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":0,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression array) . (identifierName entries)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":[0,42],"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * asyncIterator ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iterator) = (singleExpression (singleExpression asyncIterator) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression iterator) . (identifierName next)) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression value)) )))) , (argument (singleExpression (literal `{"value":42,"done":false}`))) )))) (eos ;)))))) }))) ))) . (identifierName (reservedWord (keyword catch)))) (arguments ( (argument (singleExpression (singleExpression $vm) . (identifierName abort))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function * generator ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression generator) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":42,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ])))) ]))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression map) . (identifierName keys)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":0,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression map) . (identifierName values)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":42,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression map) . (identifierName entries)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":[0,42],"done":false}`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable set) = (singleExpression new (singleExpression (singleExpression Set) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression set) . (identifierName keys)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":42,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression set) . (identifierName values)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":42,"done":false}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression set) . (identifierName entries)) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":[42,42],"done":false}`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (literal "Cocoa")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression string) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))) . (identifierName next)) (arguments ( )))) )))) , (argument (singleExpression (literal `{"value":"C","done":false}`))) )))) (eos ;))))) <EOF>)