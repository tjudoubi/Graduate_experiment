(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable input)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression input) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (literal (bigintLiteral 1n)))) + (singleExpression (literal "")))) , (argument (singleExpression (literal "-1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) + (singleExpression - (singleExpression (literal (bigintLiteral 1n)))))) , (argument (singleExpression (literal "-1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 0n))) + (singleExpression (literal "")))) , (argument (singleExpression (literal "0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) + (singleExpression (literal (bigintLiteral 0n))))) , (argument (singleExpression (literal "0"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 1n))) + (singleExpression (literal "")))) , (argument (singleExpression (literal "1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) + (singleExpression (literal (bigintLiteral 1n))))) , (argument (singleExpression (literal "1"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 123456789000000000000000n))) + (singleExpression (literal "")))) , (argument (singleExpression (literal "123456789000000000000000"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) + (singleExpression (literal (bigintLiteral 123456789000000000000000n))))) , (argument (singleExpression (literal "123456789000000000000000"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (literal (bigintLiteral 123456789000000000000000n)))) + (singleExpression (literal "")))) , (argument (singleExpression (literal "-123456789000000000000000"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "")) + (singleExpression - (singleExpression (literal (bigintLiteral 123456789000000000000000n)))))) , (argument (singleExpression (literal "-123456789000000000000000"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (arrayLiteral [ elementList ])) + (singleExpression - (singleExpression (literal (bigintLiteral 123456789000000000000000n)))))) , (argument (singleExpression (literal "-123456789000000000000000"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (literal (bigintLiteral 123456789000000000000000n)))) + (singleExpression (arrayLiteral [ elementList ])))) , (argument (singleExpression (literal "-123456789000000000000000"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a) + (singleExpression (literal (bigintLiteral 3n))))) , (argument (singleExpression (literal "[object Object]3"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 3n))) + (singleExpression a))) , (argument (singleExpression (literal "3[object Object]"))) )))) (eos ;))))) <EOF>)