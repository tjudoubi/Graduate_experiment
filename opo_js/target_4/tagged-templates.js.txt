(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression actual)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function raw ( (formalParameterList (formalParameterArg (assignable siteObject))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal '')))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression siteObject) . (identifierName raw)) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression siteObject) . (identifierName raw)) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )) < (singleExpression (singleExpression arguments) . (identifierName length)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function cooked ( (formalParameterList (formalParameterArg (assignable siteObject))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal '')))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression siteObject) . (identifierName raw)) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression siteObject) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )) < (singleExpression (singleExpression arguments) . (identifierName length)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Counter ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression count) ++)) (eos ;)))))) }) }))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression raw) `Hello ${c} World ${c}`)) , (argument (singleExpression (literal `Hello 0 World 1`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression raw) `${c}${c}${c}`)) , (argument (singleExpression (literal `012`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression raw) `${c}${ `)) <missing ')'>) $) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression c)) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal ` }${c}`)) , (singleExpression (literal `1  0  2`))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression raw) `${c}${ raw`)) <missing ')'>) $) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression c)) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal ` }${c}`)) , (singleExpression (literal `1  0  2`))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression raw) `${c}${ `)) <missing ')'>) $) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression c)) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression $)) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression c)) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal ` }${c}`)) , (singleExpression (literal `2  01  3`))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression Counter) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression raw) `${c}${ raw`)) <missing ')'>) $) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression c)) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression $)) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression c)) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal ` }${c}`)) , (singleExpression (literal `2  01  3`))) (eos ))))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression raw) ``)) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression cooked) ``)) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression raw) `\n`)) , (argument (singleExpression (literal `\\n`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression cooked) `\n`)) , (argument (singleExpression (literal `\n`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression raw) `\v`)) , (argument (singleExpression (literal `\\v`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression cooked) `\v`)) , (argument (singleExpression (literal `\v`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression raw) ``)) , (argument (singleExpression (literal `\n\n`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression cooked) ``)) , (argument (singleExpression (literal `\n\n`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression shouldBe)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression raw) `\\`, `)) <missing ')'>) n) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression n) `);shouldBe(cooked`) `, `)) (eos ))))) (sourceElement (statement (emptyStatement ;)))) <EOF>)