(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression speciesConstructors) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression RegExp)) , (arrayElement (singleExpression Array)) , (arrayElement (singleExpression (singleExpression Int32Array) . (identifierName __proto__))) , (arrayElement (singleExpression Map)) , (arrayElement (singleExpression Set)) , (arrayElement (singleExpression ArrayBuffer)) , (arrayElement (singleExpression Promise))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function testSymbolSpeciesOnConstructor ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) !== (singleExpression constructor))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Symbol.species should return the constructor for ")) + (singleExpression (singleExpression constructor) . (identifierName name)))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression constructor) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName species))) ]) !== (singleExpression constructor))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Symbol.species was mutable ")) + (singleExpression (singleExpression constructor) . (identifierName name)))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression constructor)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal true))) }))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression speciesConstructors) . (identifierName forEach)) (arguments ( (argument (singleExpression testSymbolSpeciesOnConstructor)) )))) (eos ;))))) <EOF>)