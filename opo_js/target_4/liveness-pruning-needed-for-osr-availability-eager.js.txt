(program (sourceElements (sourceElement (statement (functionDeclaration function each ( (formalParameterList (formalParameterArg (assignable ary)) , (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ary)) ) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression (singleExpression i) < (singleExpression (singleExpression ary) . (identifierName length))) && (singleExpression ( (expressionSequence (singleExpression (singleExpression ! (singleExpression (singleExpression ary) [ (expressionSequence (singleExpression i)) ])) || (singleExpression ! (singleExpression (singleExpression func) (arguments ( (argument (singleExpression (singleExpression ary) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression i)) , (argument (singleExpression ary)) )))))) )))) ; (expressionSequence (singleExpression (singleExpression i) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) ) (statement (emptyStatement ;))))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable blah) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable func) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { functionBody }))) )) . (identifierName apply)) (arguments ( (argument (singleExpression Object)) , (argument (singleExpression arguments)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression each) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (objectLiteral { })))) ]))) , (argument (singleExpression func)) )))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression blah) (arguments ( )))) (eos ;))))))) <EOF>)