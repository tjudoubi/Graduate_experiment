(program (sourceElements (sourceElement (statement (functionDeclaration function mathCeilOnIntegers ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilOnIntegers)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathCeilOnDoubles ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilOnDoubles)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathCeilOnBooleans ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilOnBooleans)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnIntegers) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnIntegers(")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnIntegers) (arguments ( (argument (singleExpression - (singleExpression i))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression - (singleExpression i)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnIntegers(")) + (singleExpression - (singleExpression i))) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleLow) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.4)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression doubleLow)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1.0)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnDoubles(")) + (singleExpression doubleLow)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleHigh) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression doubleHigh)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnDoubles(")) + (singleExpression doubleHigh)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnDoubles(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.6))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression - (singleExpression (literal (numericLiteral 0.0)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(-0.6) = ")) + (singleExpression ceiledValue))) ))))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnIntegers) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnIntegers(")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnIntegers) (arguments ( (argument (singleExpression - (singleExpression i))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression - (singleExpression i)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnIntegers(-")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.4))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(-0.4) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.5))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(-0.5) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression ceiledValue) === (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression ceiledValue))) )) === (singleExpression - (singleExpression Infinity))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(-0) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) === (singleExpression ceiledValue))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(NaN) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(Number.POSITIVE_INFINITY) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilOnDoubles) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilOnDoubles(Number.NEGATIVE_INFINITY) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable boolean) = (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) )))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledBoolean) = (singleExpression (singleExpression mathCeilOnBooleans) (arguments ( (argument (singleExpression boolean)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledBoolean) != (singleExpression boolean))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilOnDoubles(")) + (singleExpression boolean)) + (singleExpression (literal ") = "))) + (singleExpression ceiledBoolean))) ))))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function uselessMathCeil ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (singleExpression value) | (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression uselessMathCeil)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathCeil(")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleLow) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.4)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression doubleLow)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathCeil(")) + (singleExpression doubleLow)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleHigh) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression doubleHigh)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathCeil(")) + (singleExpression doubleHigh)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathCeil(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.4))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "uselessMathCeil(-0.4) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.5))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "uselessMathCeil(-0.5) = ")) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression uselessMathCeil) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.6))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "uselessMathCeil(-0.6) = ")) + (singleExpression ceiledValue))) ))))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathCeilWithOverflow ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilWithOverflow)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bigValue) = (singleExpression (literal (numericLiteral 1000000000000))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilWithOverflow) (arguments ( (argument (singleExpression bigValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression bigValue))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilWithOverflow(")) + (singleExpression bigValue)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathCeilConsumedAsDouble ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) ))) * (singleExpression (literal (numericLiteral 0.5))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilConsumedAsDouble)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleValue) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.1)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilConsumedAsDouble) (arguments ( (argument (singleExpression doubleValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )) * (singleExpression (literal (numericLiteral 0.5))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilConsumedAsDouble(")) + (singleExpression doubleValue)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleValue) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilConsumedAsDouble) (arguments ( (argument (singleExpression doubleValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )) * (singleExpression (literal (numericLiteral 0.5))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilConsumedAsDouble(")) + (singleExpression doubleValue)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathCeilDoesNotCareAboutMinusZero ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) ))) | (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilDoesNotCareAboutMinusZero)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ceiledValue) = (singleExpression (singleExpression mathCeilDoesNotCareAboutMinusZero) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ceiledValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathCeilDoesNotCareAboutMinusZero(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression ceiledValue))) ))))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathCeilNoArguments ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilNoArguments)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathCeilTooManyArguments ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) , (argument (singleExpression c)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilTooManyArguments)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathCeilNoArguments) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) === (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilNoArguments() = ")) + (singleExpression value))) ))))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathCeilTooManyArguments) (arguments ( (argument (singleExpression (literal (numericLiteral 2.1)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilTooManyArguments() = ")) + (singleExpression value))) ))))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function testMathCeilOnConstants ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(0) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression value) === (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression value))) )) === (singleExpression - (singleExpression Infinity))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(-0) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(1) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(-1) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(42) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 42.2))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression - (singleExpression (literal (numericLiteral 42)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(-42.2) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) === (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(NaN) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(Number.POSITIVE_INFINITY) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression - (singleExpression Infinity)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(Number.NEGATIVE_INFINITY) = ")) + (singleExpression value))) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName E))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Math.ceil(Math.E) = ")) + (singleExpression value))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testMathCeilOnConstants)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testMathCeilOnConstants) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function mathCeilStructTransition ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathCeilStructTransition)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathCeilStructTransition) (arguments ( (argument (singleExpression (literal (numericLiteral 42.5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 43))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilStructTransition(42.5) = ")) + (singleExpression value))) ))))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal (numericLiteral 5))))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathCeilStructTransition) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 47))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "mathCeilStructTransition(42) after transition = ")) + (singleExpression value))) ))))) (eos ;))))))) <EOF>)