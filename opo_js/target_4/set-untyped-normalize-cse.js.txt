(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable keys) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cappuccino"))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 0.0))))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cocoa"))) )))) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 42))))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal (numericLiteral 420.5)))) , (arrayElement (singleExpression (literal (numericLiteral 0xffffffff)))) , (arrayElement (singleExpression (literal (numericLiteral 0x80000000)))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 2147483648))))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (arrayLiteral [ elementList ]))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression NaN)) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression set) = (singleExpression new (singleExpression (singleExpression Set) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) key))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression keys)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression set) . (identifierName add)) (arguments ( (argument (singleExpression key)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable set)) , (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression set) . (identifierName has)) (arguments ( (argument (singleExpression key)) ))) + (singleExpression (singleExpression (singleExpression set) . (identifierName has)) (arguments ( (argument (singleExpression key)) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) key)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression keys)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( (argument (singleExpression set)) , (argument (singleExpression key)) )))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test) (arguments ( (argument (singleExpression set)) , (argument (singleExpression (literal (numericLiteral 0.0)))) )))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;))))) <EOF>)