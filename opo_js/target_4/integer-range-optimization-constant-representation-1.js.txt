(program (sourceElements (sourceElement (statement (functionDeclaration function opaque ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaque)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable opaqueCondition))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression opaqueCondition) == (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 42))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression opaque) (arguments ( (argument (singleExpression i)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) != (singleExpression (literal (numericLiteral 41))))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) }))))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression opaqueCondition) == (singleExpression (literal (numericLiteral 2))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 42))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression opaque) (arguments ( (argument (singleExpression i)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 41))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression opaque) (arguments ( (argument (singleExpression i)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) }))))) }))))) }))))))) })) while ( (expressionSequence (singleExpression (literal true))) ) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression opaque) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression opaque) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression opaque) (arguments ( (argument (singleExpression (literal (numericLiteral 41)))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loop) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression loop)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression loop)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loop) (arguments ( )))) (eos ;))))) <EOF>)