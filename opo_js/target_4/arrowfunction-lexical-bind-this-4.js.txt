(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'obj'))) , (propertyAssignment (propertyName (identifierName internalObject)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal 'internalObject'))) , (propertyAssignment (propertyName (identifierName method)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value))) )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName name)) + (singleExpression (literal "-name-"))) + (singleExpression value)))))) (eos ;)))))) }))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression (singleExpression (singleExpression obj) . (identifierName internalObject)) . (identifierName method))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression obj) . (identifierName internalObject)) . (identifierName method)) (arguments ( ))) (arguments ( (argument (singleExpression (singleExpression (literal 'test')) + (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( ))))) )))) , (argument (singleExpression (singleExpression (literal 'internalObject-name-test')) + (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( ))))) , (argument (singleExpression (literal "Error: this is not lexically binded inside of the arrow function #1"))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression obj) . (identifierName internalObject)) . (identifierName name)) = (singleExpression (literal 'newInternalObject')))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression obj) . (identifierName internalObject)) . (identifierName method)) (arguments ( ))) (arguments ( (argument (singleExpression (singleExpression (literal 'test')) + (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( ))))) )))) , (argument (singleExpression (singleExpression (literal 'newInternalObject-name-test')) + (singleExpression (singleExpression (singleExpression i) . (identifierName toString)) (arguments ( ))))) , (argument (singleExpression (literal "Error: this is not lexically binded inside of the arrow function #5"))) )))) (eos ;)))) })))))) <EOF>)