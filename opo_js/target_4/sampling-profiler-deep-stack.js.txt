(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression platformSupportsSamplingProfiler) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "./sampling-profiler/samplingProfiler.js"))) )))) (eos ;))) statement (statement function) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression x)) )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression i))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) --)) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression (literal "x")) + (singleExpression x))) ]) = (singleExpression x))) (eos ;)))) })) (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable limit) = (singleExpression (literal (numericLiteral 300))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hellaDeep) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression limit))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hellaDeep) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression i)) )))) (eos ;)))))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression start) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hellaDeep) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression stackTrace) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression stackTrace) . (identifierName push)) (arguments ( (argument (singleExpression (literal "foo"))) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression limit))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression stackTrace) . (identifierName push)) (arguments ( (argument (singleExpression (literal "hellaDeep"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression stackTrace) . (identifierName push)) (arguments ( (argument (singleExpression (literal "start"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runTest) (arguments ( (argument (singleExpression start)) , (argument (singleExpression stackTrace)) )))) (eos ;)))) })))))) <EOF>)