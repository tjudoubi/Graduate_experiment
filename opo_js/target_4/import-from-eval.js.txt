(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable abort) = (singleExpression (singleExpression $vm) . (identifierName abort)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction async function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression shouldBe)) , (propertyAssignment (singleExpression shouldThrow)) })) = (singleExpression await (singleExpression import ( (singleExpression (literal "./import-tests/should.js")) ))))) (eos ;)))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression await (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `import("./import-tests/cocoa.js")`))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression cocoa) . (identifierName hello)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression await (singleExpression (singleExpression ( (expressionSequence (singleExpression (literal (numericLiteral 0))) , (singleExpression eval)) )) (arguments ( (argument (singleExpression (literal `import("./import-tests/cocoa.js")`))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression cocoa) . (identifierName hello)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression await (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `eval('import("./import-tests/cocoa.js")')`))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression cocoa) . (identifierName hello)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression await (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `return eval('import("./import-tests/cocoa.js")')`))) ))))) )) (arguments ( )))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression cocoa) . (identifierName hello)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression await (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `(new Function('return import("./import-tests/cocoa.js")'))()`))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression cocoa) . (identifierName hello)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression cocoa) = (singleExpression await (singleExpression (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal `import("./import-tests/cocoa.js")`)))) ])) . (identifierName map)) (arguments ( (argument (singleExpression eval)) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression cocoa) . (identifierName hello)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) }))))) })) (arguments ( )))) )) . (identifierName (reservedWord (keyword catch)))) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable error))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression abort) (arguments ( )))) (eos ;)))))) })))) )))) (eos ;))))) <EOF>)