(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function checkModuleSyntaxError ( (formalParameterList (formalParameterArg (assignable source)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression checkModuleSyntax) (arguments ( (argument (singleExpression source)) ))))))) , (argument (singleExpression errorMessage)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import {,} from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected an imported name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'from'. Expected 'as' before imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'from'. Expected 'as' before imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * of name from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'of'. Expected 'as' before imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as name fro "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'fro'. Expected 'from' before imported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as name fro "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'fro'. Expected 'from' before imported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import d, { e, f, g as c }, c from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected 'from' before imported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import d, c from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'c'. Expected namespace import or import list.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import i, * as j, * as k from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected 'from' before imported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as a, b from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected 'from' before imported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { a, b, c as d }, e from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected 'from' before imported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import a`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import a from`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { a }`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import {} from`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import *`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * from`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'from'. Expected 'as' before imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as from from`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as from from d`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'd'. Imported modules names must be string literals.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as from from 20`)) , (argument (singleExpression (literal `SyntaxError: Unexpected number '20'. Imported modules names must be string literals.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `function noTopLevel() {    import * as from from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '*'. import call expects exactly one argument.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `if (noTopLevel) {    import * as from from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '*'. import call expects exactly one argument.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `{    import * as from from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '*'. import call expects exactly one argument.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `for (var i = 0; i < 1000; ++i) {    import * as from from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '*'. import call expects exactly one argument.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import for from "Cocoa";`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'for'. Expected namespace import or import list.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import enum from "Cocoa";`)) , (argument (singleExpression (literal `SyntaxError: Unexpected use of reserved word 'enum'. Expected namespace import or import list.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as for from "Cocoa";`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'for'. Expected a variable name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import * as enum from "Cocoa";`)) , (argument (singleExpression (literal `SyntaxError: Unexpected use of reserved word 'enum'. Expected a variable name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { module as default } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'default'. Expected a variable name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { module as enum } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected use of reserved word 'enum'. Expected a variable name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { for } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as imported binding name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import a, { [assign] as c } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '['. Expected an imported name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import d, { g as {obj} } from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '{'. Expected a variable name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import d, { {obj} } from "Cappuccino"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token '{'. Expected an imported name for the import declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { binding`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { hello, binding as`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `import { hello, binding as`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { , } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected a variable name for the export declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { a, , } from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected a variable name for the export declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export a from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'a'. Expected either a declaration or a variable statement.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export a`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'a'. Expected either a declaration or a variable statement.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export * as b from "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected identifier 'as'. Expected 'from' before exported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export * "Cocoa"`)) , (argument (singleExpression (literal `SyntaxError: Unexpected string literal "Cocoa". Expected 'from' before exported module name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export const a;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ';'. const declared variable 'a' must have an initializer.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export const a = 20, b;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ';'. const declared variable 'b' must have an initializer.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export default 20, 30, 40;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected a ';' following a targeted export declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export function () { }`)) , (argument (singleExpression (literal `SyntaxError: Function statements must have a name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export class { }`)) , (argument (singleExpression (literal `SyntaxError: Class statements must have a name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export class extends Drink {}`)) , (argument (singleExpression (literal `SyntaxError: Cannot use the keyword 'extends' as a class name.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export default 20 30`)) , (argument (singleExpression (literal `SyntaxError: Unexpected number '30'. Expected a ';' following a targeted export declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export default 20 + 30, 40;`)) , (argument (singleExpression (literal `SyntaxError: Unexpected token ','. Expected a ';' following a targeted export declaration.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { default as default }`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as exported variable name.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { default }`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as exported variable name.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { default as binding }`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as exported variable name.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { hello, default as binding }`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as exported variable name.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { implements }`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as exported variable name.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { static }`)) , (argument (singleExpression (literal `SyntaxError: Cannot use keyword as exported variable name.:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { binding`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { hello, binding as`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `export { hello, binding as`)) , (argument (singleExpression (literal `SyntaxError: Unexpected end of script:3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `function noTopLevel() {    export * from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'export':3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `if (noTopLevel) {    export * from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'export':3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `{    export * from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'export':3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `for (var i = 0; i < 1000; ++i) {    export * from "Cocoa"}`)) , (argument (singleExpression (literal `SyntaxError: Unexpected keyword 'export':3`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `new.target;`)) , (argument (singleExpression (literal `SyntaxError: new.target is only valid inside functions.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `super();`)) , (argument (singleExpression (literal `SyntaxError: super is not valid in this context.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `super.test();`)) , (argument (singleExpression (literal `SyntaxError: super is not valid in this context.:2`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkModuleSyntaxError) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName raw)) `super.test = 20;`)) , (argument (singleExpression (literal `SyntaxError: super is not valid in this context.:2`))) )))) (eos ;))))) <EOF>)