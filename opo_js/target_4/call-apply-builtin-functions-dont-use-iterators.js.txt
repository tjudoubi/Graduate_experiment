(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable it) = (singleExpression (singleExpression (singleExpression (arrayLiteral [ elementList ])) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName iterator))) ]) (arguments ( ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression it)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression it) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal 'next'))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression it) . (identifierName next)))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression it) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression it)) ))))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bind) = (singleExpression (singleExpression (singleExpression Function) . (identifierName prototype)) . (identifierName bind)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable uncurryThis) = (singleExpression (singleExpression (singleExpression bind) . (identifierName bind)) (arguments ( (argument (singleExpression (singleExpression bind) . (identifierName call))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bindFn) = (singleExpression (singleExpression uncurryThis) (arguments ( (argument (singleExpression bind)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable applyFn) = (singleExpression (singleExpression uncurryThis) (arguments ( (argument (singleExpression (singleExpression bind) . (identifierName apply))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "here"))) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sliceFn) = (singleExpression (singleExpression uncurryThis) (arguments ( (argument (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName slice))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function addAll ( (formalParameterList (formalParameterArg (assignable var_args))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable args) = (singleExpression (singleExpression sliceFn) (arguments ( (argument (singleExpression arguments)) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression this))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression args) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression args) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression applyFn) (arguments ( (argument (singleExpression addAll)) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 4)))) , (arrayElement (singleExpression (literal (numericLiteral 5)))) , (arrayElement (singleExpression (literal (numericLiteral 6))))) ]))) ))) !== (singleExpression (literal (numericLiteral 18))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "incorrect result"))) (eos ;)))))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)