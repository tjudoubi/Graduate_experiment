(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeArray ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression actual) . (identifierName length))) , (argument (singleExpression (singleExpression expected) . (identifierName length))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression expected) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression Array) . (identifierName isArray)) (arguments ( (argument (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ])) )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName isArray)) (arguments ( (argument (singleExpression (singleExpression actual) [ (expressionSequence (singleExpression i)) ])) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression actual) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))) })) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression actual) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression expected) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;)))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression actual)) )))) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression e)) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName flatMap)) (arguments ( )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Array.prototype.flatMap callback must be a function`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression array) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression v)) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) , (argument (singleExpression (literal `Cocoa`))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal `Cocoa`)))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression v))))) )))) , (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression v))))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression v))) ])))))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression v))) ])))) ])))))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression v)) , (arrayElement (singleExpression v)) , (arrayElement (singleExpression v))) ])))))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 43))))) ]))) , (arrayElement (singleExpression (literal (numericLiteral 44))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression v)) , (arrayElement (singleExpression v))) ])))))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 43))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 43))))) ]))) , (arrayElement (singleExpression (literal (numericLiteral 44)))) , (arrayElement (singleExpression (literal (numericLiteral 44))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList , , , , , ,) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression v)) , (arrayElement (singleExpression v))) ])))))) )))) , (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 43)))) , (arrayElement (singleExpression (literal (numericLiteral 44))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression (arrayLiteral [ elementList ])))))) )))) , (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeArray) (arguments ( (argument (singleExpression (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 43))))) ]))) , (arrayElement (singleExpression (literal (numericLiteral 44))))) ])) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable v))) )) => (arrowFunctionBody (singleExpression v))))) )))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (literal (numericLiteral 43)))) , (arrayElement (singleExpression (literal (numericLiteral 44))))) ]))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class DerivedArray (classTail extends (singleExpression Array) { })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression DerivedArray))) )) . (identifierName flatMap)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression DerivedArray))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable flatMap) = (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName flatMap)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable realm) = (singleExpression (singleExpression createGlobalObject) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression Array))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression realm) . (identifierName Array)))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression Array))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array2) = (singleExpression new (singleExpression (singleExpression realm) . (identifierName Array))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array2) . (identifierName constructor)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression array2)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Species construction did not get a valid constructor`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array2) = (singleExpression new (singleExpression (singleExpression realm) . (identifierName Array))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array2) . (identifierName constructor)) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression array2)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression Array))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array2) = (singleExpression new (singleExpression (singleExpression realm) . (identifierName Array))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array2) . (identifierName constructor)) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName species)) ])) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression array2)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression Array))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array2) = (singleExpression new (singleExpression (singleExpression realm) . (identifierName Array))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array2) . (identifierName constructor)) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName species)) ])) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression undefined)) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression array2)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression Array))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array2) = (singleExpression new (singleExpression (singleExpression realm) . (identifierName Array))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array2) . (identifierName constructor)) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName species)) ])) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression DerivedArray)) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression flatMap) . (identifierName call)) (arguments ( (argument (singleExpression array2)) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))) instanceof (singleExpression DerivedArray))) , (argument (singleExpression (literal true))) )))) (eos ;))))) <EOF>)