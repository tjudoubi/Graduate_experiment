(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression msg) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (literal "")))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeAsync ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable run))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression hadError)) ) (statement (throwStatement throw (expressionSequence (singleExpression actual)) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression actual)) )))) (eos ;)))))) }))) (sourceElement (statement (classDeclaration class BaseWrongClass (classTail { (classElement (methodDefinition (propertyName (identifierName baseClassValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "wrong #1"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName property))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "wrong #2"))) (eos ;)))))) })) })))) (sourceElement (statement (functionDeclaration function shouldBeAsyncAndStoreBind ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable run))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression run)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression (singleExpression (singleExpression run) . (identifierName bind)) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression (singleExpression (singleExpression run) . (identifierName bind)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression (singleExpression (singleExpression run) . (identifierName bind)) (arguments ( (argument (singleExpression undefined)) )))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName property)) : (singleExpression (literal 'wrong value #1'))) , (propertyAssignment (propertyName (identifierName baseClassValue)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal 'worng value #2')))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression (singleExpression (singleExpression run) . (identifierName bind)) (arguments ( (argument (singleExpression obj)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression (singleExpression (singleExpression run) . (identifierName bind)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression BaseWrongClass) (arguments ( ))))) )))) )))) (eos ;)))))) }))) (sourceElement (statement (classDeclaration class BaseClass (classTail { (classElement (methodDefinition (propertyName (identifierName baseClassValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "BaseClassValue"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName property))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "test!"))) (eos ;)))))) })) })))) (sourceElement (statement (functionDeclaration function runSomething ( (formalParameterList (formalParameterArg (assignable callback))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression callback) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (classDeclaration class ChildClass (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName classValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classValue"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName classProperty))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classProperty"))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncValueExp)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression (literal 'value')))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncValueBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal 'value'))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisPropExp)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression (singleExpression this) . (identifierName classProperty)))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisPropBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName classProperty))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisPropWithAwaitBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable self) = (singleExpression (singleExpression this) . (identifierName classProperty)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression self) = (singleExpression await (singleExpression (literal 'abc'))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName classProperty))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisPropInEvalExp)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classProperty'))) ))))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisPropInEvalBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classProperty'))) )))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisPropInEvalWithAwaitBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable self) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classProperty'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'abc')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classProperty'))) )))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisValueExp)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisValueBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( )))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisValueBodyWithAwait)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable self) = (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'self')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( )))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisValueInEvalExp)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classValue()'))) ))))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisValueInEvalBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classValue()'))) )))) (eos ;)))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName asyncThisValueInEvalWithAwaitBody)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters x) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable self) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classValue()'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'self')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal 'this.classValue()'))) )))) (eos ;)))))) })))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "value"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncValueExp)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "value"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncValueBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropExp)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropWithAwaitBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropWithAwaitBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropInEvalExp)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropInEvalBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisPropInEvalWithAwaitBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisValueExp)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisValueBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisValueBodyWithAwait)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisValueInEvalExp)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisValueInEvalBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue"))) , (argument (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression ChildClass) (arguments ( ))) . (identifierName asyncThisValueInEvalWithAwaitBody)) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class ChildClass2 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression (literal 'internalValue')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))) + (singleExpression (literal ' '))) + (singleExpression (singleExpression this) . (identifierName classProperty))))))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName classStaticValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classStaticValue"))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName classValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName value))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName classProperty))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classProperty"))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "internalValue classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression ChildClass2) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class ChildClass3 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName internalValue)) = (singleExpression (literal 'internalValue')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable self) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))) + (singleExpression (literal ' '))) + (singleExpression (singleExpression this) . (identifierName classProperty))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'self')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))) + (singleExpression (literal ' '))) + (singleExpression (singleExpression this) . (identifierName classProperty)))) (eos ;)))))) })))) eos))))) })) (classElement (methodDefinition (propertyName (identifierName classValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classValue"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName classProperty))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classProperty"))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression ChildClass3) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promiseHolder) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable promise) = (singleExpression new (singleExpression (singleExpression Promise) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable resolve)) , (formalParameterArg (assignable reject))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) = (singleExpression resolve))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) = (singleExpression reject))) (eos ;)))))) })))) )))))) (eos ;)))) (sourceElement (statement (classDeclaration class ChildClass4 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doSomeStaff) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression doSomeStaff) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression promise))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))) + (singleExpression (literal ' '))) + (singleExpression (singleExpression this) . (identifierName classProperty)))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName internalValue)) = (singleExpression (literal 'internalValue')))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression (literal 'await')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName classValue)) (arguments ( ))) + (singleExpression (literal ' '))) + (singleExpression (singleExpression this) . (identifierName classProperty)))) (eos ;)))) (sourceElement (statement (emptyStatement ;))))) })))) (eos ;)))))) })) (classElement (methodDefinition (propertyName (identifierName classValue)) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classValue"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName classProperty))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "classProperty"))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsyncAndStoreBind) (arguments ( (argument (singleExpression (literal "classValue classProperty"))) , (argument (singleExpression new (singleExpression (singleExpression ChildClass4) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class ChildClass5 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable result))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression this) . (identifierName id))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arr) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters e) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName error)) = (singleExpression e))) (eos ;)))))) })))) )))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class ChildClass6 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable result))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression (singleExpression this) . (identifierName id)))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arr) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters e) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName error)) = (singleExpression e))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class ChildClass7 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable result))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (singleExpression this) . (identifierName id))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arr) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters e) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName error)) = (singleExpression e))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class ChildClass8 (classTail extends (singleExpression BaseClass) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable result))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable arr) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression this) . (identifierName id)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression arr) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) , (argument (singleExpression (anoymousFunction (arrowFunctionParameters e) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName error)) = (singleExpression e))) (eos ;)))))) })))) )))) (eos ;)))))) })) })))) (sourceElement (statement (functionDeclaration function checkTDZDuringCreate ( (formalParameterList (formalParameterArg (assignable klass))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression asyncError) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression new (singleExpression (singleExpression klass) (arguments ( (argument (singleExpression asyncError)) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable error) = (singleExpression (singleExpression (singleExpression (singleExpression asyncError) . (identifierName error)) instanceof (singleExpression ReferenceError)) && (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression asyncError) . (identifierName error)) . (identifierName toString)) (arguments ( ))) === (singleExpression (literal 'ReferenceError: Cannot access uninitialized variable.')))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'TDZ error is expected, but appeared:')) + (singleExpression (singleExpression asyncError) . (identifierName error)))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkTDZDuringCreate) (arguments ( (argument (singleExpression ChildClass5)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkTDZDuringCreate) (arguments ( (argument (singleExpression ChildClass6)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkTDZDuringCreate) (arguments ( (argument (singleExpression ChildClass7)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkTDZDuringCreate) (arguments ( (argument (singleExpression ChildClass8)) )))) (eos ;))))) <EOF>)