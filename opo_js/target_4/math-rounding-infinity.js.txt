(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testRound ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testRound)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testFloor ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testFloor)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testCeil ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName ceil)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testCeil)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testTrunc ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName trunc)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testTrunc)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testRound) (arguments ( (argument (singleExpression Infinity)) )))) , (argument (singleExpression Infinity)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testRound) (arguments ( (argument (singleExpression - (singleExpression Infinity))) )))) , (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testFloor) (arguments ( (argument (singleExpression Infinity)) )))) , (argument (singleExpression Infinity)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testFloor) (arguments ( (argument (singleExpression - (singleExpression Infinity))) )))) , (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testCeil) (arguments ( (argument (singleExpression Infinity)) )))) , (argument (singleExpression Infinity)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testCeil) (arguments ( (argument (singleExpression - (singleExpression Infinity))) )))) , (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testTrunc) (arguments ( (argument (singleExpression Infinity)) )))) , (argument (singleExpression Infinity)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testTrunc) (arguments ( (argument (singleExpression - (singleExpression Infinity))) )))) , (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;)))) })))))) <EOF>)