(program (sourceElements (sourceElement (statement (functionDeclaration function testArray ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable s) = (singleExpression (singleExpression (singleExpression array) . (identifierName join)) (arguments ( (argument (singleExpression (literal 'M'))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression s) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Bad result for array ")) + (singleExpression array)) + (singleExpression (literal " expected: \""))) + (singleExpression expected)) + (singleExpression (literal "\" but got: \""))) + (singleExpression s)) + (singleExpression (literal "\"")))) ))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testABC ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable resA)) , (formalParameterArg (assignable resB)) , (formalParameterArg (assignable resC))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArray) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression n)) ))))) , (argument (singleExpression resA)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArray) (arguments ( (argument (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression n)) ))))) , (argument (singleExpression resB)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArray) (arguments ( (argument (singleExpression new (singleExpression (singleExpression C) (arguments ( (argument (singleExpression n)) ))))) , (argument (singleExpression resC)) )))) (eos ;)))))) }))) (sourceElement (statement (classDeclaration class B (classTail extends (singleExpression Array) { })))) (sourceElement (statement (classDeclaration class C (classTail extends (singleExpression B) { })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal "MM"))) , (argument (singleExpression (literal "MM"))) , (argument (singleExpression (literal "MM"))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression B) . (identifierName prototype)) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal "foo")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "foo"))) , (argument (singleExpression (literal "foo"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal "MM"))) , (argument (singleExpression (literal "fooMM"))) , (argument (singleExpression (literal "fooMM"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression C) . (identifierName prototype)) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal "bar")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "foo"))) , (argument (singleExpression (literal "foo"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal "MM"))) , (argument (singleExpression (literal "fooMM"))) , (argument (singleExpression (literal "fooMbarM"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal "baz")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal ""))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal ""))) , (argument (singleExpression (literal "foo"))) , (argument (singleExpression (literal "foo"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testABC) (arguments ( (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal "MbazM"))) , (argument (singleExpression (literal "fooMbazM"))) , (argument (singleExpression (literal "fooMbarM"))) )))) (eos ;))))) <EOF>)