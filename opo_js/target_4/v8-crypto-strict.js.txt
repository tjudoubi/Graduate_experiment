(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dbits))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_DB))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_DM))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_DV))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_FP))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_FV))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_F1))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_F2))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable canary) = (singleExpression (literal (numericLiteral 0xdeadbeefcafe))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j_lm) = (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression canary) & (singleExpression (literal (numericLiteral 0xffffff))))) )) == (singleExpression (literal (numericLiteral 0xefcafe))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function BigInteger ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName array)) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) != (singleExpression (literal null)))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (literal "number")) == (singleExpression typeof (singleExpression a)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromNumber)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) , (argument (singleExpression c)) )))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression b) == (singleExpression (literal null))) && (singleExpression (singleExpression (literal "string")) != (singleExpression typeof (singleExpression a))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromString)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal (numericLiteral 256)))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromString)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))))))))) }))) (sourceElement (statement (functionDeclaration function nbi ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression BigInteger) (arguments ( (argument (singleExpression (literal null))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function am1 ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable x)) , (formalParameterArg (assignable w)) , (formalParameterArg (assignable j)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable w_array) = (singleExpression (singleExpression w) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression n)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (singleExpression (singleExpression (singleExpression x) * (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ])) + (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression j)) ])) + (singleExpression c)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression v) / (singleExpression (literal (numericLiteral 0x4000000))))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression (singleExpression j) ++)) ]) = (singleExpression (singleExpression v) & (singleExpression (literal (numericLiteral 0x3ffffff)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function am2 ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable x)) , (formalParameterArg (assignable w)) , (formalParameterArg (assignable j)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable w_array) = (singleExpression (singleExpression w) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xl) = (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0x7fff))))) , (variableDeclaration (assignable xh) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 15)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression n)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression (literal (numericLiteral 0x7fff)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable h) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) >> (singleExpression (literal (numericLiteral 15)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression xh) * (singleExpression l)) + (singleExpression (singleExpression h) * (singleExpression xl))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression xl) * (singleExpression l)) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression m) & (singleExpression (literal (numericLiteral 0x7fff))))) )) << (singleExpression (literal (numericLiteral 15))))) ))) + (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression j)) ])) + (singleExpression ( (expressionSequence (singleExpression (singleExpression c) & (singleExpression (literal (numericLiteral 0x3fffffff))))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression l) >>> (singleExpression (literal (numericLiteral 30))))) )) + (singleExpression ( (expressionSequence (singleExpression (singleExpression m) >>> (singleExpression (literal (numericLiteral 15))))) ))) + (singleExpression (singleExpression xh) * (singleExpression h))) + (singleExpression ( (expressionSequence (singleExpression (singleExpression c) >>> (singleExpression (literal (numericLiteral 30))))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression (singleExpression j) ++)) ]) = (singleExpression (singleExpression l) & (singleExpression (literal (numericLiteral 0x3fffffff)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function am3 ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable x)) , (formalParameterArg (assignable w)) , (formalParameterArg (assignable j)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable w_array) = (singleExpression (singleExpression w) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xl) = (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0x3fff))))) , (variableDeclaration (assignable xh) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 14)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression n)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression (literal (numericLiteral 0x3fff)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable h) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) >> (singleExpression (literal (numericLiteral 14)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression xh) * (singleExpression l)) + (singleExpression (singleExpression h) * (singleExpression xl))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression xl) * (singleExpression l)) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression m) & (singleExpression (literal (numericLiteral 0x3fff))))) )) << (singleExpression (literal (numericLiteral 14))))) ))) + (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression j)) ])) + (singleExpression c)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression l) >> (singleExpression (literal (numericLiteral 28))))) )) + (singleExpression ( (expressionSequence (singleExpression (singleExpression m) >> (singleExpression (literal (numericLiteral 14))))) ))) + (singleExpression (singleExpression xh) * (singleExpression h))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression (singleExpression j) ++)) ]) = (singleExpression (singleExpression l) & (singleExpression (literal (numericLiteral 0xfffffff)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function am4 ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable x)) , (formalParameterArg (assignable w)) , (formalParameterArg (assignable j)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable w_array) = (singleExpression (singleExpression w) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xl) = (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0x1fff))))) , (variableDeclaration (assignable xh) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 13)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression n)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression (literal (numericLiteral 0x1fff)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable h) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) >> (singleExpression (literal (numericLiteral 13)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression xh) * (singleExpression l)) + (singleExpression (singleExpression h) * (singleExpression xl))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression l) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression xl) * (singleExpression l)) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression m) & (singleExpression (literal (numericLiteral 0x1fff))))) )) << (singleExpression (literal (numericLiteral 13))))) ))) + (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression j)) ])) + (singleExpression c)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression l) >> (singleExpression (literal (numericLiteral 26))))) )) + (singleExpression ( (expressionSequence (singleExpression (singleExpression m) >> (singleExpression (literal (numericLiteral 13))))) ))) + (singleExpression (singleExpression xh) * (singleExpression h))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression w_array) [ (expressionSequence (singleExpression (singleExpression j) ++)) ]) = (singleExpression (singleExpression l) & (singleExpression (literal (numericLiteral 0x3ffffff)))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression c)) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable setupEngine) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable fn)) , (formalParameterArg (assignable bits))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName am)) = (singleExpression fn))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression dbits) = (singleExpression bits))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_DB) = (singleExpression dbits))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_DM) = (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression dbits))) )) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_DV) = (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression dbits))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_FP) = (singleExpression (literal (numericLiteral 52))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_FV) = (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression BI_FP)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_F1) = (singleExpression (singleExpression BI_FP) - (singleExpression dbits)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression BI_F2) = (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression dbits)) - (singleExpression BI_FP)))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_RM) = (singleExpression (literal "0123456789abcdefghijklmnopqrstuvwxyz")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable BI_RC) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rr)) , (variableDeclaration (assignable vv))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rr) = (singleExpression (singleExpression (singleExpression (literal "0")) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression vv) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression vv) <= (singleExpression (literal (numericLiteral 9))))) ; (expressionSequence (singleExpression ++ (singleExpression vv))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression BI_RC) [ (expressionSequence (singleExpression (singleExpression rr) ++)) ]) = (singleExpression vv))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rr) = (singleExpression (singleExpression (singleExpression (literal "a")) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression vv) = (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression vv) < (singleExpression (literal (numericLiteral 36))))) ; (expressionSequence (singleExpression ++ (singleExpression vv))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression BI_RC) [ (expressionSequence (singleExpression (singleExpression rr) ++)) ]) = (singleExpression vv))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rr) = (singleExpression (singleExpression (singleExpression (literal "A")) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression vv) = (singleExpression (literal (numericLiteral 10))))) ; (expressionSequence (singleExpression (singleExpression vv) < (singleExpression (literal (numericLiteral 36))))) ; (expressionSequence (singleExpression ++ (singleExpression vv))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression BI_RC) [ (expressionSequence (singleExpression (singleExpression rr) ++)) ]) = (singleExpression vv))) (eos ;)))))) (sourceElement (statement (functionDeclaration function int2char ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression BI_RM) . (identifierName charAt)) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function intAt ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression BI_RC) [ (expressionSequence (singleExpression (singleExpression (singleExpression s) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression i)) )))) ]))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression c) == (singleExpression (literal null)))) )) ? (singleExpression - (singleExpression (literal (numericLiteral 1)))) : (singleExpression c))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpCopyTo ( (formalParameterList (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpFromInt ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression - (singleExpression (literal (numericLiteral 1)))) : (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression x))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) < (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (singleExpression x) + (singleExpression DV)))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))))))) }))) (sourceElement (statement (functionDeclaration function nbv ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName fromInt)) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpFromString ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable k))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 16))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 4))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 8))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 3))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 256))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 8))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 2))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 1))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 32))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 5))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 4))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromRadix)) (arguments ( (argument (singleExpression s)) , (argument (singleExpression b)) )))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))))))))))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression s) . (identifierName length))) , (variableDeclaration (assignable mi) = (singleExpression (literal false))) , (variableDeclaration (assignable sh) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression k) == (singleExpression (literal (numericLiteral 8))))) )) ? (singleExpression (singleExpression (singleExpression s) [ (expressionSequence (singleExpression i)) ]) & (singleExpression (literal (numericLiteral 0xff)))) : (singleExpression (singleExpression intAt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression i)) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression s) . (identifierName charAt)) (arguments ( (argument (singleExpression i)) ))) == (singleExpression (literal "-")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression mi) = (singleExpression (literal true)))) (eos ;))))) (statement (continueStatement continue (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression mi) = (singleExpression (literal false)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sh) == (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) ++)) ]) = (singleExpression x))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression sh) + (singleExpression k)) > (singleExpression BI_DB))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ]) (assignmentOperator |=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression ( (expressionSequence (singleExpression (singleExpression BI_DB) - (singleExpression sh))) )))) )) - (singleExpression (literal (numericLiteral 1))))) )))) )) << (singleExpression sh)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) ++)) ]) = (singleExpression ( (expressionSequence (singleExpression (singleExpression x) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression BI_DB) - (singleExpression sh))) )))) )))) (eos ;)))) })) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ]) (assignmentOperator |=) (singleExpression (singleExpression x) << (singleExpression sh)))) (eos ;))))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sh) (assignmentOperator +=) (singleExpression k))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sh) >= (singleExpression BI_DB))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sh) (assignmentOperator -=) (singleExpression BI_DB))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression k) == (singleExpression (literal (numericLiteral 8)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression s) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) & (singleExpression (literal (numericLiteral 0x80))))) )) != (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) = (singleExpression - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression sh) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ]) (assignmentOperator |=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression ( (expressionSequence (singleExpression (singleExpression BI_DB) - (singleExpression sh))) )))) )) - (singleExpression (literal (numericLiteral 1))))) )) << (singleExpression sh)))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName clamp)) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression mi)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) . (identifierName subTo)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression this)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bnpClamp ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression BI_DM)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) > (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ]) == (singleExpression c)))) ) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bnToString ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "-")) + (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName negate)) (arguments ( ))) . (identifierName toString)) (arguments ( (argument (singleExpression b)) ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable k))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 16))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 4))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 8))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 3))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 2))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 1))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 32))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 5))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal (numericLiteral 4))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 2))))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName toRadix)) (arguments ( (argument (singleExpression b)) )))) (eos ;)))))))))))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable km) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression k))) )) - (singleExpression (literal (numericLiteral 1))))) , (variableDeclaration (assignable d)) , (variableDeclaration (assignable m) = (singleExpression (literal false))) , (variableDeclaration (assignable r) = (singleExpression (literal ""))) , (variableDeclaration (assignable i) = (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable p) = (singleExpression (singleExpression BI_DB) - (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) * (singleExpression BI_DB))) )) % (singleExpression k))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) --) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression p) < (singleExpression BI_DB)) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression d) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression p)))) )) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression m) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression int2char) (arguments ( (argument (singleExpression d)) ))))) (eos ;)))) })))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression p) < (singleExpression k))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression p))) )) - (singleExpression (literal (numericLiteral 1))))) )))) )) << (singleExpression ( (expressionSequence (singleExpression (singleExpression k) - (singleExpression p))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) (assignmentOperator |=) (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression -- (singleExpression i))) ]) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression p) (assignmentOperator +=) (singleExpression (singleExpression BI_DB) - (singleExpression k)))) ))))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression p) (assignmentOperator -=) (singleExpression k))) )))) )) & (singleExpression km)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression p) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) (assignmentOperator +=) (singleExpression BI_DB))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression i))) (eos ;)))) }))))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression d) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression m) = (singleExpression (literal true)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression m)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (singleExpression int2char) (arguments ( (argument (singleExpression d)) ))))) (eos ;)))))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression m) ? (singleExpression r) : (singleExpression (literal "0")))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnNegate ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) . (identifierName subTo)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnAbs ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression (singleExpression this) . (identifierName negate)) (arguments ( ))) : (singleExpression this))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnCompareTo ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a_array) = (singleExpression (singleExpression a) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression (singleExpression this) . (identifierName s)) - (singleExpression (singleExpression a) . (identifierName s))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression r) != (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression i) - (singleExpression (singleExpression a) . (identifierName t))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression r) != (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) - (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function nbits ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (literal (numericLiteral 1)))) , (variableDeclaration (assignable t))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression x) >>> (singleExpression (literal (numericLiteral 16)))))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression t))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 16))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 8)))))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression t))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 8))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 4)))))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression t))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 4))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 2)))))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression t))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 2))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 1)))))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression t))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 1))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnBitLength ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression BI_DB) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ))) + (singleExpression (singleExpression nbits) (arguments ( (argument (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ]) ^ (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression BI_DM))) )))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpDLShiftTo ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression n))) ]) = (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression (singleExpression this) . (identifierName t)) + (singleExpression n)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpDRShiftTo ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression n))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) - (singleExpression n))) ]) = (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression (singleExpression Math) . (identifierName max)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression n))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpLShiftTo ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bs) = (singleExpression (singleExpression n) % (singleExpression BI_DB)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cbs) = (singleExpression (singleExpression BI_DB) - (singleExpression bs)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bm) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression cbs))) )) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ds) = (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression n) / (singleExpression BI_DB))) )))) , (variableDeclaration (assignable c) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) << (singleExpression bs))) )) & (singleExpression BI_DM))) , (variableDeclaration (assignable i))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression i) + (singleExpression ds)) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression cbs))) )) | (singleExpression c)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression bm))) )) << (singleExpression bs)))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression ds) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression ds)) ]) = (singleExpression c))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) + (singleExpression ds)) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpRShiftTo ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ds) = (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression n) / (singleExpression BI_DB))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ds) >= (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bs) = (singleExpression (singleExpression n) % (singleExpression BI_DB)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cbs) = (singleExpression (singleExpression BI_DB) - (singleExpression bs)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bm) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression bs))) )) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression ds)) ]) >> (singleExpression bs)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression ds) + (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression i) - (singleExpression ds)) - (singleExpression (literal (numericLiteral 1))))) ]) (assignmentOperator |=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression bm))) )) << (singleExpression cbs)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) - (singleExpression ds))) ]) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression bs)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression bs) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression ds)) - (singleExpression (literal (numericLiteral 1))))) ]) (assignmentOperator |=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression bm))) )) << (singleExpression cbs)))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression ds)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpSubTo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a_array) = (singleExpression (singleExpression a) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable c) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (singleExpression a) . (identifierName t))) , (argument (singleExpression (singleExpression this) . (identifierName t))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression m))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) - (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression c) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator >>=) (singleExpression BI_DB))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName t)) < (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator -=) (singleExpression (singleExpression a) . (identifierName s)))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression c) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator >>=) (singleExpression BI_DB))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression this) . (identifierName s)))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator -=) (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression c) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator >>=) (singleExpression BI_DB))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator -=) (singleExpression (singleExpression a) . (identifierName s)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression c) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression - (singleExpression (literal (numericLiteral 1)))) : (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression c) < (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression BI_DV) + (singleExpression c)))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression c) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression c))) (eos ;)))))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression i))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpMultiplyTo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression (singleExpression this) . (identifierName abs)) (arguments ( )))) , (variableDeclaration (assignable y) = (singleExpression (singleExpression (singleExpression a) . (identifierName abs)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y_array) = (singleExpression (singleExpression y) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression x) . (identifierName t)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression i) + (singleExpression (singleExpression y) . (identifierName t))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression y) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (singleExpression x) . (identifierName t)))) ]) = (singleExpression (singleExpression (singleExpression x) . (identifierName am)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression y_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression r)) , (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression x) . (identifierName t))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) != (singleExpression (singleExpression a) . (identifierName s)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) . (identifierName subTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bnpSquareTo ( (formalParameterList (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression (singleExpression this) . (identifierName abs)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x_array) = (singleExpression (singleExpression x) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression (singleExpression x) . (identifierName t)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression x) . (identifierName t)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression x) . (identifierName am)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression r)) , (argument (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression i))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (singleExpression x) . (identifierName t)))) ]) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression x) . (identifierName am)) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression i)) ]))) , (argument (singleExpression r)) , (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression i)) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression c)) , (argument (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName t)) - (singleExpression i)) - (singleExpression (literal (numericLiteral 1))))) ))))) )) >= (singleExpression BI_DV))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (singleExpression x) . (identifierName t)))) ]) (assignmentOperator -=) (singleExpression BI_DV))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression i) + (singleExpression (singleExpression x) . (identifierName t))) + (singleExpression (literal (numericLiteral 1))))) ]) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ]) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression x) . (identifierName am)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression r)) , (argument (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression i))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpDivRemTo ( (formalParameterList (formalParameterArg (assignable m)) , (formalParameterArg (assignable q)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable pm) = (singleExpression (singleExpression (singleExpression m) . (identifierName abs)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression pm) . (identifierName t)) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable pt) = (singleExpression (singleExpression (singleExpression this) . (identifierName abs)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression pt) . (identifierName t)) < (singleExpression (singleExpression pm) . (identifierName t)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression q) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression q) . (identifierName fromInt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression r) != (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;))))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression r) == (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable ts) = (singleExpression (singleExpression this) . (identifierName s))) , (variableDeclaration (assignable ms) = (singleExpression (singleExpression m) . (identifierName s)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable pm_array) = (singleExpression (singleExpression pm) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nsh) = (singleExpression (singleExpression BI_DB) - (singleExpression (singleExpression nbits) (arguments ( (argument (singleExpression (singleExpression pm_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression pm) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) ])) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression nsh) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression pm) . (identifierName lShiftTo)) (arguments ( (argument (singleExpression nsh)) , (argument (singleExpression y)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression pt) . (identifierName lShiftTo)) (arguments ( (argument (singleExpression nsh)) , (argument (singleExpression r)) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression pm) . (identifierName copyTo)) (arguments ( (argument (singleExpression y)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression pt) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ys) = (singleExpression (singleExpression y) . (identifierName t)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y_array) = (singleExpression (singleExpression y) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y0) = (singleExpression (singleExpression y_array) [ (expressionSequence (singleExpression (singleExpression ys) - (singleExpression (literal (numericLiteral 1))))) ]))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression y0) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable yt) = (singleExpression (singleExpression (singleExpression y0) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression BI_F1))) ))) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ys) > (singleExpression (literal (numericLiteral 1))))) )) ? (singleExpression (singleExpression (singleExpression y_array) [ (expressionSequence (singleExpression (singleExpression ys) - (singleExpression (literal (numericLiteral 2))))) ]) >> (singleExpression BI_F2)) : (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable d1) = (singleExpression (singleExpression BI_FV) / (singleExpression yt))) , (variableDeclaration (assignable d2) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression BI_F1))) )) / (singleExpression yt))) , (variableDeclaration (assignable e) = (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression BI_F2)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression r) . (identifierName t))) , (variableDeclaration (assignable j) = (singleExpression (singleExpression i) - (singleExpression ys))) , (variableDeclaration (assignable t) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression q) == (singleExpression (literal null)))) )) ? (singleExpression (singleExpression nbi) (arguments ( ))) : (singleExpression q)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName dlShiftTo)) (arguments ( (argument (singleExpression j)) , (argument (singleExpression t)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression r) . (identifierName compareTo)) (arguments ( (argument (singleExpression t)) ))) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) ++)) ]) = (singleExpression (literal (numericLiteral 1))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName subTo)) (arguments ( (argument (singleExpression t)) , (argument (singleExpression r)) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ONE)) . (identifierName dlShiftTo)) (arguments ( (argument (singleExpression ys)) , (argument (singleExpression t)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression t) . (identifierName subTo)) (arguments ( (argument (singleExpression y)) , (argument (singleExpression y)) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName t)) < (singleExpression ys))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName t)) ++)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression j)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable qd) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression -- (singleExpression i))) ]) == (singleExpression y0))) )) ? (singleExpression BI_DM) : (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) * (singleExpression d1)) + (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) - (singleExpression (literal (numericLiteral 1))))) ]) + (singleExpression e))) )) * (singleExpression d2)))) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression y) . (identifierName am)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression qd)) , (argument (singleExpression r)) , (argument (singleExpression j)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression ys)) ))))) )) < (singleExpression qd))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName dlShiftTo)) (arguments ( (argument (singleExpression j)) , (argument (singleExpression t)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName subTo)) (arguments ( (argument (singleExpression t)) , (argument (singleExpression r)) )))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) < (singleExpression -- (singleExpression qd)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName subTo)) (arguments ( (argument (singleExpression t)) , (argument (singleExpression r)) )))) (eos ;)))))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression q) != (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName drShiftTo)) (arguments ( (argument (singleExpression ys)) , (argument (singleExpression q)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ts) != (singleExpression ms))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) . (identifierName subTo)) (arguments ( (argument (singleExpression q)) , (argument (singleExpression q)) )))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression ys))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression nsh) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression nsh)) , (argument (singleExpression r)) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ts) < (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) . (identifierName subTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bnMod ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName abs)) (arguments ( ))) . (identifierName divRemTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal null))) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (singleExpression r) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ZERO))) ))) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName subTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Classic ( (formalParameterList (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName m)) = (singleExpression m))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function cConvert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName s)) < (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) ))) >= (singleExpression (literal (numericLiteral 0)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName mod)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function cRevert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function cReduce ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName divRemTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) , (argument (singleExpression (literal null))) , (argument (singleExpression x)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function cMulTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName multiplyTo)) (arguments ( (argument (singleExpression y)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function cSqrTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName squareTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Classic) . (identifierName prototype)) . (identifierName convert)) = (singleExpression cConvert))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Classic) . (identifierName prototype)) . (identifierName revert)) = (singleExpression cRevert))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Classic) . (identifierName prototype)) . (identifierName reduce)) = (singleExpression cReduce))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Classic) . (identifierName prototype)) . (identifierName mulTo)) = (singleExpression cMulTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Classic) . (identifierName prototype)) . (identifierName sqrTo)) = (singleExpression cSqrTo))) (eos ;)))) (sourceElement (statement (functionDeclaration function bnpInvDigit ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) < (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 1))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y) = (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 3)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression y) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 2))) - (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0xf))))) )) * (singleExpression y)))) )))) )) & (singleExpression (literal (numericLiteral 0xf)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression y) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 2))) - (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0xff))))) )) * (singleExpression y)))) )))) )) & (singleExpression (literal (numericLiteral 0xff)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression y) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 2))) - (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0xffff))))) )) * (singleExpression y))) )) & (singleExpression (literal (numericLiteral 0xffff))))) )))) )))) )) & (singleExpression (literal (numericLiteral 0xffff)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression y) * (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 2))) - (singleExpression (singleExpression (singleExpression x) * (singleExpression y)) % (singleExpression BI_DV)))) )))) )) % (singleExpression BI_DV)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression y) > (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression BI_DV) - (singleExpression y)) : (singleExpression - (singleExpression y)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Montgomery ( (formalParameterList (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName m)) = (singleExpression m))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName mp)) = (singleExpression (singleExpression (singleExpression m) . (identifierName invDigit)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName mpl)) = (singleExpression (singleExpression (singleExpression this) . (identifierName mp)) & (singleExpression (literal (numericLiteral 0x7fff)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName mph)) = (singleExpression (singleExpression (singleExpression this) . (identifierName mp)) >> (singleExpression (literal (numericLiteral 15)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName um)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression ( (expressionSequence (singleExpression (singleExpression BI_DB) - (singleExpression (literal (numericLiteral 15))))) )))) )) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName mt2)) = (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression (singleExpression m) . (identifierName t))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function montConvert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName abs)) (arguments ( ))) . (identifierName dlShiftTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t))) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName divRemTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) , (argument (singleExpression (literal null))) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName s)) < (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (singleExpression r) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ZERO))) ))) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName subTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function montRevert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function montReduce ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x_array) = (singleExpression (singleExpression x) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName t)) <= (singleExpression (singleExpression this) . (identifierName mt2)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName t)) ++)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression (literal (numericLiteral 0x7fff)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u0) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression j) * (singleExpression (singleExpression this) . (identifierName mpl))) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression j) * (singleExpression (singleExpression this) . (identifierName mph))) + (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression (literal (numericLiteral 15))))) )) * (singleExpression (singleExpression this) . (identifierName mpl))))) )) & (singleExpression (singleExpression this) . (identifierName um)))) )) << (singleExpression (literal (numericLiteral 15))))) )))) )) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression i) + (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression j)) ]) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName am)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression u0)) , (argument (singleExpression x)) , (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t))) ))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression j)) ]) >= (singleExpression BI_DV))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression j)) ]) (assignmentOperator -=) (singleExpression BI_DV))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression ++ (singleExpression j))) ]) ++)) (eos ;)))) }))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName clamp)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName drShiftTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t))) , (argument (singleExpression x)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) ))) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName subTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) , (argument (singleExpression x)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function montSqrTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName squareTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function montMulTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName multiplyTo)) (arguments ( (argument (singleExpression y)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Montgomery) . (identifierName prototype)) . (identifierName convert)) = (singleExpression montConvert))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Montgomery) . (identifierName prototype)) . (identifierName revert)) = (singleExpression montRevert))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Montgomery) . (identifierName prototype)) . (identifierName reduce)) = (singleExpression montReduce))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Montgomery) . (identifierName prototype)) . (identifierName mulTo)) = (singleExpression montMulTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Montgomery) . (identifierName prototype)) . (identifierName sqrTo)) = (singleExpression montSqrTo))) (eos ;)))) (sourceElement (statement (functionDeclaration function bnpIsEven ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) > (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) & (singleExpression (literal (numericLiteral 1))))) )) : (singleExpression (singleExpression this) . (identifierName s)))) )) == (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpExp ( (formalParameterList (formalParameterArg (assignable e)) , (formalParameterArg (assignable z))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) > (singleExpression (literal (numericLiteral 0xffffffff)))) || (singleExpression (singleExpression e) < (singleExpression (literal (numericLiteral 1)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression BigInteger) . (identifierName ONE))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable r2) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable g) = (singleExpression (singleExpression (singleExpression z) . (identifierName convert)) (arguments ( (argument (singleExpression this)) )))) , (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression nbits) (arguments ( (argument (singleExpression e)) ))) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression g) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName sqrTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r2)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression e) & (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression i))) )))) )) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName mulTo)) (arguments ( (argument (singleExpression r2)) , (argument (singleExpression g)) , (argument (singleExpression r)) )))) (eos ;))) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression r))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression r2))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r2) = (singleExpression t))) (eos ;)))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName revert)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnModPowInt ( (formalParameterList (formalParameterArg (assignable e)) , (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable z))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) < (singleExpression (literal (numericLiteral 256)))) || (singleExpression (singleExpression (singleExpression m) . (identifierName isEven)) (arguments ( ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression new (singleExpression (singleExpression Classic) (arguments ( (argument (singleExpression m)) )))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression new (singleExpression (singleExpression Montgomery) (arguments ( (argument (singleExpression m)) )))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName exp)) (arguments ( (argument (singleExpression e)) , (argument (singleExpression z)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName copyTo)) = (singleExpression bnpCopyTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName fromInt)) = (singleExpression bnpFromInt))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName fromString)) = (singleExpression bnpFromString))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName clamp)) = (singleExpression bnpClamp))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName dlShiftTo)) = (singleExpression bnpDLShiftTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName drShiftTo)) = (singleExpression bnpDRShiftTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName lShiftTo)) = (singleExpression bnpLShiftTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName rShiftTo)) = (singleExpression bnpRShiftTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName subTo)) = (singleExpression bnpSubTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName multiplyTo)) = (singleExpression bnpMultiplyTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName squareTo)) = (singleExpression bnpSquareTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName divRemTo)) = (singleExpression bnpDivRemTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName invDigit)) = (singleExpression bnpInvDigit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName isEven)) = (singleExpression bnpIsEven))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName exp)) = (singleExpression bnpExp))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName toString)) = (singleExpression bnToString))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName negate)) = (singleExpression bnNegate))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName abs)) = (singleExpression bnAbs))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName compareTo)) = (singleExpression bnCompareTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName bitLength)) = (singleExpression bnBitLength))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName mod)) = (singleExpression bnMod))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName modPowInt)) = (singleExpression bnModPowInt))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ONE)) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function bnClone ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnIntValue ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) - (singleExpression BI_DV))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) (eos ;)))))))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) & (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 32))) - (singleExpression BI_DB))) )))) )) - (singleExpression (literal (numericLiteral 1))))) )))) )) << (singleExpression BI_DB))) )) | (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnByteValue ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression this) . (identifierName s)) : (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) << (singleExpression (literal (numericLiteral 24))))) )) >> (singleExpression (literal (numericLiteral 24)))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnShortValue ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression this) . (identifierName s)) : (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) << (singleExpression (literal (numericLiteral 16))))) )) >> (singleExpression (literal (numericLiteral 16)))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpChunkSize ( (formalParameterList (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName LN2)) * (singleExpression BI_DB)) / (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression r)) ))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnSigNum ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) <= (singleExpression (literal (numericLiteral 0)))) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) == (singleExpression (literal (numericLiteral 1)))) && (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) <= (singleExpression (literal (numericLiteral 0)))))) )))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))))))) }))) (sourceElement (statement (functionDeclaration function bnpToRadix ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName signum)) (arguments ( ))) == (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression b) < (singleExpression (literal (numericLiteral 2))))) || (singleExpression (singleExpression b) > (singleExpression (literal (numericLiteral 36)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal "0"))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cs) = (singleExpression (singleExpression (singleExpression this) . (identifierName chunkSize)) (arguments ( (argument (singleExpression b)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression b)) , (argument (singleExpression cs)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable d) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression a)) )))) , (variableDeclaration (assignable y) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable z) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable r) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName divRemTo)) (arguments ( (argument (singleExpression d)) , (argument (singleExpression y)) , (argument (singleExpression z)) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression y) . (identifierName signum)) (arguments ( ))) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression (singleExpression z) . (identifierName intValue)) (arguments ( ))))) )) . (identifierName toString)) (arguments ( (argument (singleExpression b)) ))) . (identifierName substr)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) + (singleExpression r)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName divRemTo)) (arguments ( (argument (singleExpression d)) , (argument (singleExpression y)) , (argument (singleExpression z)) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression z) . (identifierName intValue)) (arguments ( ))) . (identifierName toString)) (arguments ( (argument (singleExpression b)) ))) + (singleExpression r))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpFromRadix ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromInt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) == (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cs) = (singleExpression (singleExpression (singleExpression this) . (identifierName chunkSize)) (arguments ( (argument (singleExpression b)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable d) = (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression b)) , (argument (singleExpression cs)) )))) , (variableDeclaration (assignable mi) = (singleExpression (literal false))) , (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable w) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression s) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression intAt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression s) . (identifierName charAt)) (arguments ( (argument (singleExpression i)) ))) == (singleExpression (literal "-"))) && (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName signum)) (arguments ( ))) == (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression mi) = (singleExpression (literal true)))) (eos ;))))) (statement (continueStatement continue (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression w) = (singleExpression (singleExpression (singleExpression b) * (singleExpression w)) + (singleExpression x)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ++ (singleExpression j)) >= (singleExpression cs))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dMultiply)) (arguments ( (argument (singleExpression d)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dAddOffset)) (arguments ( (argument (singleExpression w)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression w) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression j) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dMultiply)) (arguments ( (argument (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression b)) , (argument (singleExpression j)) )))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dAddOffset)) (arguments ( (argument (singleExpression w)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression mi)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ZERO)) . (identifierName subTo)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression this)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function bnpFromNumber ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (literal "number")) == (singleExpression typeof (singleExpression b)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) < (singleExpression (literal (numericLiteral 2))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromInt)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromNumber)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression c)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName testBit)) (arguments ( (argument (singleExpression (singleExpression a) - (singleExpression (literal (numericLiteral 1))))) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName bitwiseTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ONE)) . (identifierName shiftLeft)) (arguments ( (argument (singleExpression (singleExpression a) - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression op_or)) , (argument (singleExpression this)) )))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEven)) (arguments ( )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dAddOffset)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) (statement (iterationStatement while ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName isProbablePrime)) (arguments ( (argument (singleExpression b)) ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dAddOffset)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName bitLength)) (arguments ( ))) > (singleExpression a))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName subTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ONE)) . (identifierName shiftLeft)) (arguments ( (argument (singleExpression (singleExpression a) - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression this)) )))) (eos ;)))))) }))))) }))))) })) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( ))))) , (variableDeclaration (assignable t) = (singleExpression (singleExpression a) & (singleExpression (literal (numericLiteral 7)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName length)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >> (singleExpression (literal (numericLiteral 3))))) )) + (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName nextBytes)) (arguments ( (argument (singleExpression x)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression t) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) (assignmentOperator &=) (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression t))) )) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fromString)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression (literal (numericLiteral 256)))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function bnToByteArray ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression this) . (identifierName t))) , (variableDeclaration (assignable r) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable p) = (singleExpression (singleExpression BI_DB) - (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) * (singleExpression BI_DB))) )) % (singleExpression (literal (numericLiteral 8)))))) , (variableDeclaration (assignable d)) , (variableDeclaration (assignable k) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) --) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression p) < (singleExpression BI_DB)) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression d) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression p)))) )) != (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression BI_DM))) )) >> (singleExpression p))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (singleExpression k) ++)) ]) = (singleExpression (singleExpression d) | (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) << (singleExpression ( (expressionSequence (singleExpression (singleExpression BI_DB) - (singleExpression p))) )))) ))))) (eos ;))))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression p) < (singleExpression (literal (numericLiteral 8))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) & (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression p))) )) - (singleExpression (literal (numericLiteral 1))))) )))) )) << (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 8))) - (singleExpression p))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) (assignmentOperator |=) (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression -- (singleExpression i))) ]) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression p) (assignmentOperator +=) (singleExpression (singleExpression BI_DB) - (singleExpression (literal (numericLiteral 8)))))) ))))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression p) (assignmentOperator -=) (singleExpression (literal (numericLiteral 8))))) )))) )) & (singleExpression (literal (numericLiteral 0xff)))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression p) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression p) (assignmentOperator +=) (singleExpression BI_DB))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression i))) (eos ;)))) }))))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression d) & (singleExpression (literal (numericLiteral 0x80))))) )) != (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression d) (assignmentOperator |=) (singleExpression - (singleExpression (literal (numericLiteral 256)))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression k) == (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression (literal (numericLiteral 0x80))))) )) != (singleExpression ( (expressionSequence (singleExpression (singleExpression d) & (singleExpression (literal (numericLiteral 0x80))))) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression k))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression k) > (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression d) != (singleExpression (singleExpression this) . (identifierName s))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) [ (expressionSequence (singleExpression (singleExpression k) ++)) ]) = (singleExpression d))) (eos ;)))))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnEquals ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName compareTo)) (arguments ( (argument (singleExpression a)) ))) == (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnMin ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName compareTo)) (arguments ( (argument (singleExpression a)) ))) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression this) : (singleExpression a))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnMax ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName compareTo)) (arguments ( (argument (singleExpression a)) ))) > (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression this) : (singleExpression a))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpBitwiseTo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable op)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a_array) = (singleExpression (singleExpression a) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i)) , (variableDeclaration (assignable f)) , (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (singleExpression a) . (identifierName t))) , (argument (singleExpression (singleExpression this) . (identifierName t))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression m))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression op) (arguments ( (argument (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName t)) < (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression (singleExpression a) . (identifierName s)) & (singleExpression BI_DM)))) (eos ;))) (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression m))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression op) (arguments ( (argument (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression f)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression BI_DM)))) (eos ;))) (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression m))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression op) (arguments ( (argument (singleExpression f)) , (argument (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression a) . (identifierName t)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression op) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName s))) , (argument (singleExpression (singleExpression a) . (identifierName s))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function op_and ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) & (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnAnd ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName bitwiseTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression op_and)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function op_or ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) | (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnOr ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName bitwiseTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression op_or)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function op_xor ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ^ (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnXor ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName bitwiseTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression op_xor)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function op_andnot ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) & (singleExpression ~ (singleExpression y)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnAndNot ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName bitwiseTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression op_andnot)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnNot ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression BI_DM) & (singleExpression ~ (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression ~ (singleExpression (singleExpression this) . (identifierName s))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnShiftLeft ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) < (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression - (singleExpression n))) , (argument (singleExpression r)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName lShiftTo)) (arguments ( (argument (singleExpression n)) , (argument (singleExpression r)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnShiftRight ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) < (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName lShiftTo)) (arguments ( (argument (singleExpression - (singleExpression n))) , (argument (singleExpression r)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression n)) , (argument (singleExpression r)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function lbit ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression x) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0xffff))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator >>=) (singleExpression (literal (numericLiteral 16))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 16))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0xff))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator >>=) (singleExpression (literal (numericLiteral 8))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 8))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 0xf))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator >>=) (singleExpression (literal (numericLiteral 4))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 4))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 3))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator >>=) (singleExpression (literal (numericLiteral 2))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (literal (numericLiteral 2))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 1))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression r))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnGetLowestSetBit ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression i) * (singleExpression BI_DB)) + (singleExpression (singleExpression lbit) (arguments ( (argument (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;)))))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) * (singleExpression BI_DB))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function cbit ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression x) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) (assignmentOperator &=) (singleExpression (singleExpression x) - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression r))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnBitCount ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable x) = (singleExpression (singleExpression (singleExpression this) . (identifierName s)) & (singleExpression BI_DM)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) (assignmentOperator +=) (singleExpression (singleExpression cbit) (arguments ( (argument (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) ^ (singleExpression x))) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnTestBit ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression n) / (singleExpression BI_DB))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression j) >= (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) != (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression j)) ]) & (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression ( (expressionSequence (singleExpression (singleExpression n) % (singleExpression BI_DB))) )))) )))) )) != (singleExpression (literal (numericLiteral 0))))) ))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpChangeBit ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable op))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ONE)) . (identifierName shiftLeft)) (arguments ( (argument (singleExpression n)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName bitwiseTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression op)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnSetBit ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName changeBit)) (arguments ( (argument (singleExpression n)) , (argument (singleExpression op_or)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnClearBit ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName changeBit)) (arguments ( (argument (singleExpression n)) , (argument (singleExpression op_andnot)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnFlipBit ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName changeBit)) (arguments ( (argument (singleExpression n)) , (argument (singleExpression op_xor)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpAddTo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a_array) = (singleExpression (singleExpression a) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable c) = (singleExpression (literal (numericLiteral 0)))) , (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (singleExpression a) . (identifierName t))) , (argument (singleExpression (singleExpression this) . (identifierName t))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression m))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]) + (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression c) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator >>=) (singleExpression BI_DB))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName t)) < (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression a) . (identifierName s)))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression c) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator >>=) (singleExpression BI_DB))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression this) . (identifierName s)))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression this) . (identifierName s)))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName t)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression c) & (singleExpression BI_DM)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator >>=) (singleExpression BI_DB))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression c) (assignmentOperator +=) (singleExpression (singleExpression a) . (identifierName s)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression c) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression - (singleExpression (literal (numericLiteral 1)))) : (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression c) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression c))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression c) < (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) ++)) ]) = (singleExpression (singleExpression BI_DV) + (singleExpression c)))) (eos ;)))))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression i))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnAdd ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName addTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnSubtract ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName subTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnMultiply ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName multiplyTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnDivide ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName divRemTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression r)) , (argument (singleExpression (literal null))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnRemainder ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName divRemTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (literal null))) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnDivideAndRemainder ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable q) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName divRemTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression q)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression q)) , (argument (singleExpression r)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpDMultiply ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName t))) ]) = (singleExpression (singleExpression (singleExpression this) . (identifierName am)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression this)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression this) . (identifierName t))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression (singleExpression this) . (identifierName t)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpDAddOffset ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable w))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) <= (singleExpression w))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) ++)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression w)) ]) (assignmentOperator +=) (singleExpression n))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression w)) ]) >= (singleExpression BI_DV))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression w)) ]) (assignmentOperator -=) (singleExpression BI_DV))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ++ (singleExpression w)) >= (singleExpression (singleExpression this) . (identifierName t)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) ++)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression w)) ]))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function NullExp ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function nNop ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function nMulTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName multiplyTo)) (arguments ( (argument (singleExpression y)) , (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function nSqrTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName squareTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression NullExp) . (identifierName prototype)) . (identifierName convert)) = (singleExpression nNop))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression NullExp) . (identifierName prototype)) . (identifierName revert)) = (singleExpression nNop))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression NullExp) . (identifierName prototype)) . (identifierName mulTo)) = (singleExpression nMulTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression NullExp) . (identifierName prototype)) . (identifierName sqrTo)) = (singleExpression nSqrTo))) (eos ;)))) (sourceElement (statement (functionDeclaration function bnPow ( (formalParameterList (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName exp)) (arguments ( (argument (singleExpression e)) , (argument (singleExpression new (singleExpression (singleExpression NullExp) (arguments ( ))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpMultiplyLowerTo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable n)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a_array) = (singleExpression (singleExpression a) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName t)) + (singleExpression (singleExpression a) . (identifierName t)))) , (argument (singleExpression n)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression i))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression -- (singleExpression i))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression (singleExpression r) . (identifierName t)) - (singleExpression (singleExpression this) . (identifierName t))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression j))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (singleExpression this) . (identifierName t)))) ]) = (singleExpression (singleExpression (singleExpression this) . (identifierName am)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression r)) , (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression this) . (identifierName t))) ))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression (singleExpression Math) . (identifierName min)) (arguments ( (argument (singleExpression (singleExpression a) . (identifierName t))) , (argument (singleExpression n)) ))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression j))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName am)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression r)) , (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression n) - (singleExpression i))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpMultiplyUpperTo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable n)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r_array) = (singleExpression (singleExpression r) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a_array) = (singleExpression (singleExpression a) . (identifierName array)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression n))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression r) . (identifierName t)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) + (singleExpression (singleExpression a) . (identifierName t))) - (singleExpression n))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName s)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression (singleExpression Math) . (identifierName max)) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (singleExpression this) . (identifierName t)))) , (argument (singleExpression (literal (numericLiteral 0)))) ))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression a) . (identifierName t)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r_array) [ (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) + (singleExpression i)) - (singleExpression n))) ]) = (singleExpression (singleExpression (singleExpression this) . (identifierName am)) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression i))) , (argument (singleExpression (singleExpression a_array) [ (expressionSequence (singleExpression i)) ])) , (argument (singleExpression r)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName t)) + (singleExpression i)) - (singleExpression n))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName clamp)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression r) . (identifierName drShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Barrett ( (formalParameterList (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName r2)) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName q3)) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName ONE)) . (identifierName dlShiftTo)) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression (singleExpression m) . (identifierName t)))) , (argument (singleExpression (singleExpression this) . (identifierName r2))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName mu)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName r2)) . (identifierName divide)) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName m)) = (singleExpression m))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function barrettConvert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName s)) < (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression (singleExpression x) . (identifierName t)) > (singleExpression (singleExpression (literal (numericLiteral 2))) * (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName mod)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) )))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;))) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))) }))))))))) }))) (sourceElement (statement (functionDeclaration function barrettRevert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function barrettReduce ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName drShiftTo)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression this) . (identifierName r2))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName t)) > (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName t)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)) + (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName clamp)) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName mu)) . (identifierName multiplyUpperTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName r2))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression this) . (identifierName q3))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName multiplyLowerTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName q3))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)) + (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (singleExpression this) . (identifierName r2))) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName r2))) ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName dAddOffset)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName m)) . (identifierName t)) + (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName subTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName r2))) , (argument (singleExpression x)) )))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) ))) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName subTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName m))) , (argument (singleExpression x)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function barrettSqrTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName squareTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function barrettMulTo ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName multiplyTo)) (arguments ( (argument (singleExpression y)) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName reduce)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Barrett) . (identifierName prototype)) . (identifierName convert)) = (singleExpression barrettConvert))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Barrett) . (identifierName prototype)) . (identifierName revert)) = (singleExpression barrettRevert))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Barrett) . (identifierName prototype)) . (identifierName reduce)) = (singleExpression barrettReduce))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Barrett) . (identifierName prototype)) . (identifierName mulTo)) = (singleExpression barrettMulTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Barrett) . (identifierName prototype)) . (identifierName sqrTo)) = (singleExpression barrettSqrTo))) (eos ;)))) (sourceElement (statement (functionDeclaration function bnModPow ( (formalParameterList (formalParameterArg (assignable e)) , (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable e_array) = (singleExpression (singleExpression e) . (identifierName array)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression e) . (identifierName bitLength)) (arguments ( )))) , (variableDeclaration (assignable k)) , (variableDeclaration (assignable r) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) , (variableDeclaration (assignable z))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 18))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 1))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 48))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 3))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 144))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 4))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 768))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 5))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression k) = (singleExpression (literal (numericLiteral 6))))) (eos ;)))))))))))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 8))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression new (singleExpression (singleExpression Classic) (arguments ( (argument (singleExpression m)) )))))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression m) . (identifierName isEven)) (arguments ( )))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression new (singleExpression (singleExpression Barrett) (arguments ( (argument (singleExpression m)) )))))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression z) = (singleExpression new (singleExpression (singleExpression Montgomery) (arguments ( (argument (singleExpression m)) )))))) (eos ;)))))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable g) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( ))))) , (variableDeclaration (assignable n) = (singleExpression (literal (numericLiteral 3)))) , (variableDeclaration (assignable k1) = (singleExpression (singleExpression k) - (singleExpression (literal (numericLiteral 1))))) , (variableDeclaration (assignable km) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression k))) )) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression g) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (singleExpression (singleExpression z) . (identifierName convert)) (arguments ( (argument (singleExpression this)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression k) > (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable g2) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName sqrTo)) (arguments ( (argument (singleExpression (singleExpression g) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression g2)) )))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression n) <= (singleExpression km))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression g) [ (expressionSequence (singleExpression n)) ]) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName mulTo)) (arguments ( (argument (singleExpression g2)) , (argument (singleExpression (singleExpression g) [ (expressionSequence (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 2))))) ])) , (argument (singleExpression (singleExpression g) [ (expressionSequence (singleExpression n)) ])) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression n) (assignmentOperator +=) (singleExpression (literal (numericLiteral 2))))) (eos ;)))) }))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (singleExpression (singleExpression e) . (identifierName t)) - (singleExpression (literal (numericLiteral 1))))) , (variableDeclaration (assignable w)) , (variableDeclaration (assignable is1) = (singleExpression (literal true))) , (variableDeclaration (assignable r2) = (singleExpression (singleExpression nbi) (arguments ( )))) , (variableDeclaration (assignable t))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression (singleExpression nbits) (arguments ( (argument (singleExpression (singleExpression e_array) [ (expressionSequence (singleExpression j)) ])) ))) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression j) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) >= (singleExpression k1))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression w) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression e_array) [ (expressionSequence (singleExpression j)) ]) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression i) - (singleExpression k1))) )))) )) & (singleExpression km)))) (eos ;))) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression w) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression e_array) [ (expressionSequence (singleExpression j)) ]) & (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )))) )) - (singleExpression (literal (numericLiteral 1))))) )))) )) << (singleExpression ( (expressionSequence (singleExpression (singleExpression k1) - (singleExpression i))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression j) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression w) (assignmentOperator |=) (singleExpression (singleExpression (singleExpression e_array) [ (expressionSequence (singleExpression (singleExpression j) - (singleExpression (literal (numericLiteral 1))))) ]) >> (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression BI_DB) + (singleExpression i)) - (singleExpression k1))) ))))) (eos ;)))))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression n) = (singleExpression k))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression w) & (singleExpression (literal (numericLiteral 1))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression w) (assignmentOperator >>=) (singleExpression (literal (numericLiteral 1))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression n))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) (assignmentOperator -=) (singleExpression n))) )) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) (assignmentOperator +=) (singleExpression BI_DB))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression j))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression is1)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression g) [ (expressionSequence (singleExpression w)) ]) . (identifierName copyTo)) (arguments ( (argument (singleExpression r)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression is1) = (singleExpression (literal false)))) (eos ;)))) })) else (statement (block { (statementList (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName sqrTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r2)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName sqrTo)) (arguments ( (argument (singleExpression r2)) , (argument (singleExpression r)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression n) (assignmentOperator -=) (singleExpression (literal (numericLiteral 2))))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName sqrTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r2)) )))) (eos ;))) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression r))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression r2))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r2) = (singleExpression t))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName mulTo)) (arguments ( (argument (singleExpression r2)) , (argument (singleExpression (singleExpression g) [ (expressionSequence (singleExpression w)) ])) , (argument (singleExpression r)) )))) (eos ;)))) })))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression j) >= (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression e_array) [ (expressionSequence (singleExpression j)) ]) & (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression i))) )))) )) == (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName sqrTo)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression r2)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression r))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression r2))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r2) = (singleExpression t))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression -- (singleExpression i)) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression BI_DB) - (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression -- (singleExpression j))) (eos ;)))) }))))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression z) . (identifierName revert)) (arguments ( (argument (singleExpression r)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnGCD ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression (singleExpression this) . (identifierName negate)) (arguments ( ))) : (singleExpression (singleExpression (singleExpression this) . (identifierName clone)) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression (singleExpression a) . (identifierName negate)) (arguments ( ))) : (singleExpression (singleExpression (singleExpression a) . (identifierName clone)) (arguments ( )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression y)) ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression x))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression y))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression t))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression x) . (identifierName getLowestSetBit)) (arguments ( )))) , (variableDeclaration (assignable g) = (singleExpression (singleExpression (singleExpression y) . (identifierName getLowestSetBit)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression g) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression g))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression g) = (singleExpression i))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression g) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression g)) , (argument (singleExpression x)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression g)) , (argument (singleExpression y)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName signum)) (arguments ( ))) > (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression (singleExpression x) . (identifierName getLowestSetBit)) (arguments ( ))))) )) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression x)) )))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (singleExpression (singleExpression y) . (identifierName getLowestSetBit)) (arguments ( ))))) )) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression y)) )))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName compareTo)) (arguments ( (argument (singleExpression y)) ))) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName subTo)) (arguments ( (argument (singleExpression y)) , (argument (singleExpression x)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression x)) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName subTo)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression y)) )))) (eos ;)))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression g) > (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression y) . (identifierName lShiftTo)) (arguments ( (argument (singleExpression g)) , (argument (singleExpression y)) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression y)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpModInt ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable this_array) = (singleExpression (singleExpression this) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable d) = (singleExpression (singleExpression BI_DV) % (singleExpression n))) , (variableDeclaration (assignable r) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName s)) < (singleExpression (literal (numericLiteral 0))))) )) ? (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1)))) : (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName t)) > (singleExpression (literal (numericLiteral 0))))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression d) == (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) % (singleExpression n)))) (eos ;))) else (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression this) . (identifierName t)) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression -- (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression d) * (singleExpression r)) + (singleExpression (singleExpression this_array) [ (expressionSequence (singleExpression i)) ]))) )) % (singleExpression n)))) (eos ;)))))))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression r)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnModInverse ( (formalParameterList (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ac) = (singleExpression (singleExpression (singleExpression m) . (identifierName isEven)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName isEven)) (arguments ( ))) && (singleExpression ac))) )) || (singleExpression (singleExpression (singleExpression (singleExpression m) . (identifierName signum)) (arguments ( ))) == (singleExpression (literal (numericLiteral 0)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression BigInteger) . (identifierName ZERO))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable u) = (singleExpression (singleExpression (singleExpression m) . (identifierName clone)) (arguments ( )))) , (variableDeclaration (assignable v) = (singleExpression (singleExpression (singleExpression this) . (identifierName clone)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) , (variableDeclaration (assignable b) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) , (variableDeclaration (assignable c) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) , (variableDeclaration (assignable d) = (singleExpression (singleExpression nbv) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression u) . (identifierName signum)) (arguments ( ))) != (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression u) . (identifierName isEven)) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression u) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression u)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ac)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression (singleExpression (singleExpression a) . (identifierName isEven)) (arguments ( )))) || (singleExpression ! (singleExpression (singleExpression (singleExpression b) . (identifierName isEven)) (arguments ( )))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName addTo)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression a)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName subTo)) (arguments ( (argument (singleExpression m)) , (argument (singleExpression b)) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression a)) )))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression b) . (identifierName isEven)) (arguments ( ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName subTo)) (arguments ( (argument (singleExpression m)) , (argument (singleExpression b)) )))) (eos ;))))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression b)) )))) (eos ;)))) })))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName isEven)) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression v)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ac)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ! (singleExpression (singleExpression (singleExpression c) . (identifierName isEven)) (arguments ( )))) || (singleExpression ! (singleExpression (singleExpression (singleExpression d) . (identifierName isEven)) (arguments ( )))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName addTo)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression c)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName subTo)) (arguments ( (argument (singleExpression m)) , (argument (singleExpression d)) )))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression c)) )))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression d) . (identifierName isEven)) (arguments ( ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName subTo)) (arguments ( (argument (singleExpression m)) , (argument (singleExpression d)) )))) (eos ;))))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName rShiftTo)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression d)) )))) (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression u) . (identifierName compareTo)) (arguments ( (argument (singleExpression v)) ))) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression u) . (identifierName subTo)) (arguments ( (argument (singleExpression v)) , (argument (singleExpression u)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ac)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName subTo)) (arguments ( (argument (singleExpression c)) , (argument (singleExpression a)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName subTo)) (arguments ( (argument (singleExpression d)) , (argument (singleExpression b)) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName subTo)) (arguments ( (argument (singleExpression u)) , (argument (singleExpression v)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ac)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName subTo)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression c)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName subTo)) (arguments ( (argument (singleExpression b)) , (argument (singleExpression d)) )))) (eos ;)))) }))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression v) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) != (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression BigInteger) . (identifierName ZERO))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression d) . (identifierName compareTo)) (arguments ( (argument (singleExpression m)) ))) >= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName subtract)) (arguments ( (argument (singleExpression m)) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression d) . (identifierName signum)) (arguments ( ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName addTo)) (arguments ( (argument (singleExpression m)) , (argument (singleExpression d)) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression d)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression d) . (identifierName signum)) (arguments ( ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression d) . (identifierName add)) (arguments ( (argument (singleExpression m)) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression d)) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable lowprimes) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 5)))) , (arrayElement (singleExpression (literal (numericLiteral 7)))) , (arrayElement (singleExpression (literal (numericLiteral 11)))) , (arrayElement (singleExpression (literal (numericLiteral 13)))) , (arrayElement (singleExpression (literal (numericLiteral 17)))) , (arrayElement (singleExpression (literal (numericLiteral 19)))) , (arrayElement (singleExpression (literal (numericLiteral 23)))) , (arrayElement (singleExpression (literal (numericLiteral 29)))) , (arrayElement (singleExpression (literal (numericLiteral 31)))) , (arrayElement (singleExpression (literal (numericLiteral 37)))) , (arrayElement (singleExpression (literal (numericLiteral 41)))) , (arrayElement (singleExpression (literal (numericLiteral 43)))) , (arrayElement (singleExpression (literal (numericLiteral 47)))) , (arrayElement (singleExpression (literal (numericLiteral 53)))) , (arrayElement (singleExpression (literal (numericLiteral 59)))) , (arrayElement (singleExpression (literal (numericLiteral 61)))) , (arrayElement (singleExpression (literal (numericLiteral 67)))) , (arrayElement (singleExpression (literal (numericLiteral 71)))) , (arrayElement (singleExpression (literal (numericLiteral 73)))) , (arrayElement (singleExpression (literal (numericLiteral 79)))) , (arrayElement (singleExpression (literal (numericLiteral 83)))) , (arrayElement (singleExpression (literal (numericLiteral 89)))) , (arrayElement (singleExpression (literal (numericLiteral 97)))) , (arrayElement (singleExpression (literal (numericLiteral 101)))) , (arrayElement (singleExpression (literal (numericLiteral 103)))) , (arrayElement (singleExpression (literal (numericLiteral 107)))) , (arrayElement (singleExpression (literal (numericLiteral 109)))) , (arrayElement (singleExpression (literal (numericLiteral 113)))) , (arrayElement (singleExpression (literal (numericLiteral 127)))) , (arrayElement (singleExpression (literal (numericLiteral 131)))) , (arrayElement (singleExpression (literal (numericLiteral 137)))) , (arrayElement (singleExpression (literal (numericLiteral 139)))) , (arrayElement (singleExpression (literal (numericLiteral 149)))) , (arrayElement (singleExpression (literal (numericLiteral 151)))) , (arrayElement (singleExpression (literal (numericLiteral 157)))) , (arrayElement (singleExpression (literal (numericLiteral 163)))) , (arrayElement (singleExpression (literal (numericLiteral 167)))) , (arrayElement (singleExpression (literal (numericLiteral 173)))) , (arrayElement (singleExpression (literal (numericLiteral 179)))) , (arrayElement (singleExpression (literal (numericLiteral 181)))) , (arrayElement (singleExpression (literal (numericLiteral 191)))) , (arrayElement (singleExpression (literal (numericLiteral 193)))) , (arrayElement (singleExpression (literal (numericLiteral 197)))) , (arrayElement (singleExpression (literal (numericLiteral 199)))) , (arrayElement (singleExpression (literal (numericLiteral 211)))) , (arrayElement (singleExpression (literal (numericLiteral 223)))) , (arrayElement (singleExpression (literal (numericLiteral 227)))) , (arrayElement (singleExpression (literal (numericLiteral 229)))) , (arrayElement (singleExpression (literal (numericLiteral 233)))) , (arrayElement (singleExpression (literal (numericLiteral 239)))) , (arrayElement (singleExpression (literal (numericLiteral 241)))) , (arrayElement (singleExpression (literal (numericLiteral 251)))) , (arrayElement (singleExpression (literal (numericLiteral 257)))) , (arrayElement (singleExpression (literal (numericLiteral 263)))) , (arrayElement (singleExpression (literal (numericLiteral 269)))) , (arrayElement (singleExpression (literal (numericLiteral 271)))) , (arrayElement (singleExpression (literal (numericLiteral 277)))) , (arrayElement (singleExpression (literal (numericLiteral 281)))) , (arrayElement (singleExpression (literal (numericLiteral 283)))) , (arrayElement (singleExpression (literal (numericLiteral 293)))) , (arrayElement (singleExpression (literal (numericLiteral 307)))) , (arrayElement (singleExpression (literal (numericLiteral 311)))) , (arrayElement (singleExpression (literal (numericLiteral 313)))) , (arrayElement (singleExpression (literal (numericLiteral 317)))) , (arrayElement (singleExpression (literal (numericLiteral 331)))) , (arrayElement (singleExpression (literal (numericLiteral 337)))) , (arrayElement (singleExpression (literal (numericLiteral 347)))) , (arrayElement (singleExpression (literal (numericLiteral 349)))) , (arrayElement (singleExpression (literal (numericLiteral 353)))) , (arrayElement (singleExpression (literal (numericLiteral 359)))) , (arrayElement (singleExpression (literal (numericLiteral 367)))) , (arrayElement (singleExpression (literal (numericLiteral 373)))) , (arrayElement (singleExpression (literal (numericLiteral 379)))) , (arrayElement (singleExpression (literal (numericLiteral 383)))) , (arrayElement (singleExpression (literal (numericLiteral 389)))) , (arrayElement (singleExpression (literal (numericLiteral 397)))) , (arrayElement (singleExpression (literal (numericLiteral 401)))) , (arrayElement (singleExpression (literal (numericLiteral 409)))) , (arrayElement (singleExpression (literal (numericLiteral 419)))) , (arrayElement (singleExpression (literal (numericLiteral 421)))) , (arrayElement (singleExpression (literal (numericLiteral 431)))) , (arrayElement (singleExpression (literal (numericLiteral 433)))) , (arrayElement (singleExpression (literal (numericLiteral 439)))) , (arrayElement (singleExpression (literal (numericLiteral 443)))) , (arrayElement (singleExpression (literal (numericLiteral 449)))) , (arrayElement (singleExpression (literal (numericLiteral 457)))) , (arrayElement (singleExpression (literal (numericLiteral 461)))) , (arrayElement (singleExpression (literal (numericLiteral 463)))) , (arrayElement (singleExpression (literal (numericLiteral 467)))) , (arrayElement (singleExpression (literal (numericLiteral 479)))) , (arrayElement (singleExpression (literal (numericLiteral 487)))) , (arrayElement (singleExpression (literal (numericLiteral 491)))) , (arrayElement (singleExpression (literal (numericLiteral 499)))) , (arrayElement (singleExpression (literal (numericLiteral 503)))) , (arrayElement (singleExpression (literal (numericLiteral 509))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable lplim) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) << (singleExpression (literal (numericLiteral 26))))) )) / (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression (singleExpression (singleExpression lowprimes) . (identifierName length)) - (singleExpression (literal (numericLiteral 1))))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function bnIsProbablePrime ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i)) , (variableDeclaration (assignable x) = (singleExpression (singleExpression (singleExpression this) . (identifierName abs)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x_array) = (singleExpression (singleExpression x) . (identifierName array)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName t)) == (singleExpression (literal (numericLiteral 1)))) && (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) <= (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression (singleExpression (singleExpression lowprimes) . (identifierName length)) - (singleExpression (literal (numericLiteral 1))))) ])))) ) (statement (block { (statementList (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression lowprimes) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression x_array) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) == (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression i)) ]))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;))))))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName isEven)) (arguments ( )))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression lowprimes) . (identifierName length)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression i)) ])) , (variableDeclaration (assignable j) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression j) < (singleExpression (singleExpression lowprimes) . (identifierName length))) && (singleExpression (singleExpression m) < (singleExpression lplim)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression m) (assignmentOperator *=) (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression (singleExpression j) ++)) ]))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression m) = (singleExpression (singleExpression (singleExpression x) . (identifierName modInt)) (arguments ( (argument (singleExpression m)) ))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression j))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression m) % (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression (singleExpression i) ++)) ])) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName millerRabin)) (arguments ( (argument (singleExpression t)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bnpMillerRabin ( (formalParameterList (formalParameterArg (assignable t))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable n1) = (singleExpression (singleExpression (singleExpression this) . (identifierName subtract)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable k) = (singleExpression (singleExpression (singleExpression n1) . (identifierName getLowestSetBit)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression k) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression (singleExpression n1) . (identifierName shiftRight)) (arguments ( (argument (singleExpression k)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) + (singleExpression (literal (numericLiteral 1))))) )) >> (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression t) > (singleExpression (singleExpression lowprimes) . (identifierName length)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression lowprimes) . (identifierName length)))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression nbi) (arguments ( ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression t))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName fromInt)) (arguments ( (argument (singleExpression (singleExpression lowprimes) [ (expressionSequence (singleExpression i)) ])) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable y) = (singleExpression (singleExpression (singleExpression a) . (identifierName modPow)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression this)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression y) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) != (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (singleExpression y) . (identifierName compareTo)) (arguments ( (argument (singleExpression n1)) ))) != (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 1))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression j) ++) < (singleExpression k)) && (singleExpression (singleExpression (singleExpression (singleExpression y) . (identifierName compareTo)) (arguments ( (argument (singleExpression n1)) ))) != (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression (singleExpression y) . (identifierName modPowInt)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression this)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression y) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression y) . (identifierName compareTo)) (arguments ( (argument (singleExpression n1)) ))) != (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName chunkSize)) = (singleExpression bnpChunkSize))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName toRadix)) = (singleExpression bnpToRadix))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName fromRadix)) = (singleExpression bnpFromRadix))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName fromNumber)) = (singleExpression bnpFromNumber))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName bitwiseTo)) = (singleExpression bnpBitwiseTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName changeBit)) = (singleExpression bnpChangeBit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName addTo)) = (singleExpression bnpAddTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName dMultiply)) = (singleExpression bnpDMultiply))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName dAddOffset)) = (singleExpression bnpDAddOffset))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName multiplyLowerTo)) = (singleExpression bnpMultiplyLowerTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName multiplyUpperTo)) = (singleExpression bnpMultiplyUpperTo))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName modInt)) = (singleExpression bnpModInt))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName millerRabin)) = (singleExpression bnpMillerRabin))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName clone)) = (singleExpression bnClone))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName intValue)) = (singleExpression bnIntValue))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName byteValue)) = (singleExpression bnByteValue))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName shortValue)) = (singleExpression bnShortValue))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName signum)) = (singleExpression bnSigNum))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName toByteArray)) = (singleExpression bnToByteArray))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName equals)) = (singleExpression bnEquals))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName min)) = (singleExpression bnMin))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName max)) = (singleExpression bnMax))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName and)) = (singleExpression bnAnd))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName or)) = (singleExpression bnOr))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName xor)) = (singleExpression bnXor))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName andNot)) = (singleExpression bnAndNot))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName not)) = (singleExpression bnNot))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName shiftLeft)) = (singleExpression bnShiftLeft))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName shiftRight)) = (singleExpression bnShiftRight))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName getLowestSetBit)) = (singleExpression bnGetLowestSetBit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName bitCount)) = (singleExpression bnBitCount))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName testBit)) = (singleExpression bnTestBit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName setBit)) = (singleExpression bnSetBit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName clearBit)) = (singleExpression bnClearBit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName flipBit)) = (singleExpression bnFlipBit))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName add)) = (singleExpression bnAdd))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName subtract)) = (singleExpression bnSubtract))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName multiply)) = (singleExpression bnMultiply))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName divide)) = (singleExpression bnDivide))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName remainder)) = (singleExpression bnRemainder))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName divideAndRemainder)) = (singleExpression bnDivideAndRemainder))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName modPow)) = (singleExpression bnModPow))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName modInverse)) = (singleExpression bnModInverse))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName pow)) = (singleExpression bnPow))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName gcd)) = (singleExpression bnGCD))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression BigInteger) . (identifierName prototype)) . (identifierName isProbablePrime)) = (singleExpression bnIsProbablePrime))) (eos ;)))) (sourceElement (statement (functionDeclaration function Arcfour ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName j)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName S)) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function ARC4init ( (formalParameterList (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i)) , (variableDeclaration (assignable j)) , (variableDeclaration (assignable t))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 256))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression i)) ]) = (singleExpression i))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 256))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression j) + (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression i)) ])) + (singleExpression (singleExpression key) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (singleExpression key) . (identifierName length)))) ]))) )) & (singleExpression (literal (numericLiteral 255)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression i)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression j)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression j)) ]) = (singleExpression t))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName j)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function ARC4next ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName i)) + (singleExpression (literal (numericLiteral 1))))) )) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName j)) = (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName j)) + (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName i))) ]))) )) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName i))) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName i))) ]) = (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName j))) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName j))) ]) = (singleExpression t))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression t) + (singleExpression (singleExpression (singleExpression this) . (identifierName S)) [ (expressionSequence (singleExpression (singleExpression this) . (identifierName i))) ]))) )) & (singleExpression (literal (numericLiteral 255))))) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Arcfour) . (identifierName prototype)) . (identifierName init)) = (singleExpression ARC4init))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Arcfour) . (identifierName prototype)) . (identifierName next)) = (singleExpression ARC4next))) (eos ;)))) (sourceElement (statement (functionDeclaration function prng_newstate ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Arcfour) (arguments ( ))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rng_psize) = (singleExpression (literal (numericLiteral 256))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rng_state))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rng_pool))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rng_pptr))) (eos ;)))) (sourceElement (statement (functionDeclaration function rng_seed_int ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression (singleExpression rng_pptr) ++)) ]) (assignmentOperator ^=) (singleExpression (singleExpression x) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression (singleExpression rng_pptr) ++)) ]) (assignmentOperator ^=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 8))))) )) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression (singleExpression rng_pptr) ++)) ]) (assignmentOperator ^=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 16))))) )) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression (singleExpression rng_pptr) ++)) ]) (assignmentOperator ^=) (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression x) >> (singleExpression (literal (numericLiteral 24))))) )) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression rng_pptr) >= (singleExpression rng_psize))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_pptr) (assignmentOperator -=) (singleExpression rng_psize))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function rng_seed_time ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_seed_int) (arguments ( (argument (singleExpression (literal (numericLiteral 1122926989487)))) )))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression rng_pool) == (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_pool) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_pptr) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression rng_pptr) < (singleExpression rng_psize))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression t) = (singleExpression (singleExpression (singleExpression Math) . (identifierName floor)) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 65536))) * (singleExpression (singleExpression (singleExpression Math) . (identifierName random)) (arguments ( ))))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression (singleExpression rng_pptr) ++)) ]) = (singleExpression (singleExpression t) >>> (singleExpression (literal (numericLiteral 8)))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression (singleExpression rng_pptr) ++)) ]) = (singleExpression (singleExpression t) & (singleExpression (literal (numericLiteral 255)))))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_pptr) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_seed_time) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function rng_get_byte ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression rng_state) == (singleExpression (literal null)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_seed_time) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_state) = (singleExpression (singleExpression prng_newstate) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_state) . (identifierName init)) (arguments ( (argument (singleExpression rng_pool)) )))) (eos ;))) (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression rng_pptr) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression rng_pptr) < (singleExpression (singleExpression rng_pool) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression rng_pptr))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng_pool) [ (expressionSequence (singleExpression rng_pptr)) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression rng_pptr) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression rng_state) . (identifierName next)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function rng_get_bytes ( (formalParameterList (formalParameterArg (assignable ba))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression ba) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ba) [ (expressionSequence (singleExpression i)) ]) = (singleExpression (singleExpression rng_get_byte) (arguments ( ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function SecureRandom ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SecureRandom) . (identifierName prototype)) . (identifierName nextBytes)) = (singleExpression rng_get_bytes))) (eos ;)))) (sourceElement (statement (functionDeclaration function parseBigInt ( (formalParameterList (formalParameterArg (assignable str)) , (formalParameterArg (assignable r))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression BigInteger) (arguments ( (argument (singleExpression str)) , (argument (singleExpression r)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function linebrk ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ret) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression i) + (singleExpression n)) < (singleExpression (singleExpression s) . (identifierName length)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ret) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression (singleExpression s) . (identifierName substring)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (singleExpression i) + (singleExpression n))) ))) + (singleExpression (literal "\n"))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) (assignmentOperator +=) (singleExpression n))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ret) + (singleExpression (singleExpression (singleExpression s) . (identifierName substring)) (arguments ( (argument (singleExpression i)) , (argument (singleExpression (singleExpression s) . (identifierName length))) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function byte2Hex ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression b) < (singleExpression (literal (numericLiteral 0x10))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "0")) + (singleExpression (singleExpression (singleExpression b) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression b) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function pkcs1pad2 ( (formalParameterList (formalParameterArg (assignable s)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) < (singleExpression (singleExpression (singleExpression s) . (identifierName length)) + (singleExpression (literal (numericLiteral 11)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Message too long for RSA"))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ba) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (singleExpression (singleExpression s) . (identifierName length)) - (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression i) >= (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ba) [ (expressionSequence (singleExpression -- (singleExpression n))) ]) = (singleExpression (singleExpression (singleExpression s) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (singleExpression i) --)) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ba) [ (expressionSequence (singleExpression -- (singleExpression n))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rng) = (singleExpression new (singleExpression (singleExpression SecureRandom) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 2))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) == (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression rng) . (identifierName nextBytes)) (arguments ( (argument (singleExpression x)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ba) [ (expressionSequence (singleExpression -- (singleExpression n))) ]) = (singleExpression (singleExpression x) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ba) [ (expressionSequence (singleExpression -- (singleExpression n))) ]) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ba) [ (expressionSequence (singleExpression -- (singleExpression n))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression BigInteger) (arguments ( (argument (singleExpression ba)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function RSAKey ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName n)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName d)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName p)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName q)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dmp1)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dmq1)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName coeff)) = (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function RSASetPublic ( (formalParameterList (formalParameterArg (assignable N)) , (formalParameterArg (assignable E))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression N) != (singleExpression (literal null))) && (singleExpression (singleExpression E) != (singleExpression (literal null)))) && (singleExpression (singleExpression (singleExpression N) . (identifierName length)) > (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression E) . (identifierName length)) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName n)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression N)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression E)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) })) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Invalid RSA public key"))) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function RSADoPublic ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName modPowInt)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName e))) , (argument (singleExpression (singleExpression this) . (identifierName n))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function RSAEncrypt ( (formalParameterList (formalParameterArg (assignable text))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (singleExpression pkcs1pad2) (arguments ( (argument (singleExpression text)) , (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName n)) . (identifierName bitLength)) (arguments ( ))) + (singleExpression (literal (numericLiteral 7))))) )) >> (singleExpression (literal (numericLiteral 3))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression m) == (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression (singleExpression this) . (identifierName doPublic)) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression c) == (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable h) = (singleExpression (singleExpression (singleExpression c) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression h) . (identifierName length)) & (singleExpression (literal (numericLiteral 1))))) )) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression h)) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "0")) + (singleExpression h))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName doPublic)) = (singleExpression RSADoPublic))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName setPublic)) = (singleExpression RSASetPublic))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName encrypt)) = (singleExpression RSAEncrypt))) (eos ;)))) (sourceElement (statement (functionDeclaration function pkcs1unpad2 ( (formalParameterList (formalParameterArg (assignable d)) , (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (singleExpression (singleExpression d) . (identifierName toByteArray)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression i) < (singleExpression (singleExpression b) . (identifierName length))) && (singleExpression (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ]) == (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName length)) - (singleExpression i)) != (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) || (singleExpression (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (literal (numericLiteral 2)))))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ]) != (singleExpression (literal (numericLiteral 0))))) ) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ++ (singleExpression i)) >= (singleExpression (singleExpression b) . (identifierName length)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ret) = (singleExpression (literal "")))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression ++ (singleExpression i)) < (singleExpression (singleExpression b) . (identifierName length)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ret) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression String) . (identifierName fromCharCode)) (arguments ( (argument (singleExpression (singleExpression b) [ (expressionSequence (singleExpression i)) ])) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ret)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function RSASetPrivate ( (formalParameterList (formalParameterArg (assignable N)) , (formalParameterArg (assignable E)) , (formalParameterArg (assignable D))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression N) != (singleExpression (literal null))) && (singleExpression (singleExpression E) != (singleExpression (literal null)))) && (singleExpression (singleExpression (singleExpression N) . (identifierName length)) > (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression E) . (identifierName length)) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName n)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression N)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression E)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName d)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression D)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) })) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Invalid RSA private key"))) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function RSASetPrivateEx ( (formalParameterList (formalParameterArg (assignable N)) , (formalParameterArg (assignable E)) , (formalParameterArg (assignable D)) , (formalParameterArg (assignable P)) , (formalParameterArg (assignable Q)) , (formalParameterArg (assignable DP)) , (formalParameterArg (assignable DQ)) , (formalParameterArg (assignable C))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression N) != (singleExpression (literal null))) && (singleExpression (singleExpression E) != (singleExpression (literal null)))) && (singleExpression (singleExpression (singleExpression N) . (identifierName length)) > (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression E) . (identifierName length)) > (singleExpression (literal (numericLiteral 0)))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName n)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression N)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression E)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName d)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression D)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName p)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression P)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName q)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression Q)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dmp1)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression DP)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dmq1)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression DQ)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName coeff)) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression C)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) })) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression alert) (arguments ( (argument (singleExpression (literal "Invalid RSA private key"))) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function RSAGenerate ( (formalParameterList (formalParameterArg (assignable B)) , (formalParameterArg (assignable E))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable rng) = (singleExpression new (singleExpression (singleExpression SecureRandom) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable qs) = (singleExpression (singleExpression B) >> (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName e)) = (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression E)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ee) = (singleExpression new (singleExpression (singleExpression BigInteger) (arguments ( (argument (singleExpression E)) , (argument (singleExpression (literal (numericLiteral 16)))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( ; ; ) (statement (block { (statementList (statement (iterationStatement for ( ; ; ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName p)) = (singleExpression new (singleExpression (singleExpression BigInteger) (arguments ( (argument (singleExpression (singleExpression B) - (singleExpression qs))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression rng)) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName p)) . (identifierName subtract)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) . (identifierName gcd)) (arguments ( (argument (singleExpression ee)) ))) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) == (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName p)) . (identifierName isProbablePrime)) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) ))))) ) (statement (breakStatement break (eos ;)))))) })))) (statement (iterationStatement for ( ; ; ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName q)) = (singleExpression new (singleExpression (singleExpression BigInteger) (arguments ( (argument (singleExpression qs)) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression rng)) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName q)) . (identifierName subtract)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) . (identifierName gcd)) (arguments ( (argument (singleExpression ee)) ))) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) == (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName q)) . (identifierName isProbablePrime)) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) ))))) ) (statement (breakStatement break (eos ;)))))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName p)) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName q))) ))) <= (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable t) = (singleExpression (singleExpression this) . (identifierName p)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName p)) = (singleExpression (singleExpression this) . (identifierName q)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName q)) = (singleExpression t))) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable p1) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName p)) . (identifierName subtract)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable q1) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName q)) . (identifierName subtract)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable phi) = (singleExpression (singleExpression (singleExpression p1) . (identifierName multiply)) (arguments ( (argument (singleExpression q1)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression phi) . (identifierName gcd)) (arguments ( (argument (singleExpression ee)) ))) . (identifierName compareTo)) (arguments ( (argument (singleExpression (singleExpression BigInteger) . (identifierName ONE))) ))) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName n)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName p)) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName q))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName d)) = (singleExpression (singleExpression (singleExpression ee) . (identifierName modInverse)) (arguments ( (argument (singleExpression phi)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dmp1)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName d)) . (identifierName mod)) (arguments ( (argument (singleExpression p1)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName dmq1)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName d)) . (identifierName mod)) (arguments ( (argument (singleExpression q1)) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName coeff)) = (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName q)) . (identifierName modInverse)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName p))) ))))) (eos ;))) (statement (breakStatement break (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (functionDeclaration function RSADoPrivate ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName p)) == (singleExpression (literal null))) || (singleExpression (singleExpression (singleExpression this) . (identifierName q)) == (singleExpression (literal null))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) . (identifierName modPow)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName d))) , (argument (singleExpression (singleExpression this) . (identifierName n))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xp) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName mod)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName p))) ))) . (identifierName modPow)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName dmp1))) , (argument (singleExpression (singleExpression this) . (identifierName p))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xq) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression x) . (identifierName mod)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName q))) ))) . (identifierName modPow)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName dmq1))) , (argument (singleExpression (singleExpression this) . (identifierName q))) ))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression xp) . (identifierName compareTo)) (arguments ( (argument (singleExpression xq)) ))) < (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression xp) = (singleExpression (singleExpression (singleExpression xp) . (identifierName add)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName p))) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression xp) . (identifierName subtract)) (arguments ( (argument (singleExpression xq)) ))) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName coeff))) ))) . (identifierName mod)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName p))) ))) . (identifierName multiply)) (arguments ( (argument (singleExpression (singleExpression this) . (identifierName q))) ))) . (identifierName add)) (arguments ( (argument (singleExpression xq)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function RSADecrypt ( (formalParameterList (formalParameterArg (assignable ctext))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (singleExpression parseBigInt) (arguments ( (argument (singleExpression ctext)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (singleExpression (singleExpression this) . (identifierName doPrivate)) (arguments ( (argument (singleExpression c)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression m) == (singleExpression (literal null)))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression pkcs1unpad2) (arguments ( (argument (singleExpression m)) , (argument (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName n)) . (identifierName bitLength)) (arguments ( ))) + (singleExpression (literal (numericLiteral 7))))) )) >> (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName doPrivate)) = (singleExpression RSADoPrivate))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName setPrivate)) = (singleExpression RSASetPrivate))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName setPrivateEx)) = (singleExpression RSASetPrivateEx))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName generate)) = (singleExpression RSAGenerate))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression RSAKey) . (identifierName prototype)) . (identifierName decrypt)) = (singleExpression RSADecrypt))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nValue) = (singleExpression (literal "a5261939975948bb7a58dffe5ff54e65f0498f9175f5a09288810b8975871e99af3b5dd94057b0fc07535f5f97444504fa35169d461d0d30cf0192e307727c065168c788771c561a9400fb49175e9e6aa4e23fe11af69e9412dd23b0cb6684c4c2429bce139e848ab26d0829073351f4acd36074eafd036a5eb83359d2a698d3")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable eValue) = (singleExpression (literal "10001")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dValue) = (singleExpression (literal "8e9912f6d3645894e8d38cb58c0db81ff516cf4c7e5a14c7f1eddb1459d2cded4d8d293fc97aee6aefb861859c8b6a3d1dfe710463e1f9ddc72048c09751971c4a580aa51eb523357a3cc48d31cfad1d4a165066ed92d4748fb6571211da5cb14bc11b6e2df7c1a559e6d5ac1cd5c94703a22891464fba23d0d965086277a161")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable pValue) = (singleExpression (literal "d090ce58a92c75233a6486cb0a9209bf3583b64f540c76f5294bb97d285eed33aec220bde14b2417951178ac152ceab6da7090905b478195498b352048f15e7d")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable qValue) = (singleExpression (literal "cab575dc652bb66df15a0359609d51d1db184750c00c6698b90ef3465c99655103edbf0d54c56aec0ce3c4d22592338092a126a0cc49f65a4a30d222b411e58f")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dmp1Value) = (singleExpression (literal "1a24bca8e273df2f0e47c199bbf678604e7df7215480c77c8db39f49b000ce2cf7500038acfff5433b7d582a01f1826e6f4d42e1c57f5e1fef7b12aabc59fd25")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dmq1Value) = (singleExpression (literal "3d06982efbbe47339e1f6d36b1216b8a741d410b0c662f54f7118b27b9a4ec9d914337eb39841d8666f3034408cf94f5b62f11c402fc994fe15a05493150d9fd")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable coeffValue) = (singleExpression (literal "3a3e731acd8960b7ff9eb81a7ff93bd1cfa74cbd56987db58b4594fb09c09084db1734c8143f98b602b981aaa9243ca28deb69b5b280ee8dcee0fd2625e53250")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression setupEngine) (arguments ( (argument (singleExpression am3)) , (argument (singleExpression (literal (numericLiteral 28)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable TEXT) = (singleExpression (singleExpression (literal "The quick brown fox jumped over the extremely lazy frog! ")) + (singleExpression (literal "Now is the time for all good men to come to the party."))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable encrypted))) (eos ;)))) (sourceElement (statement (functionDeclaration function encrypt ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable RSA) = (singleExpression new (singleExpression (singleExpression RSAKey) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RSA) . (identifierName setPublic)) (arguments ( (argument (singleExpression nValue)) , (argument (singleExpression eValue)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RSA) . (identifierName setPrivateEx)) (arguments ( (argument (singleExpression nValue)) , (argument (singleExpression eValue)) , (argument (singleExpression dValue)) , (argument (singleExpression pValue)) , (argument (singleExpression qValue)) , (argument (singleExpression dmp1Value)) , (argument (singleExpression dmq1Value)) , (argument (singleExpression coeffValue)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression encrypted) = (singleExpression (singleExpression (singleExpression RSA) . (identifierName encrypt)) (arguments ( (argument (singleExpression TEXT)) ))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function decrypt ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable RSA) = (singleExpression new (singleExpression (singleExpression RSAKey) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RSA) . (identifierName setPublic)) (arguments ( (argument (singleExpression nValue)) , (argument (singleExpression eValue)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RSA) . (identifierName setPrivateEx)) (arguments ( (argument (singleExpression nValue)) , (argument (singleExpression eValue)) , (argument (singleExpression dValue)) , (argument (singleExpression pValue)) , (argument (singleExpression qValue)) , (argument (singleExpression dmp1Value)) , (argument (singleExpression dmq1Value)) , (argument (singleExpression coeffValue)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable decrypted) = (singleExpression (singleExpression (singleExpression RSA) . (identifierName decrypt)) (arguments ( (argument (singleExpression encrypted)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression decrypted) != (singleExpression TEXT))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Crypto operation failed"))) ))))) (eos ;)))) }))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 8))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression encrypt) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression decrypt) (arguments ( )))) (eos ;)))) })))))) <EOF>)