(program (sourceElements (sourceElement (statement (functionDeclaration function runNearStackLimit ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function t ( ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression t) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression String) (arguments ( (argument (singleExpression e)) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))))))) }))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression t) (arguments ( )))) eos))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression repeat) (arguments ( (argument (singleExpression func)) , (argument (singleExpression count)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression count))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { }))))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Error)) , (arrayElement (singleExpression String)) , (arrayElement (singleExpression RegExp)) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression class cls (classTail { })))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) item))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression array)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runNearStackLimit) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression repeat) (arguments ( (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;)))))) })))) )))) eos))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression repeat) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))))) }))) , (argument (singleExpression (objectLiteral { }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runNearStackLimit) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression func) (arguments ( ))))) (eos ;)))))) })))) )))) eos))))) }))) , (argument (singleExpression (literal (numericLiteral 5)))) )))) (eos ;))))) <EOF>)