(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCachedGetByVal) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (literal 'a'))) ]) = (singleExpression (literal (numericLiteral 42))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loopCount) = (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression interationToChange) = (singleExpression (literal (numericLiteral 90000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedResult) = (singleExpression (singleExpression (literal (numericLiteral 42))) * (singleExpression interationToChange)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exceptions) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedExceptions) = (singleExpression (singleExpression loopCount) - (singleExpression interationToChange)))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression loopCount))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) == (singleExpression interationToChange))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal "a"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "error"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 100)))) (eos ;)))))) }))) }))) )))) (eos ;)))) })))) (statement (iterationStatement for ( (singleExpression let) v in)) (statement (expressionStatement (expressionSequence (singleExpression o)) (eos )))) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName toString)) (arguments ( )))) ]))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) == (singleExpression (literal "error")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exceptions) ++)) (eos ;))) else (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Got wrong exception \"")) + (singleExpression e)) + (singleExpression (literal "\"")))) (eos ;)))))) }))))) }))) })) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression expectedResult))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected a result of ")) + (singleExpression expectedResult)) + (singleExpression (literal ", but got "))) + (singleExpression result))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exceptions) != (singleExpression expectedExceptions))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "1 Expected ")) + (singleExpression expectedExceptions)) + (singleExpression (literal " exceptions, but got "))) + (singleExpression exceptions))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression testCachedGetByVal)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCachedPutByVal) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (literal 'a'))) ]) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression loopCount) = (singleExpression (literal (numericLiteral 100000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression iterationToChange) = (singleExpression (literal (numericLiteral 90000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exceptions) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectedExceptions) = (singleExpression (singleExpression loopCount) - (singleExpression iterationToChange)))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression loopCount))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) == (singleExpression iterationToChange))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression o) . (identifierName a)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal "_a"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal false))) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression - (singleExpression (literal (numericLiteral 1))))) }))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal "a"))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName enumerable)) : (singleExpression (literal true))) , (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression (literal "error"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName _a)) = (singleExpression v))) (eos ;)))))) }))) }))) )))) (eos ;)))) })))) (statement (iterationStatement for ( (singleExpression let) v in)) (statement (expressionStatement (expressionSequence (singleExpression o)) (eos )))) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (singleExpression (singleExpression v) . (identifierName toString)) (arguments ( )))) ]) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) == (singleExpression (literal "error")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exceptions) ++)) (eos ;))) else (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Got wrong exception \"")) + (singleExpression e)) + (singleExpression (literal "\"")))) (eos ;)))))) }))))) }))) })) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression iterationToChange))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected a result of ")) + (singleExpression result)) + (singleExpression (literal ", but got "))) + (singleExpression (singleExpression o) . (identifierName a)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName _a)) != (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Expected o._b to -1, but it is ")) + (singleExpression (singleExpression o) . (identifierName _a)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exceptions) != (singleExpression expectedExceptions))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected ")) + (singleExpression expectedExceptions)) + (singleExpression (literal " exceptions, but got "))) + (singleExpression exceptions))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression testCachedPutByVal)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCachedGetByVal) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCachedPutByVal) (arguments ( )))) (eos ;))))) <EOF>)