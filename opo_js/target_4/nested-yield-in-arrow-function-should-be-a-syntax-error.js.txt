(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal "\nfor (let a of (function*() { \n       for (var b of (function*() { \n               for (var c of (function*() { \n                       for (var d of (function*() {\n                               for (var e of (function*() { \n                                       for (var f of (function*() {\n                                               for (var g of (x = (yield * 2)) => (1)) {\n                                               }\n                                       })()) {\n                                       }\n                               })()) {\n                               }\n                       })()) {\n                       }\n               })()) {\n               }\n       })()) {\n       }\n})()) {\n}\n"))) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression passed) = (singleExpression (literal true)))) (eos ;)))))) })) (finallyProduction finally (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression passed) !== (singleExpression (literal true)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Test did not throw a Syntax Error as expected"))) ))))) (eos ;)))))) })))))) <EOF>)