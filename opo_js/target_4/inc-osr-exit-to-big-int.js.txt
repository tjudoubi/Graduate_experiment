(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName sameValue)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable e)) , (formalParameterArg (assignable m))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) !== (singleExpression e))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))))))) }))) })))) eos))) (sourceElement (statement (functionDeclaration function postInc ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) ++)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression postInc)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function preInc ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ++ (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression preInc)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function postDec ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) --)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression postDec)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function preDec ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression -- (singleExpression x))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression preDec)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression postInc) (arguments ( (argument (singleExpression (literal (numericLiteral 3012)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (numericLiteral 3012)))) , (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 3012))) + (singleExpression (literal "++ = "))) + (singleExpression r))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression preInc) (arguments ( (argument (singleExpression (literal (numericLiteral 3012)))) ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (numericLiteral 3013)))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "++")) + (singleExpression (literal (numericLiteral 3012)))) + (singleExpression (literal " = "))) + (singleExpression r))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression postDec) (arguments ( (argument (singleExpression (literal (numericLiteral 3012)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (numericLiteral 3012)))) , (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 3012))) + (singleExpression (literal "-- = "))) + (singleExpression r))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression preDec) (arguments ( (argument (singleExpression (literal (numericLiteral 3012)))) ))))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (numericLiteral 3011)))) , (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "--")) + (singleExpression (literal (numericLiteral 3012)))) + (singleExpression (literal " = "))) + (singleExpression r))) )))) (eos ;)))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable r) = (singleExpression (singleExpression postInc) (arguments ( (argument (singleExpression (literal (bigintLiteral 3n)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (bigintLiteral 3n)))) , (argument (singleExpression (singleExpression (singleExpression (literal (bigintLiteral 3n))) + (singleExpression (literal "++ = "))) + (singleExpression r))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression preInc) (arguments ( (argument (singleExpression (literal (bigintLiteral 12345678901234567890n)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (bigintLiteral 12345678901234567891n)))) , (argument (singleExpression (singleExpression (literal "++")) + (singleExpression (literal (bigintLiteral 12345678901234567890n))))) , (argument (singleExpression (literal " = "))) , (argument (singleExpression r)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName valueOf)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression count) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (bigintLiteral 42n)))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression postDec) (arguments ( (argument (singleExpression o)) ))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (bigintLiteral 42n)))) , (argument (singleExpression (singleExpression (literal "{valueOf: () => 42n} -- = ")) + (singleExpression r))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression count)) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (singleExpression (literal "execution count of valueOf on o = ")) + (singleExpression count))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression r) = (singleExpression (singleExpression preDec) (arguments ( (argument (singleExpression (literal (bigintLiteral 123456789000n)))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression r)) , (argument (singleExpression (literal (bigintLiteral 123456788999n)))) , (argument (singleExpression (singleExpression (literal "--123456789000n = ")) + (singleExpression r))) )))) (eos ;))))) <EOF>)