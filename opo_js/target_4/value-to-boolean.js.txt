(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ""))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (singleExpression (literal "")) + (singleExpression (literal ""))) + (singleExpression (literal "")))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "foo"))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (literal "foo")) + (singleExpression (literal "bar")))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression Symbol) (arguments ( )))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression + (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression NaN)) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10)))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10.2012)))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (anoymousFunction function ( ) { functionBody }))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "foo"))) ))))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal ""))) ))))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression String))) , (arrayElement (singleExpression (literal true)))) ])))) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function test1 ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression ! (singleExpression c)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test2 ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression c)) ) (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test3 ( (formalParameterList (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression c))) ) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test3)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testFunctions) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression test1)) , (arrayElement (singleExpression test2)) , (arrayElement (singleExpression test3))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) testFunction))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression testFunctions)) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression item) = (singleExpression (singleExpression tests) [ (expressionSequence (singleExpression (singleExpression i) % (singleExpression (singleExpression tests) . (identifierName length)))) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression (singleExpression item) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) ))) === (singleExpression (singleExpression item) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) )))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression masquerader) = (singleExpression (singleExpression makeMasquerader) (arguments ( ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) testFunction))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression testFunctions)) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression testFunction) (arguments ( (argument (singleExpression masquerader)) ))) === (singleExpression (literal false)))) )))) (eos ;)))) }))) }))) })))) <EOF>)