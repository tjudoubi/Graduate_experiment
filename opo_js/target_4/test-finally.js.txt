(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression this) . (identifierName window))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) = (singleExpression (singleExpression console) . (identifierName log)))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable steps))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable returned))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable thrown))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testLineNumber))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression NothingReturned) = (singleExpression (literal "NothingReturned")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression NothingThrown) = (singleExpression (literal "NothingThrown")))) (eos ;)))) (sourceElement (statement (functionDeclaration function assertResults ( (formalParameterList (formalParameterArg (assignable expectedSteps)) , (formalParameterArg (assignable expectedReturned)) , (formalParameterArg (assignable expectedThrown))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression stepsMismatch) = (singleExpression ( (expressionSequence (singleExpression (singleExpression steps) != (singleExpression expectedSteps))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returnedMismatch) = (singleExpression ( (expressionSequence (singleExpression (singleExpression returned) != (singleExpression expectedReturned))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thrownMismatch) = (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression thrown) != (singleExpression expectedThrown)) && (singleExpression ! (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal "")) + (singleExpression thrown))) )) . (identifierName startsWith)) (arguments ( (argument (singleExpression (singleExpression (literal "")) + (singleExpression expectedThrown))) )))))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression stepsMismatch) || (singleExpression returnedMismatch)) || (singleExpression thrownMismatch))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "FAILED Test @ line ")) + (singleExpression testLineNumber)) + (singleExpression (literal ":")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "   Actual:   steps: ")) + (singleExpression steps)) + (singleExpression (literal ", returned: "))) + (singleExpression returned)) + (singleExpression (literal ", thrown: '"))) + (singleExpression thrown)) + (singleExpression (literal "'")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "   Expected: steps: ")) + (singleExpression expectedSteps)) + (singleExpression (literal ", returned: "))) + (singleExpression expectedReturned)) + (singleExpression (literal ", thrown: '"))) + (singleExpression expectedThrown)) + (singleExpression (literal "'")))) )))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression stepsMismatch)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAILED Test @ line ")) + (singleExpression testLineNumber)) + (singleExpression (literal ": steps do not match: expected ='"))) + (singleExpression expectedSteps)) + (singleExpression (literal "' actual='"))) + (singleExpression steps)) + (singleExpression (literal "'")))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression returnedMismatch)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAILED Test @ line ")) + (singleExpression testLineNumber)) + (singleExpression (literal ": returned value does not match: expected ='"))) + (singleExpression expectedReturned)) + (singleExpression (literal "' actual='"))) + (singleExpression returned)) + (singleExpression (literal "'")))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression thrownMismatch)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAILED Test @ line ")) + (singleExpression testLineNumber)) + (singleExpression (literal ": thrown value does does not match: expected ='"))) + (singleExpression expectedThrown)) + (singleExpression (literal "' actual='"))) + (singleExpression thrown)) + (singleExpression (literal "'")))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function resetResults ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression steps) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returned) = (singleExpression NothingReturned))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thrown) = (singleExpression NothingThrown))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function append ( (formalParameterList (formalParameterArg (assignable step))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression next) = (singleExpression (singleExpression steps) . (identifierName length)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression steps) [ (expressionSequence (singleExpression next)) ]) = (singleExpression step))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable expectedSteps)) , (formalParameterArg (assignable expectedReturned)) , (formalParameterArg (assignable expectedThrown))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLineNumber) = (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Error) (arguments ( ))) . (identifierName stack)) . (identifierName match)) (arguments ( (argument (singleExpression (literal /global code@.+\.js:([0-9]+)/))) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resetResults) (arguments ( )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression returned) = (singleExpression (singleExpression func) (arguments ( ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thrown) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertResults) (arguments ( (argument (singleExpression expectedSteps)) , (argument (singleExpression expectedReturned)) , (argument (singleExpression expectedThrown)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable b) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c2"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f2"))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (literal "t2,f1,f1,f2"))) , (argument (singleExpression undefined)) , (argument (singleExpression NothingThrown)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t1"))) )))) (eos ;)))) }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable b) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c2"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f2"))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (literal "t2,t1,f1,t1,f1,f2"))) , (argument (singleExpression undefined)) , (argument (singleExpression NothingThrown)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t1"))) )))) (eos ;))) (statement (breakStatement break (eos ;)))) }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable b) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c2"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f2"))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (literal "t2,t1,f1,f2"))) , (argument (singleExpression undefined)) , (argument (singleExpression NothingThrown)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t1"))) )))) (eos ;))) (statement (continueStatement continue (eos ;)))) }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable b) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c2"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f2"))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (literal "t2,t1,f1,t1,f1,f2"))) , (argument (singleExpression undefined)) , (argument (singleExpression NothingThrown)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t1"))) )))) (eos ;))) (statement (returnStatement return (eos ;)))) }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable b) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c2"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f2"))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (literal "t2,t1,f1,f2"))) , (argument (singleExpression undefined)) , (argument (singleExpression NothingThrown)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 2))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t1"))) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression (objectLiteral { }))) (eos ;)))) }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) }))))) }) (catchProduction catch ( (assignable b) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c2"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f2"))) )))) (eos ;)))) }))))))) })))) , (argument (singleExpression (literal "t2,t1,c1,f1,t1,c1,f1,f2"))) , (argument (singleExpression undefined)) , (argument (singleExpression NothingThrown)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ])))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t2"))) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) x)) (statement (expressionStatement (expressionSequence (singleExpression of)) eos)) (statement (expressionStatement (expressionSequence (singleExpression arr)) eos))))))))) <missing '}'>)))) ))) eos))) (sourceElement (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "t1"))) )))) (eos ;)))) }) (catchProduction catch ( (assignable a) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "c1"))) )))) (eos ;)))) })) (finallyProduction finally (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression append) (arguments ( (argument (singleExpression (literal "f1"))) )))) (eos ;)))) }))))) })))) } catch ( b ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } } , "t2,t1,f1,t1,f1,f2" , undefined , NothingThrown ) ; test ( ( ) => { let arr = [ 1 , 2 ] ; try { append ( "t2" ) ; for ( let x of arr ) { try { append ( "t1" ) ; break ; } catch ( a ) { append ( "c1" ) ; } finally { append ( "f1" ) ; } } } catch ( b ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } } , "t2,t1,f1,f2" , undefined , NothingThrown ) ; test ( ( ) => { let arr = [ 1 , 2 ] ; try { append ( "t2" ) ; for ( let x of arr ) { try { append ( "t1" ) ; continue ; } catch ( a ) { append ( "c1" ) ; } finally { append ( "f1" ) ; } } } catch ( b ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } } , "t2,t1,f1,t1,f1,f2" , undefined , NothingThrown ) ; test ( ( ) => { let arr = [ 1 , 2 ] ; try { append ( "t2" ) ; for ( let x of arr ) { try { append ( "t1" ) ; return ; } catch ( a ) { append ( "c1" ) ; } finally { append ( "f1" ) ; } } } catch ( b ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } } , "t2,t1,f1,f2" , undefined , NothingThrown ) ; test ( ( ) => { let arr = [ 1 , 2 ] ; try { append ( "t2" ) ; for ( let x of arr ) { try { append ( "t1" ) ; throw { } ; } catch ( a ) { append ( "c1" ) ; } finally { append ( "f1" ) ; } } } catch ( b ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } } , "t2,t1,c1,f1,t1,c1,f1,f2" , undefined , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; } finally { append ( "c" ) ; } append ( "d" ) ; return 400 ; } , "a,b,c,d" , 400 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; return 100 ; try { append ( "b" ) ; return 200 ; try { append ( "c" ) ; return 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; return 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a" , 100 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 200 ; try { append ( "c" ) ; return 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; return 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,f" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; return 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; return 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,f" , 300 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; return 300 ; } finally { append ( "d" ) ; return 400 ; } append ( "e" ) ; return 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,f" , 400 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; return 300 ; } finally { append ( "d" ) ; return 400 ; } append ( "e" ) ; return 500 ; } finally { append ( "f" ) ; return 600 ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,f" , 600 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; } finally { append ( "d" ) ; } append ( "e" ) ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,e,f,g" , 700 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; throw 100 ; try { append ( "b" ) ; throw 200 ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; throw 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; throw 700 ; } , "a" , NothingReturned , 100 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 200 ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; throw 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; throw 700 ; } , "a,b,f" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; throw 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; throw 700 ; } , "a,b,c,d,f" , NothingReturned , 300 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; throw 400 ; } append ( "e" ) ; throw 500 ; } finally { append ( "f" ) ; } append ( "g" ) ; throw 700 ; } , "a,b,c,d,f" , NothingReturned , 400 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; throw 400 ; } append ( "e" ) ; throw 500 ; } finally { append ( "f" ) ; throw 600 ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,f" , NothingReturned , 600 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; } finally { append ( "d" ) ; } append ( "e" ) ; } finally { append ( "f" ) ; } append ( "g" ) ; throw 700 ; } , "a,b,c,d,e,f,g" , NothingReturned , 700 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 200 ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; throw 500 ; } catch ( e ) { append ( "z" ) ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,z,f,g" , 700 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 200 ; try { append ( "c" ) ; throw 300 ; } finally { append ( "d" ) ; } append ( "e" ) ; throw 500 ; } catch ( e ) { append ( "z" ) ; throw 5000 ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,z,f" , NothingReturned , 5000 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } catch ( e ) { append ( "y" ) ; } finally { append ( "d" ) ; } append ( "e" ) ; } catch ( e ) { append ( "z" ) ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,f,g" , 700 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } catch ( e ) { append ( "y" ) ; throw 3000 ; } finally { append ( "d" ) ; } append ( "e" ) ; } catch ( e ) { append ( "z" ) ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,z,f,g" , 700 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } catch ( e ) { append ( "y" ) ; throw 3000 ; } finally { append ( "d" ) ; } append ( "e" ) ; } catch ( e ) { append ( "z" ) ; throw 5000 ; } finally { append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,z,f" , NothingReturned , 5000 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; try { append ( "c" ) ; throw 300 ; } catch ( e ) { append ( "y" ) ; throw 3000 ; } finally { append ( "d" ) ; } append ( "e" ) ; } catch ( e ) { append ( "z" ) ; throw 5000 ; } finally { append ( "f" ) ; throw 600 ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,z,f" , NothingReturned , 600 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; } append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,e,f" , NothingReturned , 100 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; } append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,d,e,f" , 100 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; label : try { append ( "b" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "x" ) ; break label ; } } finally { append ( "c" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; } append ( "f" ) ; } append ( "g" ) ; return 700 ; } , "a,b,x,c,d,e,f,g" , 700 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , NothingReturned , 100 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , 100 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; throw 42 ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; throw 42 ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; throw 42 ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , NothingReturned , 100 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; throw 42 ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; throw 42 ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; throw 42 ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , 100 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; return 42 ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; return 42 ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; return 42 ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , NothingReturned , 100 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; return 42 ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; return 42 ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; return 42 ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , 100 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; continue ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; continue ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; throw 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; continue ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , NothingReturned , 100 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; continue ; } finally { append ( "e" ) ; throw 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , NothingReturned , 200 ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; continue ; } finally { append ( "e" ) ; return 200 ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e" , 200 , NothingThrown ) ; test ( ( ) => { append ( "a" ) ; try { append ( "b" ) ; return 100 ; } finally { append ( "c" ) ; for ( var j = 0 ; j < 1 ; j ++ ) { append ( "y" ) ; try { append ( "d" ) ; continue ; } finally { append ( "e" ) ; continue ; } append ( "f" ) ; } append ( "z" ) ; } append ( "g" ) ; return 700 ; } , "a,b,c,y,d,e,z" , 100 , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } for ( var element of arr ) { append ( element ) ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,n,2,n,x" , 200 , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) break ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r,x" , 200 , NothingThrown ) ; test ( ( ) => { class Iterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; throw 300 ; } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new Iterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) break ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , NothingReturned , 300 ) ; test ( ( ) => { class Iterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new Iterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) break ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , NothingReturned , 'TypeError' ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) return 100 ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , 100 , NothingThrown ) ; test ( ( ) => { class Iterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; throw 300 ; } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new Iterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) return 100 ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , NothingReturned , 300 ) ; test ( ( ) => { class Iterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new Iterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) return 100 ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , NothingReturned , 'TypeError' ) ; test ( ( ) => { class Iterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new Iterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) throw 100 ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , NothingReturned , 100 ) ; test ( ( ) => { class Iterator { constructor ( ) { append ( "c" ) ; this . i = 0 ; } next ( ) { append ( "n" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "r" ) ; throw 300 ; } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new Iterator ( ) ; } for ( var element of arr ) { append ( element ) ; if ( element == 1 ) throw 100 ; } append ( "x" ) ; return 200 ; } , "c,n,0,n,1,r" , NothingReturned , 100 ) ; test ( ( ) => { try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } append ( "f1b" ) ; } } , "t1a,f1a,t2,f2,f1b" , "r1" , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } for ( var element of arr ) { append ( element ) ; try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } append ( "f1b" ) ; } } append ( "x" ) ; } , "ci,ni,0,t1a,f1a,t2,f2,f1b,ri" , "r1" , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } for ( var element of arr ) { append ( element ) ; try { append ( "t1a" ) ; break ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } append ( "f1b" ) ; } } append ( "x" ) ; } , "ci,ni,0,t1a,f1a,t2,f2,f1b,ri,x" , undefined , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } try { append ( "t1a" ) ; for ( var element of arr ) { append ( element ) ; return "r1" ; } append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } append ( "f1b" ) ; } append ( "x" ) ; } , "t1a,ci,ni,0,ri,f1a,t2,f2,f1b" , "r1" , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 3 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } try { append ( "t1a" ) ; for ( var element of arr ) { append ( element ) ; break ; } append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } append ( "f1b" ) ; } append ( "x" ) ; } , "t1a,ci,ni,0,ri,t1b,f1a,t2,f2,f1b,x" , undefined , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 2 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; for ( var element of arr ) { append ( element ) ; } append ( "f1b" ) ; } append ( "x" ) ; } , "t1a,f1a,ci,ni,0,ni,1,ni,f1b" , "r1" , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 2 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; for ( var element of arr ) { append ( element ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } } append ( "f1b" ) ; } append ( "x" ) ; } , "t1a,f1a,ci,ni,0,t2,f2,ni,1,t2,f2,ni,f1b" , "r1" , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 2 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; for ( var element of arr ) { append ( element ) ; break ; } append ( "f1b" ) ; } append ( "x" ) ; } , "t1a,f1a,ci,ni,0,ri,f1b" , "r1" , NothingThrown ) ; test ( ( ) => { class TestIterator { constructor ( ) { append ( "ci" ) ; this . i = 0 ; } next ( ) { append ( "ni" ) ; let done = ( this . i == 2 ) ; return { done , value : this . i ++ } ; } return ( ) { append ( "ri" ) ; return { } } } var arr = [ ] ; arr [ Symbol . iterator ] = function ( ) { return new TestIterator ( ) ; } try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; for ( var element of arr ) { append ( element ) ; try { append ( "t2" ) ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } break ; } append ( "f1b" ) ; } append ( "x" ) ; } , "t1a,f1a,ci,ni,0,t2,f2,ri,f1b" , "r1" , NothingThrown ) ; test ( ( ) => { try { append ( "t1a" ) ; return "r1" ; append ( "t1b" ) ; } catch ( e ) { append ( "c1" ) ; } finally { append ( "f1a" ) ; try { append ( "t2" ) ; throw "t2" ; } catch ( e ) { append ( "c2" ) ; } finally { append ( "f2" ) ; } append ( "f1b" ) ; } } , "t1a,f1a,t2,c2,f2,f1b" , "r1" , NothingThrown ) ; if ( this . window ) print ( "PASSED" ) ;)