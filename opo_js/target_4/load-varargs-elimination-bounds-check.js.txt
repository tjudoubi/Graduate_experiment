(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression arguments) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName apply)) (arguments ( (argument (singleExpression this)) , (argument (singleExpression arguments)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression p)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal true))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;))))))) <EOF>)