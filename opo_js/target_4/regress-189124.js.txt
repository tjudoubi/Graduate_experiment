(program (sourceElements (sourceElement (statement (functionDeclaration function makeTmp ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tmp) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName a)) : (singleExpression (literal (numericLiteral 1)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName __proto__)) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression tmp)) (eos ;)))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression tmp)) , (argument (singleExpression obj)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) k in)) (statement (expressionStatement (expressionSequence (singleExpression tmp)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName __proto__)) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression obj) . (identifierName __proto__)) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression obj) [ (expressionSequence (singleExpression k)) ]))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression makeTmp) (arguments ( )))) , (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression memory) = (singleExpression new (singleExpression (singleExpression Uint32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression memory) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 0x1234))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fooResult) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression makeTmp) (arguments ( )))) , (argument (singleExpression memory)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression (singleExpression $vm) . (identifierName value)) (arguments ( (argument (singleExpression fooResult)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal "Undefined")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAIL"))) (eos ;))))))) <EOF>)