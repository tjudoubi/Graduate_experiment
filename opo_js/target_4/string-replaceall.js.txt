(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `expected ${expected} but got ${actual}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowTypeError ( (formalParameterList (formalParameterArg (assignable func))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression TypeError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected TypeError!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName replaceAll)) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal 'def'))) , (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName replaceAll)) . (identifierName call)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal 'def'))) , (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal /def/))) , (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal 'def'))) ))))) , (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTypeError) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName match)) ]) ( ) { functionBody }) , (propertyAssignment (propertyName (identifierName toString)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal 'def')))))) }))) , (argument (singleExpression (literal 'xyz'))) )))) (eos ;)))))) })))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal 'def'))) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'abcxyzabcxyzabc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal /def/g))) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'abcxyzabcxyzabc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal 'def'))) , (argument (singleExpression (literal 'g'))) ))))) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'abcxyzabcxyzabc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName match)) ]) ( ) { functionBody }) , (propertyAssignment (propertyName (identifierName toString)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal 'def')))))) , (propertyAssignment (propertyName (identifierName flags)) : (singleExpression (literal 'g'))) }))) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'abcxyzabcxyzabc'))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable search) = (singleExpression (literal /def/g)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression search) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName replace))) ]) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression search)) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'abcdefabcdefabc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression search) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName replace))) ]) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (literal 'q'))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression search)) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'q'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression search) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName replace))) ]) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression RegExp) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName replace))) ]) . (identifierName bind)) (arguments ( (argument (singleExpression search)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abcdefabcdefabc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression search)) , (argument (singleExpression (literal 'xyz'))) )))) , (argument (singleExpression (literal 'abcxyzabcxyzabc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal ''))) , (argument (singleExpression (literal 'z'))) )))) , (argument (singleExpression (literal 'zazbzcz'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal '')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal ''))) , (argument (singleExpression (literal 'z'))) )))) , (argument (singleExpression (literal 'z'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'abc')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal ''))) , (argument (singleExpression (literal ''))) )))) , (argument (singleExpression (literal 'abc'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal '')) . (identifierName replaceAll)) (arguments ( (argument (singleExpression (literal ''))) , (argument (singleExpression (literal ''))) )))) , (argument (singleExpression (literal ''))) )))) (eos ;))))) <EOF>)