(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable typedArrays) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Int8Array)) , (arrayElement (singleExpression Uint8Array)) , (arrayElement (singleExpression Uint8ClampedArray)) , (arrayElement (singleExpression Int16Array)) , (arrayElement (singleExpression Uint16Array)) , (arrayElement (singleExpression Int32Array)) , (arrayElement (singleExpression Uint32Array)) , (arrayElement (singleExpression Float32Array)) , (arrayElement (singleExpression Float64Array))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable subclasses) = (singleExpression (singleExpression (singleExpression typedArrays) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters constructor) => (arrowFunctionBody (singleExpression class (classTail extends (singleExpression constructor) { })))))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function checkSubclass ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable inst) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression inst) [ (expressionSequence (singleExpression (literal (numericLiteral 11)))) ]) = (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression inst) instanceof (singleExpression constructor)) && (singleExpression (singleExpression inst) instanceof (singleExpression (singleExpression constructor) . (identifierName __proto__)))) && (singleExpression (singleExpression (singleExpression inst) [ (expressionSequence (singleExpression (literal (numericLiteral 11)))) ]) === (singleExpression undefined)))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "subclass of ")) + (singleExpression (singleExpression constructor) . (identifierName __proto__))) + (singleExpression (literal " was incorrect")))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression subclasses) . (identifierName forEach)) (arguments ( (argument (singleExpression checkSubclass)) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))))) <EOF>)