(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable p))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression p)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression Math) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName sin)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName PI)) : (singleExpression (literal (numericLiteral 43)))) , (propertyAssignment (propertyName (identifierName abs)) : (singleExpression (singleExpression Math) . (identifierName abs))) })))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable n) = (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable m) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression i) == (singleExpression (singleExpression n) - (singleExpression m)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression (singleExpression (singleExpression Math) . (identifierName sin)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression (singleExpression result) - (singleExpression (singleExpression m) * (singleExpression (literal (numericLiteral 42)))))) ))) > (singleExpression (literal (numericLiteral 1e-8))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;)))))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)