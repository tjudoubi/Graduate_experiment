(program (sourceElements (sourceElement (statement (functionDeclaration function assertEq ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "values not the same: ")) + (singleExpression a)) + (singleExpression (literal " and "))) + (singleExpression b))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function withArrayArgInt32 ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEq) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName indexingMode)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal "CopyOnWriteArrayWithInt32"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression withArrayArgInt32)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function withArrayLiteralInt32 ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEq) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName indexingMode)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal "CopyOnWriteArrayWithInt32"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression withArrayLiteralInt32)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function withArrayArgDouble ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEq) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName indexingMode)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal "CopyOnWriteArrayWithDouble"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression withArrayArgDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function withArrayLiteralDouble ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1.3145)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEq) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName indexingMode)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal "CopyOnWriteArrayWithDouble"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression withArrayLiteralDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function withArrayArgContiguous ( (formalParameterList (formalParameterArg (assignable i)) , (formalParameterArg (assignable array))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEq) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName indexingMode)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal "CopyOnWriteArrayWithContiguous"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression withArrayArgContiguous)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function withArrayLiteralContiguous ( (formalParameterList (formalParameterArg (assignable i))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal "string"))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression array) [ (expressionSequence (singleExpression i)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertEq) (arguments ( (argument (singleExpression (singleExpression (singleExpression $vm) . (identifierName indexingMode)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal "CopyOnWriteArrayWithContiguous"))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression withArrayLiteralContiguous)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression withArrayArgInt32) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression withArrayArgDouble) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1.3145)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression withArrayArgContiguous) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal "string"))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression withArrayLiteralInt32) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression withArrayLiteralDouble) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression withArrayLiteralContiguous) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;))))) <EOF>)