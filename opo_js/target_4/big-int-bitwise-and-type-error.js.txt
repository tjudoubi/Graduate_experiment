(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression message)) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function assertThrowTypeError ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression n) = (singleExpression (singleExpression a) & (singleExpression b)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (singleExpression message) + (singleExpression (literal ": Should throw TypeError, but executed without exception")))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) , (argument (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ": expected TypeError, got: "))) + (singleExpression e))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (literal "foo"))) , (argument (singleExpression (literal "BigInt & String"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "bar"))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "String & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "foo"))) )))) , (argument (singleExpression (literal "BigInt & Symbol"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "bar"))) )))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Symbol & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (literal (numericLiteral 3320)))) , (argument (singleExpression (literal "BigInt & Int32"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (numericLiteral 33256)))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Int32 & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (literal (numericLiteral 0.543)))) , (argument (singleExpression (literal "BigInt & Double"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (numericLiteral 230.19293)))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Double & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression NaN)) , (argument (singleExpression (literal "BigInt & NaN"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "NaN & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression NaN)) , (argument (singleExpression (literal "BigInt & NaN"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "NaN & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression + (singleExpression Infinity))) , (argument (singleExpression (literal "BigInt & NaN"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression + (singleExpression Infinity))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "NaN & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression - (singleExpression Infinity))) , (argument (singleExpression (literal "BigInt & -Infinity"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression - (singleExpression Infinity))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "-Infinity & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal "BigInt & null"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "null & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression undefined)) , (argument (singleExpression (literal "BigInt & undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "undefined & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "BigInt & true"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "true & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "BigInt & false"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "false & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Foo"))) )))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.valueOf returning Symbol"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.valueOf returning Symbol & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 33256)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.valueOf returning Int32"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.valueOf returning Int32 & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0.453)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.valueOf returning Double"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.valueOf returning Double & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Foo"))) )))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.toString returning Symbol"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.toString returning Symbol & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 33256)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.toString returning Int32"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.toString returning Int32 & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0.453)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.toString returning Double"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.toString returning Double & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName toPrimitive)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Foo"))) )))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.@@toPrimitive returning Symbol"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.@@toPrimitive returning Symbol & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName toPrimitive)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 33256)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.@@toPrimitive returning Int32"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.@@toPrimitive returning Int32 & BigInt"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName toPrimitive)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0.453)))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal (bigintLiteral 30n)))) , (argument (singleExpression o)) , (argument (singleExpression (literal "BigInt & Object.@@toPrimitive returning Double"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (bigintLiteral 18757382984821n)))) , (argument (singleExpression (literal "Object.@@toPrimitive returning Double & BigInt"))) )))) (eos ;))))) <EOF>)