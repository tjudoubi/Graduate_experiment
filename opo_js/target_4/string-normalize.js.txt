(program (sourceElements (sourceElement (statement (functionDeclaration function unicode ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression value) . (identifierName split)) (arguments ( (argument (singleExpression (literal ''))) ))) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable val))) )) => (arrowFunctionBody (singleExpression (singleExpression (literal "\\u")) + (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal "0000")) + (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression val) . (identifierName charCodeAt)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))) . (identifierName toString)) (arguments ( (argument (singleExpression (literal (numericLiteral 16)))) ))))) )) . (identifierName slice)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 4))))) )))))))) ))) . (identifierName join)) (arguments ( (argument (singleExpression (literal ''))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: ${unicode(String(actual))}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal 'normalize'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName hasOwnProperty)) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression String) . (identifierName prototype))) , (argument (singleExpression (literal 'normalize'))) ))) . (identifierName writable))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression String) . (identifierName prototype))) , (argument (singleExpression (literal 'normalize'))) ))) . (identifierName enumerable))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (singleExpression String) . (identifierName prototype))) , (argument (singleExpression (literal 'normalize'))) ))) . (identifierName configurable))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal "Test")) . (identifierName normalize)) (arguments ( (argument (singleExpression (literal "Invalid"))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `RangeError: argument does not match any normalization form`))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function normalizeTest ( (formalParameterList (formalParameterArg (assignable original)) , (formalParameterArg (assignable defaultValue)) , (formalParameterArg (assignable nfc)) , (formalParameterArg (assignable nfd)) , (formalParameterArg (assignable nfkc)) , (formalParameterArg (assignable nfkd))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression original) . (identifierName normalize)) (arguments ( )))) , (argument (singleExpression defaultValue)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression original) . (identifierName normalize)) (arguments ( (argument (singleExpression (literal "NFC"))) )))) , (argument (singleExpression nfc)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression original) . (identifierName normalize)) (arguments ( (argument (singleExpression (literal "NFD"))) )))) , (argument (singleExpression nfd)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression original) . (identifierName normalize)) (arguments ( (argument (singleExpression (literal "NFKC"))) )))) , (argument (singleExpression nfkc)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression original) . (identifierName normalize)) (arguments ( (argument (singleExpression (literal "NFKD"))) )))) , (argument (singleExpression nfkd)) )))) (eos ;)))))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "Cocoa")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "\u3046\u3055\u304e")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u3046\u3055\u304d\u3099"))) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u3046\u3055\u304d\u3099"))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "\u00e9")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u0065\u0301"))) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u0065\u0301"))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "\u03d3")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u03d2\u0301"))) , (argument (singleExpression (literal "\u038e"))) , (argument (singleExpression (literal "\u03a5\u0301"))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "\u03d4")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u03d2\u0308"))) , (argument (singleExpression (literal "\u03ab"))) , (argument (singleExpression (literal "\u03a5\u0308"))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "\u1e9b")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u017f\u0307"))) , (argument (singleExpression (literal "\u1e61"))) , (argument (singleExpression (literal "\u0073\u0307"))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression text) = (singleExpression (literal "\u1e9b")))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression text)) , (argument (singleExpression (literal "\u017f\u0307"))) , (argument (singleExpression (literal "\u1e61"))) , (argument (singleExpression (literal "\u0073\u0307"))) )))) (eos ;)))) }))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression (literal "\ud834\udd60"))) , (argument (singleExpression (literal "\ud834\udd58\ud834\udd65\ud834\udd6e"))) , (argument (singleExpression (literal "\ud834\udd58\ud834\udd65\ud834\udd6e"))) , (argument (singleExpression (literal "\ud834\udd58\ud834\udd65\ud834\udd6e"))) , (argument (singleExpression (literal "\ud834\udd58\ud834\udd65\ud834\udd6e"))) , (argument (singleExpression (literal "\ud834\udd58\ud834\udd65\ud834\udd6e"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression (literal "\uFB2C"))) , (argument (singleExpression (literal "\u05e9\u05bc\u05c1"))) , (argument (singleExpression (literal "\u05e9\u05bc\u05c1"))) , (argument (singleExpression (literal "\u05e9\u05bc\u05c1"))) , (argument (singleExpression (literal "\u05e9\u05bc\u05c1"))) , (argument (singleExpression (literal "\u05e9\u05bc\u05c1"))) , (argument (singleExpression (literal "\u05e9\u05bc\u05c1"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression (literal "\u0390"))) , (argument (singleExpression (literal "\u0390"))) , (argument (singleExpression (literal "\u0390"))) , (argument (singleExpression (literal "\u03b9\u0308\u0301"))) , (argument (singleExpression (literal "\u0390"))) , (argument (singleExpression (literal "\u03b9\u0308\u0301"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression (literal "\u1F82"))) , (argument (singleExpression (literal "\u1f82"))) , (argument (singleExpression (literal "\u1f82"))) , (argument (singleExpression (literal "\u03b1\u0313\u0300\u0345"))) , (argument (singleExpression (literal "\u1f82"))) , (argument (singleExpression (literal "\u03b1\u0313\u0300\u0345"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression normalizeTest) (arguments ( (argument (singleExpression (literal "\uFDFA"))) , (argument (singleExpression (literal "\ufdfa"))) , (argument (singleExpression (literal "\ufdfa"))) , (argument (singleExpression (literal "\ufdfa"))) , (argument (singleExpression (literal "\u0635\u0644\u0649\u0020\u0627\u0644\u0644\u0647\u0020\u0639\u0644\u064a\u0647\u0020\u0648\u0633\u0644\u0645"))) , (argument (singleExpression (literal "\u0635\u0644\u0649\u0020\u0627\u0644\u0644\u0647\u0020\u0639\u0644\u064a\u0647\u0020\u0648\u0633\u0644\u0645"))) )))) (eos ;)))) })))) <EOF>)