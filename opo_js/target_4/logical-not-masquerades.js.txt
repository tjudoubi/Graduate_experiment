(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression ! (singleExpression value)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tests) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (literal (numericLiteral 0))) / (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression (literal (numericLiteral 0))) / (singleExpression - (singleExpression (literal (numericLiteral 1)))))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0.0)))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ""))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "f"))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "hello"))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ elementList ]))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (arrayElement (singleExpression (literal false)))) ])))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable j) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression j) < (singleExpression (singleExpression tests) . (identifierName length)))) ; (expressionSequence (singleExpression ++ (singleExpression j))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable input) = (singleExpression (singleExpression (singleExpression tests) [ (expressionSequence (singleExpression j)) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expected) = (singleExpression (singleExpression (singleExpression tests) [ (expressionSequence (singleExpression j)) ]) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression input)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result for ")) + (singleExpression input)) + (singleExpression (literal ": "))) + (singleExpression result))) (eos ;)))))) }))))) })))))) <EOF>)