(program (sourceElements (sourceElement (statement (functionDeclaration function testSyntax ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function testSyntaxError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Expected syntax error not thrown"))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: this.a } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: this['a'] } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: this[\"a\"] } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[this.a ] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[this['a']] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[this[0]] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[...this[0]] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[...[function f() {}.prop]] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[...[{prop: 1}.prop]] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[...[this[0], ...this[1]]] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: obj.a } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: obj['a'] } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: obj[\"a\"] } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: function() {}['prop'] } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "({ a: {prop: 1}.prop } = {})"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[obj.a ] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[obj['a']] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[obj[0]] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[function(){}.prop] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntax) (arguments ( (argument (singleExpression (literal "[{prop: 1}.prop] = []"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[...c = 1] = []"))) , (argument (singleExpression (literal "SyntaxError: Unexpected token '='. Expected a closing ']' following a rest element destructuring pattern."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[...c, d] = []"))) , (argument (singleExpression (literal "SyntaxError: Unexpected token ','. Expected a closing ']' following a rest element destructuring pattern."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[this] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[th\\u{69}s] = []"))) , (argument (singleExpression (literal "SyntaxError: Unexpected escaped characters in keyword token: 'th\\u{69}s'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[function() {}] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "['string'] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[123] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[true] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[tru\\u0065] = []"))) , (argument (singleExpression (literal "SyntaxError: Unexpected escaped characters in keyword token: 'tru\\u0065'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[false] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[f\\u0061lse] = []"))) , (argument (singleExpression (literal "SyntaxError: Unexpected escaped characters in keyword token: 'f\\u0061lse'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[null] = []"))) , (argument (singleExpression (literal "SyntaxError: Invalid destructuring assignment target."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "[n\\u{75}ll] = []"))) , (argument (singleExpression (literal "SyntaxError: Unexpected escaped characters in keyword token: 'n\\u{75}ll'"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ eval } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'eval' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ eval = 0 } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'eval' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ a: eval } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'eval' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ a: eval = 0 } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'eval' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ arguments } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'arguments' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ arguments = 0 } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'arguments' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ a: arguments } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'arguments' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ a: arguments = 0 } = {})"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'arguments' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ([ eval ] = [])"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'eval' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ([ eval = 0 ] = [])"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'eval' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ([ arguments ] = [])"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'arguments' in strict mode."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ([ arguments = 0 ] = [])"))) , (argument (singleExpression (literal "SyntaxError: Cannot modify 'arguments' in strict mode."))) )))) (eos ;))))) <EOF>)