(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable createBuiltin) = (singleExpression (singleExpression $vm) . (identifierName createBuiltin)))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression x))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isConstructor) = (singleExpression (singleExpression createBuiltin) (arguments ( (argument (singleExpression (literal "(function (c) { return @isConstructor(c); })"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression assert)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression class (classTail { }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression assert)) , (argument (singleExpression (objectLiteral { }))) ))))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression class (classTail { }))) , (argument (singleExpression (objectLiteral { }))) ))))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (objectLiteral { }))) ))))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression assert) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) )))) , (argument (singleExpression (objectLiteral { }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression class (classTail { }))) )) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) )))) , (argument (singleExpression (objectLiteral { }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression (anoymousFunction function ( ) { functionBody })) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) )))) , (argument (singleExpression (objectLiteral { }))) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Array)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression ArrayBuffer)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Boolean)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Date)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Error)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Function)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Map)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Number)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Object)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Promise)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Proxy)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression RegExp)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Set)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression String)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression WeakMap)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression WeakSet)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression undefined)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal null))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal true))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal false))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal (numericLiteral 1.1)))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression Date) . (identifierName now)) (arguments ( )))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression Date))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Infinity)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression NaN)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal ""))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal "test"))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (arrayLiteral [ elementList ]))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (objectLiteral { }))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (literal /regex/))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Math)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression JSON)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( )))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression Error))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (objectLiteral { }))) ))))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Array) . (identifierName prototype))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression Symbol)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName f))) ( ) { functionBody }) }))) , (argument (singleExpression (literal "f"))) ))) . (identifierName get))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (setter set (propertyName (identifierName f))) ( (formalParameterArg (assignable x)) ) { functionBody }) }))) , (argument (singleExpression (literal "f"))) ))) . (identifierName set))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { })))))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (anoymousFunction function * ( ) { functionBody }))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression isConstructor)) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Array) . (identifierName of))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Date) . (identifierName now))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName cos))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression JSON) . (identifierName stringify))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Promise) . (identifierName all))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression Symbol) . (identifierName (reservedWord (keyword for))))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName push))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression Symbol)) , (argument (singleExpression (objectLiteral { }))) ))))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName cos))) , (argument (singleExpression (objectLiteral { }))) ))))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression Symbol) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) )))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression (singleExpression isConstructor) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName cos)) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) )))) ))))) )))) (eos ;))))) <EOF>)