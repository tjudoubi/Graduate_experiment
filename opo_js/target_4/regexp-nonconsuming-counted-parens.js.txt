(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression re) = (singleExpression (literal /(.|.+?|\d*)*x/)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression str) = (singleExpression (literal "zzzz")))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression re) . (identifierName test)) (arguments ( (argument (singleExpression str)) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression re) + (singleExpression (literal ".test(\""))) + (singleExpression str)) + (singleExpression (literal "\") should return false, but returned true.")))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s) = (singleExpression (literal "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz")))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression re) . (identifierName test)) (arguments ( (argument (singleExpression str)) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression re) + (singleExpression (literal ".test(\""))) + (singleExpression str)) + (singleExpression (literal "\") should return false, but returned true.")))) (eos ;))))))) <EOF>)