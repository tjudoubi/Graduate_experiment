(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 1)))) , (propertyAssignment (propertyName (identifierName bar)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (identifierName baz)) : (singleExpression (literal (numericLiteral 3)))) })))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression $vm) . (identifierName inlineCapacity)) (arguments ( (argument (singleExpression o)) ))) <= (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "There should be inline capacity"))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression o) . (identifierName foo)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression $vm) . (identifierName flattenDictionaryObject)) (arguments ( (argument (singleExpression o)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName foo)) = (singleExpression (literal (numericLiteral 1))))) (eos ;))))) <EOF>)