(program (sourceElements (sourceElement (statement (functionDeclaration function tryGetOwnPropertyDescriptorGetName ( (formalParameterList (formalParameterArg (assignable obj)) , (formalParameterArg (assignable property)) , (formalParameterArg (assignable expectedName))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression descriptor) = (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression property)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression descriptor))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Couldn't find property descriptor on object ")) + (singleExpression (singleExpression (singleExpression obj) . (identifierName toString)) (arguments ( )))) + (singleExpression (literal " for property "))) + (singleExpression (singleExpression (singleExpression property) . (identifierName toString)) (arguments ( ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getter) = (singleExpression (singleExpression descriptor) . (identifierName get)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression getter))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Property ")) + (singleExpression (singleExpression (singleExpression property) . (identifierName toString)) (arguments ( )))) + (singleExpression (literal " on object "))) + (singleExpression (singleExpression (singleExpression obj) . (identifierName toString)) (arguments ( )))) + (singleExpression (literal " is not a getter")))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getterName) = (singleExpression (singleExpression getter) . (identifierName name)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression getterName) !== (singleExpression expectedName))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Wrong getter name for property ")) + (singleExpression (singleExpression (singleExpression property) . (identifierName toString)) (arguments ( )))) + (singleExpression (literal " on object "))) + (singleExpression (singleExpression (singleExpression obj) . (identifierName toString)) (arguments ( )))) + (singleExpression (literal " expected "))) + (singleExpression expectedName)) + (singleExpression (literal " got "))) + (singleExpression getterName))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression Array)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (literal "get [Symbol.species]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression Map)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (literal "get [Symbol.species]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression Set)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (literal "get [Symbol.species]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression RegExp)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (literal "get [Symbol.species]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression Promise)) , (argument (singleExpression (singleExpression Symbol) . (identifierName species))) , (argument (singleExpression (literal "get [Symbol.species]"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression (singleExpression Map) . (identifierName prototype))) , (argument (singleExpression (literal "size"))) , (argument (singleExpression (literal "get size"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression (singleExpression Set) . (identifierName prototype))) , (argument (singleExpression (literal "size"))) , (argument (singleExpression (literal "get size"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression (singleExpression RegExp) . (identifierName prototype))) , (argument (singleExpression (literal "flags"))) , (argument (singleExpression (literal "get flags"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression (singleExpression RegExp) . (identifierName prototype))) , (argument (singleExpression (literal "sticky"))) , (argument (singleExpression (literal "get sticky"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tryGetOwnPropertyDescriptorGetName) (arguments ( (argument (singleExpression (singleExpression RegExp) . (identifierName prototype))) , (argument (singleExpression (literal "source"))) , (argument (singleExpression (literal "get source"))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName __lookupGetter__)) (arguments ( (argument (singleExpression (literal "__proto__"))) ))) . (identifierName name)) !== (singleExpression (literal "get __proto__")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Expected Object __proto__ getter to be named \"get __proto\""))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName __lookupSetter__)) (arguments ( (argument (singleExpression (literal "__proto__"))) ))) . (identifierName name)) !== (singleExpression (literal "set __proto__")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Expected Object __proto__ setter to be named \"set __proto\""))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Int32Array) . (identifierName prototype)) . (identifierName __lookupGetter__)) (arguments ( (argument (singleExpression (literal "byteOffset"))) ))) . (identifierName name)) !== (singleExpression (literal "get byteOffset")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Expected TypedArray.prototype byteOffset getter to be named \"get byteOffset\""))) (eos ;))))))) <EOF>)