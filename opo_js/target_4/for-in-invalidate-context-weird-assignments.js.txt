(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected SyntaxError!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName xx)) : (singleExpression (literal (numericLiteral 0)))) })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>)) in (singleExpression o))) ))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression i) in (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) ) (statement (block { })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression typeof (singleExpression i)) === (singleExpression (literal "string")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression i)) ]) === (singleExpression undefined))) )))) (eos ;)))) })))) } ) ; test ( function ( ) { let o = { xx : 0 } ; for ( let i in o ) { for ( { i } of [ { i : 0 } ] ) { } assert ( typeof i === "number" ) ; assert ( o [ i ] === undefined ) ; } } ) ; test ( function ( ) { let o = { xx : 0 } ; for ( let i in o ) { ; ( { i } = { i : 0 } ) ; assert ( typeof i === "number" ) ; assert ( o [ i ] === undefined ) ; } } ) ; test ( function ( ) { let o = { xx : 0 } ; for ( let i in o ) { ; ( [ i ] = [ 0 ] ) ; assert ( typeof i === "number" ) ; assert ( o [ i ] === undefined ) ; } } ) ; test ( function ( ) { let o = { xx : 0 } ; for ( let i in o ) { ; ( { ... i } = { a : 20 , b : 30 } ) ; assert ( typeof i === "object" ) ; assert ( o [ i ] === undefined ) ; } } ) ; test ( function ( ) { let o = { xx : 0 } ; for ( let i in o ) { eval ( "i = 0;" ) ; assert ( typeof i === "number" ) ; assert ( o [ i ] === undefined ) ; } } ) ; shouldThrowSyntaxError ( `function f() {        let o = {xx: 0};        for (let i in o) {            for (var i of [0]) { }        }    }` ) ; shouldThrowSyntaxError ( `function f() {        let o = {xx: 0};        for (let i in o) {            var i = 0;        }    }` ) ;)