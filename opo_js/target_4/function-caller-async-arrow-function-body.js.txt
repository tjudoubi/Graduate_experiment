(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function thingy ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) . (identifierName caller))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable ok) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable badError) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo) = (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ok) = (singleExpression (literal true)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName toString)) (arguments ( ))) != (singleExpression (literal "TypeError: Function.caller used to retrieve async function body")))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression badError) = (singleExpression e))) (eos ;)))))) }))))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ok)) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: did not throw error"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression badError)) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression badError))) (eos ;)))))))) })))) )) (arguments ( )))) (eos ;))))) <EOF>)