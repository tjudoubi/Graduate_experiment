(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xSetterCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function MyConstructor ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName x)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression MyConstructor))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression MyConstructor))) (eos ;)))) (sourceElement (statement (functionDeclaration function setter ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression xSetterCalled) = (singleExpression (literal true)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName __defineSetter__)) (arguments ( (argument (singleExpression (literal "x"))) , (argument (singleExpression setter)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression MyConstructor))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression xSetterCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "FAIL: 'x' setter was not called."))) ))))) (eos ;)))))))) }))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable xSetterCalled) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function makeO ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression o)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeO) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeO) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function setter ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression xSetterCalled) = (singleExpression (literal true)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName __defineSetter__)) (arguments ( (argument (singleExpression (literal "x"))) , (argument (singleExpression setter)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeO) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression xSetterCalled))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "FAIL: 'x' setter was not called."))) ))))) (eos ;)))))))) }))) )) (arguments ( )))) (eos ;))))) <EOF>)