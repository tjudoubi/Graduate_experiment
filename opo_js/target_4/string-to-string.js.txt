(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test1 ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName toString)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test2 ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName toString)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test3 ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName toString)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test3)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (literal "Hello")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stringObject) = (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression string)) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test1) (arguments ( (argument (singleExpression string)) )))) , (argument (singleExpression string)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression stringObject)) )))) , (argument (singleExpression string)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) & (singleExpression (literal (numericLiteral 1))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test3) (arguments ( (argument (singleExpression string)) )))) , (argument (singleExpression string)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test3) (arguments ( (argument (singleExpression stringObject)) )))) , (argument (singleExpression string)) )))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test1) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) , (argument (singleExpression (literal `[object Object]`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) , (argument (singleExpression (literal `[object Object]`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test3) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) , (argument (singleExpression (literal `[object Object]`))) )))) (eos ;))))) <EOF>)