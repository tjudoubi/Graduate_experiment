(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression args)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable a1)) , (formalParameterArg (assignable a2)) , (formalParameterArg (assignable a3)) , (formalParameterArg (assignable a4)) , (formalParameterArg (assignable a5)) , (formalParameterArg (assignable a6)) , (formalParameterArg (assignable a7)) , (formalParameterArg (assignable a8)) , (formalParameterArg (assignable a9)) , (formalParameterArg (assignable a10)) , (formalParameterArg (assignable a11)) , (formalParameterArg (assignable a12)) , (formalParameterArg (assignable a13)) , (formalParameterArg (assignable a14)) , (formalParameterArg (assignable a15)) , (formalParameterArg (assignable a16)) , (formalParameterArg (assignable a17)) , (formalParameterArg (assignable a18)) , (formalParameterArg (assignable a19)) , (formalParameterArg (assignable a20)) , (formalParameterArg (assignable a21)) , (formalParameterArg (assignable a22)) , (formalParameterArg (assignable a23)) , (formalParameterArg (assignable a24)) , (formalParameterArg (assignable a25)) , (formalParameterArg (assignable a26)) , (formalParameterArg (assignable a27)) , (formalParameterArg (assignable a28)) , (formalParameterArg (assignable a29)) , (formalParameterArg (assignable a30)) , (formalParameterArg (assignable a31)) , (formalParameterArg (assignable a32)) , (formalParameterArg (assignable a33)) , (formalParameterArg (assignable a34)) , (formalParameterArg (assignable a35))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression a1)) , (argument (singleExpression a2)) , (argument (singleExpression a3)) , (argument (singleExpression a4)) , (argument (singleExpression a5)) , (argument (singleExpression a6)) , (argument (singleExpression a7)) , (argument (singleExpression a8)) , (argument (singleExpression a9)) , (argument (singleExpression a10)) , (argument (singleExpression a11)) , (argument (singleExpression a12)) , (argument (singleExpression a13)) , (argument (singleExpression a14)) , (argument (singleExpression a15)) , (argument (singleExpression a16)) , (argument (singleExpression a17)) , (argument (singleExpression a18)) , (argument (singleExpression a19)) , (argument (singleExpression a20)) , (argument (singleExpression a21)) , (argument (singleExpression a22)) , (argument (singleExpression a23)) , (argument (singleExpression a24)) , (argument (singleExpression a25)) , (argument (singleExpression a26)) , (argument (singleExpression a27)) , (argument (singleExpression a28)) , (argument (singleExpression a29)) , (argument (singleExpression a30)) , (argument (singleExpression a31)) , (argument (singleExpression a32)) , (argument (singleExpression a33)) , (argument (singleExpression a34)) , (argument (singleExpression a35)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable args) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 35))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression args) . (identifierName push)) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument ... (singleExpression args)) )))) (eos ;)))) })))))) <EOF>)