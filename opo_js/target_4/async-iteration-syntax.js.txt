(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assert) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error in assert. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but was "'))) + (singleExpression result)) + (singleExpression (literal '":'))) + (singleExpression message))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function checkSyntax ( (formalParameterList (formalParameterArg (assignable src))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression src)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Syntax Error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) + (singleExpression (literal "\n script: `"))) + (singleExpression src)) + (singleExpression (literal "`")))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function checkSyntaxError ( (formalParameterList (formalParameterArg (assignable src)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression src)) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bError) = (singleExpression (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError)) && (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) === (singleExpression message)) || (singleExpression (singleExpression typeof (singleExpression message)) === (singleExpression (literal 'undefined'))))) ))))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression bError))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected syntax Error: ")) + (singleExpression message)) + (singleExpression (literal "\n in script: `"))) + (singleExpression src)) + (singleExpression (literal "`")))) ))))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function checkSimpleAsyncGeneratorSloppyMode ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var a1 = async function*asyncGenWithName1(){}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var a2 = async function *asyncGenWithName2(){ yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var a3 = async function * asyncGenWithName2(){ await p; yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var d1 = async function*(){}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var d2 = async function* (){ yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var d3 = async function * (){ await p; yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'async function* withName1(){  }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'async function *withName2(){ yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'async function * withName3(){ await p; yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'class A { async * method() { } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'class B { async * method() {yield 11;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'class C { async * method() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'class D { async * "method"() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'class F { async * 0() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal 'var obj = { async * method() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '({ async foo() {} })'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '({ async : 1 })'))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function checkSimpleAsyncGeneratorStrictMode ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var a1 = async function*asyncGenWithName1(){}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var a2 = async function *asyncGenWithName2(){ yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var a3 = async function * asyncGenWithName2(){ await p; yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var d1 = async function*(){}'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var d2 = async function* (){ yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var d3 = async function * (){ await p; yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; async function* withName1(){  }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; async function *withName2(){ yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; async function * withName3(){ await p; yield 11; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; class A { async * method() { } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; class B { async * method() {yield 11;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; class C { async * method() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; class D { async * "method"() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; class E { async * ["calc" + "ulate"]() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; class F { async * 0() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; var obj = { async * method() {yield 11; await p;} }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; ({ async foo() {} })'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (literal '"use strict"; ({ async : 1 })'))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function checkNestedAsyncGenerators ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable wrappers) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName start)) : (singleExpression (literal 'var a1 = async function*asyncGenWithName1(){'))) , (propertyAssignment (propertyName (identifierName finish)) : (singleExpression (literal '}'))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName start)) : (singleExpression (literal 'async function*asyncGenWithName2(){ '))) , (propertyAssignment (propertyName (identifierName finish)) : (singleExpression (literal '}'))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName start)) : (singleExpression (literal 'class A { async * method() { '))) , (propertyAssignment (propertyName (identifierName finish)) : (singleExpression (literal ' } }'))) })))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expressions) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal 'await 10; yield 11; return 12;'))) , (arrayElement (singleExpression (literal 'var async = 10; yield async;'))) , (arrayElement (singleExpression (literal 'var async = 10; await async;'))) , (arrayElement (singleExpression (literal 'var async = 10; return async;'))) , (arrayElement (singleExpression (literal 'var async = function() {}; return async;'))) , (arrayElement (singleExpression (literal 'var async = function() {}; return async();'))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression wrappers) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters wrapper) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expressions) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters exp) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntax) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression wrapper) . (identifierName start)) + (singleExpression exp)) + (singleExpression (singleExpression wrapper) . (identifierName finish)))) )))) (eos ;)))))) })))) )))) (eos ;)))))) })))) )))) eos))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function checkSimpleAsyncGeneratorSyntaxErrorInSloppyMode ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var asyncGenFn = async function *await() {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var asyncGenFn = async function*(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var asyncGenFn = async function *withName(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "async function *asyncGeneratorFunctionDeclaration(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var asyncGenFn = *async function () {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var asyncGenFn = *async function withName() {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "*async function asyncGeneratorFunctionDeclaration(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { *async asyncGeneratorMethod() {} };"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "var obj = { async asyncGeneratorMethod*() {} };"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "class A { get async* ttt() {} }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "class B { get *async ttt() {} }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal '({ async = 1 })'))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function checkSimpleAsyncGeneratorSyntaxErrorInStrictMode ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var asyncGenFn = async function *await() {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var asyncGenFn = async function*(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var asyncGenFn = async function *withName(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; async function *asyncGeneratorFunctionDeclaration(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var asyncGenFn = *async function () {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var asyncGenFn = *async function withName() {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; *async function asyncGeneratorFunctionDeclaration(await) {}"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var obj = { *async asyncGeneratorMethod() {} };"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; var obj = { async asyncGeneratorMethod*() {} };"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; class A { get async* ttt() {} }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; class B { get *async ttt() {} }"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkSyntaxError) (arguments ( (argument (singleExpression (literal "'use strict'; ({ async = 1 })"))) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;))))) <EOF>)