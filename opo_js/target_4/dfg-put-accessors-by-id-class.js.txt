(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testAttribute ( (formalParameterList (formalParameterArg (assignable object)) , (formalParameterArg (assignable name)) , (formalParameterArg (assignable type))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName has)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression name)) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression desc) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression object)) , (argument (singleExpression name)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression desc) . (identifierName configurable))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression desc) . (identifierName enumerable))) , (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression type) === (singleExpression (literal 'get')))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName get)))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName set)))) , (argument (singleExpression (literal 'undefined'))) )))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression type) === (singleExpression (literal 'set')))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName get)))) , (argument (singleExpression (literal 'undefined'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName set)))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName get)))) , (argument (singleExpression (literal 'function'))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression desc) . (identifierName set)))) , (argument (singleExpression (literal 'function'))) )))) (eos ;)))) }))))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testAttribute)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function getter ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class Cocoa (classTail { (classElement (methodDefinition (getter get (propertyName (identifierName hello))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression object) = (singleExpression new (singleExpression (singleExpression Cocoa) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testAttribute) (arguments ( (argument (singleExpression (singleExpression object) . (identifierName __proto__))) , (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'get'))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName hello))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getter)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function setter ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class Cocoa (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) })) (classElement (methodDefinition (setter set (propertyName (identifierName hello))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression value))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression object) = (singleExpression new (singleExpression (singleExpression Cocoa) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testAttribute) (arguments ( (argument (singleExpression (singleExpression object) . (identifierName __proto__))) , (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'set'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) . (identifierName hello)) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName value))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression setter)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function accessors ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class Cocoa (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName hello))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName value))) (eos ;)))))) })) (classElement (methodDefinition (setter set (propertyName (identifierName hello))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression value))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression object) = (singleExpression new (singleExpression (singleExpression Cocoa) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testAttribute) (arguments ( (argument (singleExpression (singleExpression object) . (identifierName __proto__))) , (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'getset'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression object) . (identifierName hello)) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression object) . (identifierName hello))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression accessors)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression getter) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression setter) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression accessors) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))) })))))) <EOF>)