(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression Error))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test1) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function getMultiline ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) . (identifierName multiline))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression getMultiline)) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName __proto__)) = (singleExpression RegExp))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression RegExp) . (identifierName multiline)) = (singleExpression (literal false)))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 500))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getMultiline) (arguments ( (argument (singleExpression o)) ))) === (singleExpression (literal false)))) )))) (eos ;)))) })) (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression RegExp) . (identifierName input)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression RegExp) . (identifierName multiline)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression getMultiline) (arguments ( (argument (singleExpression o)) ))) === (singleExpression undefined))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test1) (arguments ( )))) (eos ;))))) <EOF>)