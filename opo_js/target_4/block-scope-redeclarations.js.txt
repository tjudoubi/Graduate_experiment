(program (sourceElements (sourceElement (statement (functionDeclaration function shouldNotThrow ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression error)) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression error) instanceof (singleExpression SyntaxError))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'Expected SyntaxError!'))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ var x; let x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ { var x; } let x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ { { var x; } } let x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ let x; var x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ let x; { var x; } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ let x; { { var x; } } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ var x; { let x; } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ var x; { { let x; } } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ { let x; } var x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ { { let x; } } var x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ var x; const x = 0; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ { var x; } const x = 0; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ { { var x; } } const x = 0; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ const x = 0; var x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ const x = 0; { var x; } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal '{ const x = 0; { { var x; } } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ var x; { const x = 0; } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ var x; { { const x = 0; } } }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ { const x = 0; } var x; }'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotThrow) (arguments ( (argument (singleExpression (literal '{ { { const x = 0; } } var x; }'))) )))) (eos ;))))) <EOF>)