(program (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression Map)) !== (singleExpression (literal 'function')))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value")) + (singleExpression typeof (singleExpression Map)))) (eos ;)))))) (sourceElement (statement (functionDeclaration function testCallTypeError ( (formalParameterList (formalParameterArg (assignable item))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression item)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: error not thrown"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression (literal "TypeError: calling Map constructor without new is invalid")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable pass) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ elementList ]))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Set) (arguments ( ))))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Map) (arguments ( ))))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ""))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ,) ]))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ,) ]))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'C'))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal 'O'))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'C'))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal 'K'))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'V'))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal 'K'))) }))) ,) ]))) ))))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ,) ]))) ))))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) ,) ]))) ))))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'C'))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal 'O'))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'C'))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal 'K'))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal 'V'))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal 'K'))) }))) ,) ]))) ))))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable pair))) of (expressionSequence (singleExpression pass)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName size)) !== (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad map size ")) + (singleExpression (singleExpression map) . (identifierName size)))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCallTypeError) (arguments ( (argument (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function testTypeError ( (formalParameterList (formalParameterArg (assignable item))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable map) = (singleExpression new (singleExpression (singleExpression Map) (arguments ( (argument (singleExpression item)) )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Error: error not thrown"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression (literal "TypeError: Type error")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad error ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable nonIterable) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Cappuccino"))) )))) , (arrayElement (singleExpression (literal true))) , (arrayElement (singleExpression (literal false))) , (arrayElement (singleExpression (objectLiteral { }))) , (arrayElement (singleExpression new (singleExpression (singleExpression Date) (arguments ( ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) , (arrayElement (singleExpression (singleExpression Object) (arguments ( (argument (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "Matcha"))) )))) )))) , (arrayElement (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { functionBody }))) ))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression nonIterable)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression item)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCallTypeError) (arguments ( (argument (singleExpression item)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable notContainNextItem) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "Cocoa"))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 0))))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "A"))) , (arrayElement (singleExpression (literal "B"))) , (arrayElement (singleExpression (literal "A")))) ]))) , (arrayElement (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "cocoa"))) ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression String) (arguments ( (argument (singleExpression (literal "Cocoa"))) ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression Set) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ]))) ))))) , (arrayElement (singleExpression new (singleExpression (singleExpression Set) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) ))))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable item))) of (expressionSequence (singleExpression notContainNextItem)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression item)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCallTypeError) (arguments ( (argument (singleExpression item)) )))) (eos ;)))) })))))) <EOF>)