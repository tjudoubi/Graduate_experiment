(program (sourceElements (sourceElement (statement (functionDeclaration function testTypeError ( (formalParameterList (formalParameterArg (assignable script)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Expected type error not thrown by `")) + (singleExpression script)) + (singleExpression (literal "`")))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testOK ( (formalParameterList (formalParameterArg (assignable script))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression script)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression error)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ } = null)`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ a } = null)`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ a: { b } = null } = { })`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: null })`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ } = undefined)`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ a } = undefined)`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ a: { b } = undefined } = { })`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testTypeError) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: undefined })`))) , (argument (singleExpression (literal "TypeError: Right side of assignment cannot be destructured"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = 123)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = 123)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = 123 } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: 123 })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = 0.5)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = 0.5)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = 0.5 } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: 0.5 })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = NaN)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = NaN)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = NaN } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: NaN })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = true)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = true)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = true } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: true })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = {})`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = {})`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = {} } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: {} })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = [])`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = [])`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = [] } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: [] })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = /1/)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = /1/)`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = /1/ } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: /1/ })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ } = makeMasquerader())`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a } = makeMasquerader())`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } = makeMasquerader() } = { })`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testOK) (arguments ( (argument (singleExpression (literal `({ a: { b } } = { a: makeMasquerader() })`))) )))) (eos ;))))) <EOF>)