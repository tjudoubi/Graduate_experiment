(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable symbol) = (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable object) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression symbol) ]) : (singleExpression (literal (numericLiteral 3)))) , (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (literal (numericLiteral 0)))) , (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 2)))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (literal (numericLiteral 1)))) , })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable count) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tester) = (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperties)) (arguments ( (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (numericLiteral 0)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression count) ++)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) })))) }))) , (propertyAssignment (propertyName (numericLiteral 1)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression count) ++)) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) })))) }))) , (propertyAssignment (propertyName 'hello') : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression count) ++)) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))))) })))) }))) , (propertyAssignment (propertyName [ (singleExpression symbol) ]) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression count) ++)) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))))) })))) }))) , }))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName assign)) (arguments ( (argument (singleExpression tester)) , (argument (singleExpression object)) )))) (eos ;))))) <EOF>)