(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function isBigEndian ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable word) = (singleExpression new (singleExpression (singleExpression Int16Array) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression word) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bytes) = (singleExpression new (singleExpression (singleExpression Int8Array) (arguments ( (argument (singleExpression (singleExpression word) . (identifierName buffer))) )))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression (singleExpression bytes) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable intArray) = (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression intArray) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) = (singleExpression a))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression intArray) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression b))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable floatArray) = (singleExpression new (singleExpression (singleExpression Float64Array) (arguments ( (argument (singleExpression (singleExpression intArray) . (identifierName buffer))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable element) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression floatArray)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression element) + (singleExpression (literal (numericLiteral 1)))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal "")) + (singleExpression result))) )) != (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal "")) + (singleExpression x))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result for ")) + (singleExpression a)) + (singleExpression (literal ", "))) + (singleExpression b)) + (singleExpression (literal ": "))) + (singleExpression result)) + (singleExpression (literal ", but expected: "))) + (singleExpression x)) + (singleExpression (literal "; loaded "))) + (singleExpression element)) + (singleExpression (literal " from the array")))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression isBigEndian) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0xFFFF0000)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (singleExpression (literal (numericLiteral 0))) / (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xFFFF0000)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0xFFFF0000)))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0xFFFF0000)))) , (argument (singleExpression (singleExpression (literal (numericLiteral 0))) / (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))) })))))) <EOF>)