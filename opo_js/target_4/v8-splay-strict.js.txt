(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable kSplayTreeSize) = (singleExpression (literal (numericLiteral 8000))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable kSplayTreeModifications) = (singleExpression (literal (numericLiteral 80))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable kSplayTreePayloadDepth) = (singleExpression (literal (numericLiteral 5))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable splayTree) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (functionDeclaration function GeneratePayloadTree ( (formalParameterList (formalParameterArg (assignable depth)) , (formalParameterArg (assignable tag))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression depth) == (singleExpression (literal (numericLiteral 0))))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName array)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4)))) , (arrayElement (singleExpression (literal (numericLiteral 5)))) , (arrayElement (singleExpression (literal (numericLiteral 6)))) , (arrayElement (singleExpression (literal (numericLiteral 7)))) , (arrayElement (singleExpression (literal (numericLiteral 8)))) , (arrayElement (singleExpression (literal (numericLiteral 9))))) ]))) , (propertyAssignment (propertyName (identifierName string)) : (singleExpression (singleExpression (singleExpression (literal 'String for key ')) + (singleExpression tag)) + (singleExpression (literal ' in leaf node')))) }))) (eos ;)))) })) else (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName left)) : (singleExpression (singleExpression GeneratePayloadTree) (arguments ( (argument (singleExpression (singleExpression depth) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression tag)) )))) , (propertyAssignment (propertyName (identifierName right)) : (singleExpression (singleExpression GeneratePayloadTree) (arguments ( (argument (singleExpression (singleExpression depth) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression tag)) )))) }))) (eos ;)))) }))))))) }))) (sourceElement (statement (functionDeclaration function GenerateKey ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName random)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function InsertNewNode ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression key) = (singleExpression (singleExpression GenerateKey) (arguments ( ))))) (eos ;)))) })) while ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression splayTree) . (identifierName find)) (arguments ( (argument (singleExpression key)) ))) != (singleExpression (literal null)))) ) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable payload) = (singleExpression (singleExpression GeneratePayloadTree) (arguments ( (argument (singleExpression kSplayTreePayloadDepth)) , (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression key)) )))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression splayTree) . (identifierName insert)) (arguments ( (argument (singleExpression key)) , (argument (singleExpression payload)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression key)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function SplaySetup ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression splayTree) = (singleExpression new (singleExpression (singleExpression SplayTree) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression kSplayTreeSize))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression InsertNewNode) (arguments ( )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function SplayTearDown ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable keys) = (singleExpression (singleExpression (singleExpression splayTree) . (identifierName exportKeys)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression splayTree) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable length) = (singleExpression (singleExpression keys) . (identifierName length)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression length) != (singleExpression kSplayTreeSize))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Splay tree has wrong size"))) ))))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression length) - (singleExpression (literal (numericLiteral 1)))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression keys) [ (expressionSequence (singleExpression i)) ]) >= (singleExpression (singleExpression keys) [ (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) ]))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Splay tree not sorted"))) ))))) (eos ;)))) }))))) }))))))) }))) (sourceElement (statement (functionDeclaration function SplayRun ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression kSplayTreeModifications))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable key) = (singleExpression (singleExpression InsertNewNode) (arguments ( ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable greatest) = (singleExpression (singleExpression (singleExpression splayTree) . (identifierName findGreatestLessThan)) (arguments ( (argument (singleExpression key)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression greatest) == (singleExpression (literal null)))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression splayTree) . (identifierName remove)) (arguments ( (argument (singleExpression key)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression splayTree) . (identifierName remove)) (arguments ( (argument (singleExpression (singleExpression greatest) . (identifierName key))) )))) (eos ;)))))) }))))))) }))) (sourceElement (statement (functionDeclaration function SplayTree ( ) { functionBody }))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName root_)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName isEmpty)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression (singleExpression this) . (identifierName root_)))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName insert)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) = (singleExpression new (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) (arguments ( (argument (singleExpression key)) , (argument (singleExpression value)) )))))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName splay_)) (arguments ( (argument (singleExpression key)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName key)) == (singleExpression key))) ) (statement (block { (statementList (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable node) = (singleExpression new (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) (arguments ( (argument (singleExpression key)) , (argument (singleExpression value)) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) > (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName key)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression node) . (identifierName left)) = (singleExpression (singleExpression this) . (identifierName root_)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression node) . (identifierName right)) = (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName right)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName right)) = (singleExpression (literal null)))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression node) . (identifierName right)) = (singleExpression (singleExpression this) . (identifierName root_)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression node) . (identifierName left)) = (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName left)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName left)) = (singleExpression (literal null)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) = (singleExpression node))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName remove)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( )))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'Key not found: ')) + (singleExpression key))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName splay_)) (arguments ( (argument (singleExpression key)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName key)) != (singleExpression key))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'Key not found: ')) + (singleExpression key))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable removed) = (singleExpression (singleExpression this) . (identifierName root_)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName left)))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) = (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName right)))) (eos ;)))) })) else (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable right) = (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName right)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) = (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName left)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName splay_)) (arguments ( (argument (singleExpression key)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName right)) = (singleExpression right))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression removed)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName find)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( )))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName splay_)) (arguments ( (argument (singleExpression key)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName key)) == (singleExpression key)) ? (singleExpression (singleExpression this) . (identifierName root_)) : (singleExpression (literal null)))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName findMax)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable opt_startNode))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( )))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable current) = (singleExpression (singleExpression opt_startNode) || (singleExpression (singleExpression this) . (identifierName root_))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression current) . (identifierName right))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression (singleExpression current) . (identifierName right)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression current)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName findGreatestLessThan)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( )))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName splay_)) (arguments ( (argument (singleExpression key)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName key)) < (singleExpression key))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName root_))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName left))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName findMax)) (arguments ( (argument (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName left))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal null))) (eos ;)))) }))))))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName exportKeys)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( ))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) . (identifierName traverse_)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable node))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression result) . (identifierName push)) (arguments ( (argument (singleExpression (singleExpression node) . (identifierName key))) )))) (eos ;)))))) }))) )))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName prototype)) . (identifierName splay_)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isEmpty)) (arguments ( )))) ) (statement (block { (statementList (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable dummy)) , (variableDeclaration (assignable left)) , (variableDeclaration (assignable right))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression dummy) = (singleExpression (singleExpression left) = (singleExpression (singleExpression right) = (singleExpression new (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal null))) )))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable current) = (singleExpression (singleExpression this) . (identifierName root_)))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) < (singleExpression (singleExpression current) . (identifierName key)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression current) . (identifierName left)))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) < (singleExpression (singleExpression (singleExpression current) . (identifierName left)) . (identifierName key)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression current) . (identifierName left)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression current) . (identifierName left)) = (singleExpression (singleExpression tmp) . (identifierName right)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName right)) = (singleExpression current))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression tmp))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression current) . (identifierName left)))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression right) . (identifierName left)) = (singleExpression current))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression right) = (singleExpression current))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression (singleExpression current) . (identifierName left)))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) > (singleExpression (singleExpression current) . (identifierName key)))) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression current) . (identifierName right)))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) })))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) > (singleExpression (singleExpression (singleExpression current) . (identifierName right)) . (identifierName key)))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tmp) = (singleExpression (singleExpression current) . (identifierName right)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression current) . (identifierName right)) = (singleExpression (singleExpression tmp) . (identifierName left)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression tmp) . (identifierName left)) = (singleExpression current))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression tmp))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression current) . (identifierName right)))) ) (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression left) . (identifierName right)) = (singleExpression current))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression left) = (singleExpression current))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression (singleExpression current) . (identifierName right)))) (eos ;)))) })) else (statement (block { (statementList (statement (breakStatement break (eos ;)))) }))))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression left) . (identifierName right)) = (singleExpression (singleExpression current) . (identifierName left)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression right) . (identifierName left)) = (singleExpression (singleExpression current) . (identifierName right)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression current) . (identifierName left)) = (singleExpression (singleExpression dummy) . (identifierName right)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression current) . (identifierName right)) = (singleExpression (singleExpression dummy) . (identifierName left)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName root_)) = (singleExpression current))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable key)) , (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName key)) = (singleExpression key))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName value)) = (singleExpression value))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) . (identifierName prototype)) . (identifierName left)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) . (identifierName prototype)) . (identifierName right)) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression SplayTree) . (identifierName Node)) . (identifierName prototype)) . (identifierName traverse_)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable current) = (singleExpression this))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression current)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable left) = (singleExpression (singleExpression current) . (identifierName left)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression left)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression left) . (identifierName traverse_)) (arguments ( (argument (singleExpression f)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression current)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression current) = (singleExpression (singleExpression current) . (identifierName right)))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression SplaySetup) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression SplayRun) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression SplayTearDown) (arguments ( )))) (eos ;))))) <EOF>)