(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (lastFormalParameterArg ... (singleExpression a))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable w))) of (expressionSequence (singleExpression a)) ) (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable q))) of (expressionSequence (singleExpression arguments)) ) (statement (block { }))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 4)))) , (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (literal (numericLiteral 6)))) , (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (literal (numericLiteral 8)))) , (argument (singleExpression (literal (numericLiteral 9)))) , (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression (literal (numericLiteral 11)))) , (argument (singleExpression (literal (numericLiteral 12)))) , (argument (singleExpression (literal (numericLiteral 13)))) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) <EOF>)