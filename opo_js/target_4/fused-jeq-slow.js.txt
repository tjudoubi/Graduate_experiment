(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad value: ${String(actual)} ${String(expected)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function testJNEQ ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression b))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJNEQ)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJEQ ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) != (singleExpression b))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 42)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 30)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJEQ)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJNEQB ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))) })) while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression b))) )))) ) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJNEQB)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJEQB ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))) })) while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) != (singleExpression b))) )))) ) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJEQB)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJNEQF ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) == (singleExpression b))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJNEQF)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testJEQF ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression a) != (singleExpression b))) )))) ) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression i)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testJEQF)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQ) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQ) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQ) (arguments ( (argument (singleExpression (literal 'world'))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQ) (arguments ( (argument (singleExpression (literal 'world'))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 20.5)))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 20.5)))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 20.5)))) , (argument (singleExpression (literal (numericLiteral 21.3)))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 20.5)))) , (argument (singleExpression (literal (numericLiteral 21.3)))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 20.5)))) , (argument (singleExpression (literal (numericLiteral 20.5)))) )))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQ) (arguments ( (argument (singleExpression (literal (numericLiteral 20.5)))) , (argument (singleExpression (literal (numericLiteral 20.5)))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQB) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQB) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQB) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'hello'))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQB) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQB) (arguments ( (argument (singleExpression (literal (numericLiteral 20.4)))) , (argument (singleExpression (literal (numericLiteral 20.4)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQB) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal (numericLiteral 20.4)))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQB) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 20.4)))) , (argument (singleExpression (literal (numericLiteral 20.4)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 20.4)))) , (argument (singleExpression (literal (numericLiteral 10.5)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQF) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQF) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal (numericLiteral 10.5)))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJNEQF) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'hello'))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression testJEQF) (arguments ( (argument (singleExpression (literal 'hello'))) , (argument (singleExpression (literal 'world'))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) })))))) <EOF>)