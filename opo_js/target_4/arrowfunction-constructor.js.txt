(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable simpleArrowFunction) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression simpleArrowFunction)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorOnCreate) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable fc) = (singleExpression new (singleExpression (singleExpression simpleArrowFunction) (arguments ( )))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorOnCreate) = (singleExpression (literal true)))) (eos ;)))) })))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression errorOnCreate)) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal "Error: No exception during run new ArrowFunction"))) )))) (eos ;)))) })))))) <EOF>)