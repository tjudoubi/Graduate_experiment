(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression main) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0))))) ])))) (eos ;))) (statement (functionDeclaration function executor ( (formalParameterList (formalParameterArg (assignable resolve)) , (lastFormalParameterArg ... (singleExpression reject))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression arr)) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression resolve) > (singleExpression arr))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable fn) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression fn)) (eos ;)))))) }))))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable _))) of (expressionSequence (singleExpression arr)) ) (statement (block { (statementList (statement (functionDeclaration function fn ( ) { functionBody })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName toString)) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression arr)) , (argument (singleExpression arr)) , (argument (singleExpression arr)) , (argument (singleExpression arr)) , (argument (singleExpression arr)) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( ))))) (eos ;)))) }))))) })) else (statement (block { (statementList (statement (iterationStatement for ( (variableDeclarationList (varModifier const) (variableDeclaration (assignable _))) of (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression arr))) ]))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName toString)) (arguments ( )))) (eos ;)))) })))) (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable fn) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Promise) (arguments ( (argument (singleExpression executor)) , (argument (singleExpression arr)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression some) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (withStatement with ( (expressionSequence (singleExpression arr)) ) (statement (block { }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression reject)) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression executor) (arguments ( )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression executor) (arguments ( )))) (eos ;)))) }))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression main) (arguments ( )))) (eos ;))))) <EOF>)