(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Date) . (identifierName prototype)) . (identifierName valueOf))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression Math) . (identifierName abs))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName prototype)) . (identifierName __defineGetter__)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class Test (classTail extends (singleExpression Array) { })))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression (singleExpression (singleExpression Test) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 4))))) , (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (literal (numericLiteral 6)))) , (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (literal (numericLiteral 8)))) , (argument (singleExpression (literal (numericLiteral 9)))) ))) . (identifierName splice)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression gc) (arguments ( )))) (eos ;))))) <EOF>)