(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable assert) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable result)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message) = (singleExpression (literal "")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal 'Error in assert. Expected "')) + (singleExpression expected)) + (singleExpression (literal '" but was "'))) + (singleExpression result)) + (singleExpression (literal '":'))) + (singleExpression message))) ))))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable getPromise) = (singleExpression (anoymousFunction (arrowFunctionParameters promiseHolder) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression Promise) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable resolve)) , (formalParameterArg (assignable reject))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName resolve)) = (singleExpression resolve))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression promiseHolder) . (identifierName reject)) = (singleExpression reject))) (eos ;)))))) })))) ))))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable Logger) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable type)) , (formalParameterArg (assignable value)) , (formalParameterArg (assignable done))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression log) . (identifierName push)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (singleExpression type)) , (propertyAssignment (singleExpression value)) , (propertyAssignment (singleExpression done)) }))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logFulfilledEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable value)) , (formalParameterArg (assignable done))) )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression value)) , (argument (singleExpression done)) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logRejectEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'reject'))) , (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logCatchEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters value) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'catch'))) , (argument (singleExpression value)) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logCustomEvent)) = (singleExpression (anoymousFunction (arrowFunctionParameters event) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName logEvent)) (arguments ( (argument (singleExpression (literal 'custom'))) , (argument (singleExpression event)) , (argument (singleExpression (literal false))) )))) (eos ;)))))) }))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName getLogger)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression log)))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName clear)) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression log) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))))) }))))) eos))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable fulfillSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters result) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logFulfilledEvent)) (arguments ( (argument (singleExpression (singleExpression result) . (identifierName value))) , (argument (singleExpression (singleExpression result) . (identifierName done))) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable rejectSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logRejectEvent)) (arguments ( (argument (singleExpression error)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable catchSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters error) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logCatchEvent)) (arguments ( (argument (singleExpression error)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable customSpy) = (singleExpression (anoymousFunction (arrowFunctionParameters logger) => (arrowFunctionBody (singleExpression (anoymousFunction (arrowFunctionParameters event) => (arrowFunctionBody (singleExpression (singleExpression (singleExpression logger) . (identifierName logCustomEvent)) (arguments ( (argument (singleExpression event)) ))))))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable assertLogger) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable loggerObject))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable logger) = (singleExpression (singleExpression (singleExpression loggerObject) . (identifierName getLogger)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable _assertLogger) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable isNotOutOfLength) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression index) < (singleExpression (singleExpression logger) . (identifierName length)))) , (argument (singleExpression (literal true))) , (argument (singleExpression (literal `Index is greater then log length`))) )))) (eos ;)))))) }))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fullfilled)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on fulfill')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal false))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName fullfilledDone)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on fulfill with done true')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'fulfilled'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName rejected)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on reject')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'reject'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression (singleExpression (singleExpression error) . (identifierName toString)) (arguments ( )))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName catched)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedError)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on catch')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression isNotOutOfLength) (arguments ( )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'catch'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedError)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal true))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName custom)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable expectedValue)) , (formalParameterArg (assignable message) = (singleExpression (literal 'on custom event')))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable msg) = (singleExpression (literal `step: ${index} - ${message}`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression step) = (singleExpression (singleExpression logger) [ (expressionSequence (singleExpression index)) ]))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName type))) , (argument (singleExpression (literal 'custom'))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName value))) , (argument (singleExpression expectedValue)) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression step) . (identifierName done))) , (argument (singleExpression (literal false))) , (argument (singleExpression msg)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression index) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName isFinal)) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable message) = (singleExpression (literal '')))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression index)) , (argument (singleExpression (singleExpression logger) . (identifierName length))) , (argument (singleExpression (literal `expected final step: ${message}`))) )))) (eos ;)))))) })))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression (singleExpression _assertLogger) (arguments ( ))))) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable logger) = (singleExpression new (singleExpression (singleExpression Logger) (arguments ( )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable someValue) = (singleExpression (literal 'some-value')))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable errorMessage) = (singleExpression (literal 'error-message')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression asyncIter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName asyncIterator)) ]) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName next)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'next:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (literal 'iter:Finish')) === (singleExpression value))) }))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword throw)))) ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'throw:')) + (singleExpression error))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression error)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'return:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) }))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression asyncIter))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'C'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'E'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:C'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:D'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "C"))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:E'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "D"))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:iter:Finish'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "E"))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "3"))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName (reservedWord (keyword return)))) (arguments ( (argument (singleExpression (literal 'C'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'E'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:C'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression (literal "C"))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'E'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression f) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (singleExpression (literal 'throw:')) + (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) )))))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:D'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:E'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:iter:Finish'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal 'E'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '3'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression asyncIter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName asyncIterator)) ]) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName next)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'next:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (literal 'iter:Finish')) === (singleExpression value))) }))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * boo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression asyncIter))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'C'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:C'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:D'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "C"))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal "next:iter:Finish"))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "D"))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal "3"))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (singleExpression boo) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'TypeError: Delegated generator does not have a \'throw\' method.'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression asyncIter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName asyncIterator)) ]) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName next)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'next:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (literal 'iter:Finish')) === (singleExpression value))) }))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'return:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) }))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression asyncIter))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'TypeError: Delegated generator does not have a \'throw\' method.'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ph) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression asyncIter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName asyncIterator)) ]) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName next)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'next:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (literal 'iter:Finish')) === (singleExpression value))) }))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'return:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression ph)) )))) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) }))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * baz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression asyncIter))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression b) = (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression b) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'TypeError: Delegated generator does not have a \'throw\' method.'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ph) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'accept'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'TypeError: Delegated generator does not have a \'throw\' method.'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ph) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression asyncIter) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName asyncIterator)) ]) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName next)) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'next:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression value)) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (singleExpression (literal 'iter:Finish')) === (singleExpression value))) }))) (eos ;)))))) }) , (propertyAssignment (propertyName (identifierName (reservedWord (keyword return)))) ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression customSpy) (arguments ( (argument (singleExpression logger)) ))) (arguments ( (argument (singleExpression (singleExpression (literal 'return:')) + (singleExpression value))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression getPromise) (arguments ( (argument (singleExpression ph)) )))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (functionDeclaration async function * foobar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '0'))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression yield) * (singleExpression asyncIter))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression yield)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal '3'))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fb) = (singleExpression (singleExpression foobar) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ph) . (identifierName resolve)) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName value)) : (singleExpression (literal 'value'))) , (propertyAssignment (propertyName (identifierName done)) : (singleExpression (literal true))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'TypeError: Delegated generator does not have a \'throw\' method.'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression fb) = (singleExpression (singleExpression foobar) (arguments ( (argument (singleExpression (literal 'Init'))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression logger) . (identifierName clear)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'A'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'B'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName (reservedWord (keyword throw)))) (arguments ( (argument (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression errorMessage)) ))))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'D'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'iter:Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression fb) . (identifierName next)) (arguments ( (argument (singleExpression (literal 'Finish'))) ))) . (identifierName then)) (arguments ( (argument (singleExpression (singleExpression fulfillSpy) (arguments ( (argument (singleExpression logger)) )))) , (argument (singleExpression (singleExpression rejectSpy) (arguments ( (argument (singleExpression logger)) )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ph) . (identifierName resolve)) (arguments ( (argument (singleExpression (literal 'X'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression assertLogger) (arguments ( (argument (singleExpression logger)) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'next:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression (literal '0'))) ))) . (identifierName custom)) (arguments ( (argument (singleExpression (literal 'return:undefined'))) ))) . (identifierName fullfilled)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName rejected)) (arguments ( (argument (singleExpression (literal 'TypeError: Iterator result interface is not an object.'))) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName fullfilledDone)) (arguments ( (argument (singleExpression undefined)) ))) . (identifierName isFinal)) (arguments ( )))) (eos ;))))) <EOF>)