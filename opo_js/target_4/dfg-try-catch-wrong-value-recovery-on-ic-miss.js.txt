(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "bad value"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression oThrow) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 40)))) , (propertyAssignment (propertyName (identifierName z)) : (singleExpression (literal (numericLiteral 50)))) , (propertyAssignment (getter get (propertyName (identifierName f))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Hello World!"))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o1) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName f)) : (singleExpression (literal (numericLiteral 40)))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o2) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName x)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 50)))) , (propertyAssignment (propertyName (identifierName f)) : (singleExpression (literal (numericLiteral 500)))) , (propertyAssignment (getter get (propertyName (identifierName f))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 20)))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (singleExpression f) (arguments ( ))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (singleExpression o) . (identifierName f)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression o) === (singleExpression oThrow))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression i)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression flag) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression flag)) ) (statement (returnStatement return (expressionSequence (singleExpression oThrow)) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ) (statement (returnStatement return (expressionSequence (singleExpression o1)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression o2)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression f)) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression flag) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression f)) )))) (eos ;))))) <EOF>)