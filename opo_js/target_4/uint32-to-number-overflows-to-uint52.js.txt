(program (sourceElements (sourceElement (statement (functionDeclaration function simpleArith ( (formalParameterList (formalParameterArg (assignable number))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression number) >>> (singleExpression (literal (numericLiteral 0))))) )) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression simpleArith)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression simpleArithResult) = (singleExpression (singleExpression simpleArith) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression simpleArithResult) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed simpleArith(i) at i = ")) + (singleExpression i))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression simpleArithResult) = (singleExpression (singleExpression simpleArith) (arguments ( (argument (singleExpression (literal (numericLiteral 2147483647)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression simpleArithResult) !== (singleExpression (literal (numericLiteral 2147483648))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed simpleArith(2147483647)"))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression simpleArithResult) = (singleExpression (singleExpression simpleArith) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression simpleArithResult) !== (singleExpression (literal (numericLiteral 4294967296))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed simpleArith(-1) at i = ")) + (singleExpression i))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression simpleArith) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 5)))) (eos ;)))))) }))) }))) ))) !== (singleExpression (literal (numericLiteral 6))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed simpleArith({ toValue: function() { return 5; }}"))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression simpleArith) (arguments ( (argument (singleExpression (literal "WebKit!"))) ))) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed simpleArith({ toValue: function() { return 5; }}"))) (eos ;)))))) (sourceElement (statement (functionDeclaration function compareToLargeNumber ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression value) >>> (singleExpression (literal (numericLiteral 0))))) )) < (singleExpression (literal (numericLiteral 4294967294))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression compareToLargeNumber)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e6))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compareResult) = (singleExpression (singleExpression compareToLargeNumber) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression compareResult) !== (singleExpression (literal true)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed compareToLargeNumber(i) at i = ")) + (singleExpression i))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compareResult) = (singleExpression (singleExpression compareToLargeNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 3))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression compareResult) !== (singleExpression (literal true)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed compareToLargeNumber(4294967293) at i = ")) + (singleExpression i))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compareResult) = (singleExpression (singleExpression compareToLargeNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 2))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression compareResult) !== (singleExpression (literal false)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed compareToLargeNumber(4294967294) at i = ")) + (singleExpression i))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compareResult) = (singleExpression (singleExpression compareToLargeNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression compareResult) !== (singleExpression (literal false)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Failed compareToLargeNumber(4294967295) at i = ")) + (singleExpression i))) (eos ;)))))) })))) <EOF>)