(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName a)) = (singleExpression (literal (numericLiteral 0))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName b)) = (singleExpression (literal (numericLiteral 1))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName c)) = (singleExpression (literal (numericLiteral 2))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName d)) = (singleExpression (literal (numericLiteral 3))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName e)) = (singleExpression (literal (numericLiteral 4))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName f)) = (singleExpression (literal (numericLiteral 5))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName g)) = (singleExpression (literal (numericLiteral 6))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName h)) = (singleExpression (literal (numericLiteral 7))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName i)) = (singleExpression (literal (numericLiteral 8))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName j)) = (singleExpression (literal (numericLiteral 9))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName k)) = (singleExpression (literal (numericLiteral 10))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName l)) = (singleExpression (literal (numericLiteral 11))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName m)) = (singleExpression (literal (numericLiteral 12))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName n)) = (singleExpression (literal (numericLiteral 13))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName o)) = (singleExpression (literal (numericLiteral 14))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName p)) = (singleExpression (literal (numericLiteral 15))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName q)) = (singleExpression (literal (numericLiteral 16))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName r)) = (singleExpression (literal (numericLiteral 17))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName s)) = (singleExpression (literal (numericLiteral 18))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName t)) = (singleExpression (literal (numericLiteral 19))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName u)) = (singleExpression (literal (numericLiteral 20))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName v)) = (singleExpression (literal (numericLiteral 21))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName w)) = (singleExpression (literal (numericLiteral 22))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) = (singleExpression (literal (numericLiteral 23))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName y)) = (singleExpression (literal (numericLiteral 24))))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName z)) = (singleExpression (literal (numericLiteral 25))))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName a)) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for a: ")) + (singleExpression (singleExpression o) . (identifierName a)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName b)) != (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for b: ")) + (singleExpression (singleExpression o) . (identifierName b)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName c)) != (singleExpression (literal (numericLiteral 2))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for c: ")) + (singleExpression (singleExpression o) . (identifierName c)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName d)) != (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for d: ")) + (singleExpression (singleExpression o) . (identifierName d)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName e)) != (singleExpression (literal (numericLiteral 4))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for e: ")) + (singleExpression (singleExpression o) . (identifierName e)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName f)) != (singleExpression (literal (numericLiteral 5))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for f: ")) + (singleExpression (singleExpression o) . (identifierName f)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName g)) != (singleExpression (literal (numericLiteral 6))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for g: ")) + (singleExpression (singleExpression o) . (identifierName g)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName h)) != (singleExpression (literal (numericLiteral 7))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for h: ")) + (singleExpression (singleExpression o) . (identifierName h)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName i)) != (singleExpression (literal (numericLiteral 8))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for i: ")) + (singleExpression (singleExpression o) . (identifierName i)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName j)) != (singleExpression (literal (numericLiteral 9))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for j: ")) + (singleExpression (singleExpression o) . (identifierName j)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName k)) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for k: ")) + (singleExpression (singleExpression o) . (identifierName k)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName l)) != (singleExpression (literal (numericLiteral 11))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for l: ")) + (singleExpression (singleExpression o) . (identifierName l)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName m)) != (singleExpression (literal (numericLiteral 12))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for m: ")) + (singleExpression (singleExpression o) . (identifierName m)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName n)) != (singleExpression (literal (numericLiteral 13))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for n: ")) + (singleExpression (singleExpression o) . (identifierName n)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName o)) != (singleExpression (literal (numericLiteral 14))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for o: ")) + (singleExpression (singleExpression o) . (identifierName o)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName p)) != (singleExpression (literal (numericLiteral 15))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for p: ")) + (singleExpression (singleExpression o) . (identifierName p)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName q)) != (singleExpression (literal (numericLiteral 16))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for q: ")) + (singleExpression (singleExpression o) . (identifierName q)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName r)) != (singleExpression (literal (numericLiteral 17))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for r: ")) + (singleExpression (singleExpression o) . (identifierName r)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName s)) != (singleExpression (literal (numericLiteral 18))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for s: ")) + (singleExpression (singleExpression o) . (identifierName s)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName t)) != (singleExpression (literal (numericLiteral 19))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for t: ")) + (singleExpression (singleExpression o) . (identifierName t)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName u)) != (singleExpression (literal (numericLiteral 20))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for u: ")) + (singleExpression (singleExpression o) . (identifierName u)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName v)) != (singleExpression (literal (numericLiteral 21))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for v: ")) + (singleExpression (singleExpression o) . (identifierName v)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName w)) != (singleExpression (literal (numericLiteral 22))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for w: ")) + (singleExpression (singleExpression o) . (identifierName w)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName x)) != (singleExpression (literal (numericLiteral 23))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for x: ")) + (singleExpression (singleExpression o) . (identifierName x)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName y)) != (singleExpression (literal (numericLiteral 24))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for y: ")) + (singleExpression (singleExpression o) . (identifierName y)))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName z)) != (singleExpression (literal (numericLiteral 25))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value for z: ")) + (singleExpression (singleExpression o) . (identifierName z)))) (eos ;)))))) })))))) <EOF>)