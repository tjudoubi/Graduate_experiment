(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) eos))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeSyntaxError ( (formalParameterList (formalParameterArg (assignable str))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression str)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal false)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression failed)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Did not throw syntax error: ")) + (singleExpression str))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldNotBeSyntaxError ( (formalParameterList (formalParameterArg (assignable str))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression str)) ))))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)) && (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName message)) . (identifierName indexOf)) (arguments ( (argument (singleExpression (literal "new.target"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1))))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression failed)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Did throw a syntax error: ")) + (singleExpression str))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression operators) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "="))) , (arrayElement (singleExpression (literal "+="))) , (arrayElement (singleExpression (literal "-="))) , (arrayElement (singleExpression (literal "*="))) , (arrayElement (singleExpression (literal "<<="))) , (arrayElement (singleExpression (literal ">>="))) , (arrayElement (singleExpression (literal ">>>="))) , (arrayElement (singleExpression (literal "&="))) , (arrayElement (singleExpression (literal "^="))) , (arrayElement (singleExpression (literal "|="))) , (arrayElement (singleExpression (literal "%=")))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) operator))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression operators)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `new.target ${operator} 20`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo = new.target ${operator} 20`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo ${operator} new.target ${operator} 20`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `new.target ${operator} foo *= 40`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo ${operator} 20`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo = foo ${operator} 20`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo ${operator} foo ${operator} 20`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo ${operator} foo *= 40`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression prePostFixOperators) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "++"))) , (arrayElement (singleExpression (literal "--")))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) operator))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression prePostFixOperators)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `${operator}new.target`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo = ${operator}new.target`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `${operator}foo`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo = ${operator}foo`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;)))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) operator))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression prePostFixOperators)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `new.target${operator}`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo = new.target${operator}`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo${operator}`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `foo = foo${operator}`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression otherUnaryOperators) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "!"))) , (arrayElement (singleExpression (literal "~"))) , (arrayElement (singleExpression (literal "+"))) , (arrayElement (singleExpression (literal "-"))) , (arrayElement (singleExpression (literal "typeof "))) , (arrayElement (singleExpression (literal "void "))) , (arrayElement (singleExpression (literal "delete ")))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) operator))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression of)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression otherUnaryOperators)) (eos ))))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function strict ( (formalParameterList (formalParameterArg (assignable body))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal `"use strict" ${body}`))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression functionBody) = (singleExpression (literal `${operator}new.target`)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression functionBody)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldNotBeSyntaxError) (arguments ( (argument (singleExpression (singleExpression strict) (arguments ( (argument (singleExpression functionBody)) )))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeSyntaxError) (arguments ( (argument (singleExpression (literal `({foo: new.target} = {foo:20})`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression sawSyntaxError)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `() => new.target`))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression sawSyntaxError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `() => { new.target }`))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression sawSyntaxError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => new.target`))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression sawSyntaxError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => { new.target }`))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression sawSyntaxError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => await new.target`))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression sawSyntaxError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => { await new.target }`))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawSyntaxError) = (singleExpression (singleExpression e) instanceof (singleExpression SyntaxError)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression sawSyntaxError)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `() => new.target`))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `() => { new.target }`))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `async () => new.target`))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `async () => { new.target }`))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `async () => await new.target`))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `async () => { await new.target }`))) ))))) (eos ;))) (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new . target))))) eos))))) })) (statement (emptyStatement ;)) (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { (propertyAssignment (singleExpression new . target)) })))))) eos))))) })) (statement (emptyStatement ;)) (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression new . target))))) eos))))) })) (statement (emptyStatement ;)) (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { (propertyAssignment (singleExpression new . target)) })))))) eos))))) })) (statement (emptyStatement ;)) (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression await (singleExpression new . target)))))) eos))))) })) (statement (emptyStatement ;)) (statement (functionDeclaration function f ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { (propertyAssignment (singleExpression await (singleExpression new . target))) })))))) eos))))) })) (statement (emptyStatement ;)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `() => new.target`))) )))) eos))))) }))) )) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `() => { new.target }`))) )))) eos))))) }))) )) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => new.target`))) )))) eos))))) }))) )) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => { new.target }`))) )))) eos))))) }))) )) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => await new.target`))) )))) eos))))) }))) )) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal `async () => { await new.target }`))) )))) eos))))) }))) )) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sawError) = (singleExpression (literal true)))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression ! (singleExpression sawError))) )))) (eos ;))))) <EOF>)