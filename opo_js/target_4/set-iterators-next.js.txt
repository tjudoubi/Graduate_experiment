(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testArray) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4)))) , (arrayElement (singleExpression (literal (numericLiteral 5)))) , (arrayElement (singleExpression (literal (numericLiteral 6))))) ])))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testSet) = (singleExpression new (singleExpression (singleExpression Set) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression key)) , (arrayElement (singleExpression value))) ])))) of (expressionSequence (singleExpression (singleExpression (singleExpression testArray) . (identifierName entries)) (arguments ( )))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName add)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable keys) = (singleExpression (singleExpression (singleExpression testSet) . (identifierName keys)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression key)) })) = (singleExpression (singleExpression (singleExpression keys) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression testArray) . (identifierName indexOf)) (arguments ( (argument (singleExpression key)) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression key))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName size)) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression keys) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable values) = (singleExpression (singleExpression (singleExpression testSet) . (identifierName values)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (literal true))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (singleExpression value)) })) = (singleExpression (singleExpression (singleExpression values) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression testArray) . (identifierName indexOf)) (arguments ( (argument (singleExpression value)) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName size)) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression values) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable entries) = (singleExpression (singleExpression (singleExpression testSet) . (identifierName entries)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression entry)) })) = (singleExpression (singleExpression (singleExpression entries) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression key)) , (arrayElement (singleExpression value))) ])) = (singleExpression entry))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) !== (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression key)) + (singleExpression (literal " "))) + (singleExpression value))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression testSet) . (identifierName has)) (arguments ( (argument (singleExpression value)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression testSet) . (identifierName has)) (arguments ( (argument (singleExpression key)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression key))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression testArray) . (identifierName indexOf)) (arguments ( (argument (singleExpression value)) ))) === (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value)) + (singleExpression (literal " "))) + (singleExpression i))) (eos ;)))))) })) while ( (expressionSequence (singleExpression ! (singleExpression done))) ) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName size)) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression entries) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable entries) = (singleExpression (singleExpression (singleExpression testSet) . (identifierName entries)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression entry)) })) = (singleExpression (singleExpression (singleExpression entries) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression key)) , (arrayElement (singleExpression value))) ])) = (singleExpression entry))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression key) !== (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression key)) + (singleExpression (literal " "))) + (singleExpression value))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression testSet) . (identifierName has)) (arguments ( (argument (singleExpression key)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 4)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName add)) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 100000))) + (singleExpression i))) )))) (eos ;)))))) })) while ( (expressionSequence (singleExpression ! (singleExpression done))) ) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName size)) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression entries) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (functionDeclaration function otherKey ( (formalParameterList (formalParameterArg (assignable key))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression key) + (singleExpression (literal (numericLiteral 1))))) )) % (singleExpression (singleExpression testArray) . (identifierName length)))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable entries) = (singleExpression (singleExpression (singleExpression testSet) . (identifierName entries)) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement do (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (objectLiteral { (propertyAssignment (singleExpression done)) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression entry)) })) = (singleExpression (singleExpression (singleExpression entries) . (identifierName next)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression done)) ) (statement (breakStatement break (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable (arrayLiteral [ (elementList (arrayElement (singleExpression key)) , (arrayElement (singleExpression value))) ])) = (singleExpression entry))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression testSet) . (identifierName has)) (arguments ( (argument (singleExpression key)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value)) + (singleExpression (literal " "))) + (singleExpression (singleExpression (singleExpression testSet) . (identifierName get)) (arguments ( (argument (singleExpression key)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 4)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression (singleExpression otherKey) (arguments ( (argument (singleExpression key)) )))) )))) (eos ;)))))) })) while ( (expressionSequence (singleExpression ! (singleExpression done))) ) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testSet) . (identifierName size)) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression i))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression (singleExpression entries) . (identifierName next)) (arguments ( ))) . (identifierName value)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression value))) (eos ;))))))) <EOF>)