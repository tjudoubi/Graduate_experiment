(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable f)) , (formalParameterArg (assignable v)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable d))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression f) . (identifierName bind)) (arguments ( (argument (singleExpression v)) , (argument (singleExpression c)) , (argument (singleExpression d)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c)) , (formalParameterArg (assignable d)) , (formalParameterArg (assignable e)) , (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression this)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thisValue) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) = (singleExpression (singleExpression test) (arguments ( (argument (singleExpression foo)) , (argument (singleExpression thisValue)) , (argument (singleExpression (literal (numericLiteral 20)))) , (argument (singleExpression (literal (numericLiteral 30)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression f) (arguments ( (argument (singleExpression foo)) , (argument (singleExpression thisValue)) , (argument (singleExpression (literal (numericLiteral 20)))) , (argument (singleExpression (literal (numericLiteral 30)))) ))) === (singleExpression thisValue))) )))) (eos ;)))) })))) <EOF>)