(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) eos))))))) }))) (sourceElement (statement (functionDeclaration function testIntrinsic ( (formalParameterList (formalParameterArg (assignable radix))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier let) (variableDeclaration (assignable s) = (singleExpression (literal `        {            function foo(n) {                n = n|0;                return parseInt(n, ${radix});            }            noInline(foo);            for (let i = 0; i < 10000; i++)                assert(foo(i) === i);            assert(foo("20") === 20);        }    `)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression s)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntrinsic2 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression n) = (singleExpression (singleExpression n) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression n)) , (argument (singleExpression (literal (numericLiteral 16)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression i)) ))) === (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression (singleExpression (literal "0x")) + (singleExpression i))) ))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression testIntrinsic2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic2) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntrinsic3 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) ))) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal "")))) ))) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression testIntrinsic3)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic3) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntrinsic4 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression (literal (numericLiteral 0)))) ))) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal "")))) ))) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic4) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntrinsic5 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression (literal (numericLiteral 10)))) ))) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal "")))) ))) === (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic5) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntrinsic6 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression (literal (numericLiteral 16)))) ))) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal "")))) ))) === (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression (singleExpression (literal "0x")) + (singleExpression i))) ))) + (singleExpression (literal (numericLiteral 1))))) )))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression testIntrinsic6)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic6) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testIntrinsic7 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable s))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression (literal (numericLiteral 16)))) ))) + (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression s)) , (argument (singleExpression (literal (numericLiteral 16)))) ))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression i) + (singleExpression (literal "")))) ))) === (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression parseInt) (arguments ( (argument (singleExpression (singleExpression (literal "0x")) + (singleExpression i))) ))) * (singleExpression (literal (numericLiteral 2))))) )))) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noDFG) (arguments ( (argument (singleExpression testIntrinsic7)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testIntrinsic7) (arguments ( )))) (eos ;))))) <EOF>)