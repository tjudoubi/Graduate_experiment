(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression a)) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement ... (singleExpression a))) ])) . (identifierName length)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l) != (singleExpression (literal (numericLiteral 5))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong length in foo: ")) + (singleExpression l))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression b)) , (arrayElement (singleExpression (literal (numericLiteral 43)))) , (arrayElement ... (singleExpression b))) ])) . (identifierName length)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l) != (singleExpression (literal (numericLiteral 7))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong length in bar: ")) + (singleExpression l))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable arg0)) , (lastFormalParameterArg ... (singleExpression c))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x) = (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression c)) , (arrayElement ... (singleExpression c))) ])))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable l) = (singleExpression (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression x)) , (arrayElement ... (singleExpression x)) , (arrayElement ... (singleExpression x))) ])) . (identifierName length)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression l) != (singleExpression (literal (numericLiteral 24))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Wrong length in baz: ")) + (singleExpression l))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) })))))) <EOF>)