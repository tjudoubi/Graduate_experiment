(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression set) = (singleExpression new (singleExpression Set)))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (literal (numericLiteral 64))) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 128))) - (singleExpression (literal (numericLiteral 64))))) )) / (singleExpression (literal (numericLiteral 2))))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression set) . (identifierName add)) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression (literal (numericLiteral 64))) + (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 128))) - (singleExpression (literal (numericLiteral 64))))) )) / (singleExpression (literal (numericLiteral 2))))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression set) . (identifierName (reservedWord (keyword delete)))) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) })))) <EOF>)