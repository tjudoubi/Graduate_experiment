(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function assertThrowTypeError ( (formalParameterList (formalParameterArg (assignable input))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression input)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal "a")) + (singleExpression (literal (bigintLiteral 100n))))) , (argument (singleExpression (literal "a100"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (literal (bigintLiteral 128n))) + (singleExpression (literal "baba")))) , (argument (singleExpression (literal "128baba"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "10n + 30"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "36 + 15n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "120n + 30.5"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "44.5 + 112034n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "10n - 30"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "36 - 15n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "120n - 30.5"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "44.5 - 112034n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "10n * 30"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "36 * 15n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "120n * 30.5"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "44.5 * 112034n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "10n / 30"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "36 / 15n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "120n / 30.5"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "44.5 / 112034n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "10n ** 30"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "36 ** 15n"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "120n ** 30.5"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assertThrowTypeError) (arguments ( (argument (singleExpression (literal "44.5 ** 112034n"))) )))) (eos ;))))) <EOF>)