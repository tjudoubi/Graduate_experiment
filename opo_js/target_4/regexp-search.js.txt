(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorKey) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName toString)) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'out'))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable string) = (singleExpression (literal 'Cocoa, Cappuccino, Rize, Matcha, Kilimanjaro')))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName search)) . (identifierName call)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal /Cocoa/))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: String.prototype.search requires that |this| not be null or undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName search)) . (identifierName call)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal /Cocoa/))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "TypeError: String.prototype.search requires that |this| not be null or undefined"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName search)) (arguments ( (argument (singleExpression errorKey)) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "Error: out"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal 'Cocoa')) . (identifierName search)) (arguments ( (argument (singleExpression (literal /Cocoa/))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName search)) (arguments ( (argument (singleExpression (literal /Rize/))) )))) , (argument (singleExpression (literal (numericLiteral 19)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName search)) (arguments ( (argument (singleExpression (literal 'Rize'))) )))) , (argument (singleExpression (literal (numericLiteral 19)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName search)) (arguments ( (argument (singleExpression (literal /Matcha/))) )))) , (argument (singleExpression (literal (numericLiteral 25)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName search)) (arguments ( (argument (singleExpression (literal 'Matcha'))) )))) , (argument (singleExpression (literal (numericLiteral 25)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal '    undefined')) . (identifierName search)) (arguments ( )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal '    undefined')) . (identifierName search)) (arguments ( (argument (singleExpression (literal 'undefined'))) )))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (literal /Cocoa/))) )) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName search))) ]) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable primitives) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal ''))) , (arrayElement (singleExpression (literal 'string'))) , (arrayElement (singleExpression (literal null))) , (arrayElement (singleExpression undefined)) , (arrayElement (singleExpression (literal (numericLiteral 42)))) , (arrayElement (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal 'Cocoa'))) )))) ,) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable primitive))) of (expressionSequence (singleExpression primitives)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression RegExp) . (identifierName prototype)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName search))) ]) . (identifierName call)) (arguments ( (argument (singleExpression primitive)) )))) eos))))) }))) , (argument (singleExpression (literal 'TypeError: RegExp.prototype.@@search requires that |this| be an Object'))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (literal /Cocoa/)) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName search))) ]) (arguments ( (argument (singleExpression errorKey)) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "Error: out"))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testRegExpSearch ( (formalParameterList (formalParameterArg (assignable regexp)) , (formalParameterArg (assignable string)) , (formalParameterArg (assignable result)) , (formalParameterArg (assignable lastIndex))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression regexp) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName search))) ]) (arguments ( (argument (singleExpression string)) )))) , (argument (singleExpression result)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression regexp) . (identifierName lastIndex))) , (argument (singleExpression lastIndex)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testSearch ( (formalParameterList (formalParameterArg (assignable regexp)) , (formalParameterArg (assignable string)) , (formalParameterArg (assignable result)) , (formalParameterArg (assignable lastIndex))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName search)) (arguments ( (argument (singleExpression regexp)) )))) , (argument (singleExpression result)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression regexp) . (identifierName lastIndex))) , (argument (singleExpression lastIndex)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function testBoth ( (formalParameterList (formalParameterArg (assignable regexp)) , (formalParameterArg (assignable string)) , (formalParameterArg (assignable result)) , (formalParameterArg (assignable lastIndex))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testSearch) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression string)) , (argument (singleExpression result)) , (argument (singleExpression lastIndex)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testRegExpSearch) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression string)) , (argument (singleExpression result)) , (argument (singleExpression lastIndex)) )))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable cocoa) = (singleExpression (literal /Cocoa/)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression cocoa) . (identifierName lastIndex)) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression cocoa)) , (argument (singleExpression (literal 'Cocoa'))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression cocoa)) , (argument (singleExpression (literal '  Cocoa'))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression cocoa)) , (argument (singleExpression (literal '  '))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable multibyte) = (singleExpression (literal /ココア/)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression multibyte) . (identifierName lastIndex)) = (singleExpression (literal (numericLiteral 20))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression multibyte)) , (argument (singleExpression (literal 'ココア'))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression multibyte)) , (argument (singleExpression (literal '  Cocoa'))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression multibyte)) , (argument (singleExpression (literal 'カプチーノ'))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function alwaysUnmatch ( (formalParameterList (formalParameterArg (assignable string))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable regexp) = (singleExpression new (singleExpression (singleExpression RegExp) (arguments ( (argument (singleExpression (literal 'ココア'))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression regexp) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName search))) ]) = (singleExpression alwaysUnmatch))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression regexp) [ (expressionSequence (singleExpression (singleExpression Symbol) . (identifierName search))) ])) , (argument (singleExpression alwaysUnmatch)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testBoth) (arguments ( (argument (singleExpression regexp)) , (argument (singleExpression (literal 'ココア'))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))))) <EOF>)