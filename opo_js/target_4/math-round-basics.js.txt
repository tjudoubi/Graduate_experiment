(program (sourceElements (sourceElement (statement (functionDeclaration function mathRoundOnIntegers ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundOnIntegers)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathRoundOnDoubles ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundOnDoubles)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathRoundOnBooleans ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundOnBooleans)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnIntegers) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnIntegers(")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnIntegers) (arguments ( (argument (singleExpression - (singleExpression i))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression - (singleExpression i)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnIntegers(")) + (singleExpression - (singleExpression i))) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleLow) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.4)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression doubleLow)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnDoubles(")) + (singleExpression doubleLow)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleHigh) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression doubleHigh)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnDoubles(")) + (singleExpression doubleHigh)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnDoubles(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.6))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(-0.6) = ")) + (singleExpression roundedValue))) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnIntegers) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnIntegers(")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnIntegers) (arguments ( (argument (singleExpression - (singleExpression i))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression - (singleExpression i)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnIntegers(-")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.4))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(-0.4) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.5))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(-0.5) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression roundedValue) === (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression roundedValue))) )) === (singleExpression - (singleExpression Infinity))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(-0) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) === (singleExpression roundedValue))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(NaN) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(Number.POSITIVE_INFINITY) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(Number.NEGATIVE_INFINITY) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0.5))) - (singleExpression (singleExpression (singleExpression Number) . (identifierName EPSILON)) / (singleExpression (literal (numericLiteral 4)))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression roundedValue))) )) !== (singleExpression Infinity)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(0.5 - Number.EPSILON / 4) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundOnDoubles) (arguments ( (argument (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 0.5)))) + (singleExpression (singleExpression (singleExpression Number) . (identifierName EPSILON)) / (singleExpression (literal (numericLiteral 4)))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0)))) || (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression roundedValue))) )) !== (singleExpression - (singleExpression Infinity))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundOnDoubles(-0.5 + Number.EPSILON / 4) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable boolean) = (singleExpression ! (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) )))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedBoolean) = (singleExpression (singleExpression mathRoundOnBooleans) (arguments ( (argument (singleExpression boolean)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedBoolean) != (singleExpression boolean))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundOnDoubles(")) + (singleExpression boolean)) + (singleExpression (literal ") = "))) + (singleExpression roundedBoolean))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function uselessMathRound ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (singleExpression value) | (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression uselessMathRound)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathRound(")) + (singleExpression i)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleLow) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.4)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression doubleLow)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathRound(")) + (singleExpression doubleLow)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleHigh) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression doubleHigh)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathRound(")) + (singleExpression doubleHigh)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression i))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "uselessMathRound(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.4))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "uselessMathRound(-0.4) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.5))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "uselessMathRound(-0.5) = ")) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression uselessMathRound) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0.6))))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "uselessMathRound(-0.6) = ")) + (singleExpression roundedValue))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathRoundWithOverflow ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundWithOverflow)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable bigValue) = (singleExpression (literal (numericLiteral 1000000000000))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundWithOverflow) (arguments ( (argument (singleExpression bigValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression bigValue))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundWithOverflow(")) + (singleExpression bigValue)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathRoundConsumedAsDouble ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) ))) * (singleExpression (literal (numericLiteral 0.5))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundConsumedAsDouble)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleValue) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.1)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundConsumedAsDouble) (arguments ( (argument (singleExpression doubleValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression i) * (singleExpression (literal (numericLiteral 0.5))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundConsumedAsDouble(")) + (singleExpression doubleValue)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleValue) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundConsumedAsDouble) (arguments ( (argument (singleExpression doubleValue)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression ( (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1))))) )) * (singleExpression (literal (numericLiteral 0.5))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundConsumedAsDouble(")) + (singleExpression doubleValue)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathRoundDoesNotCareAboutMinusZero ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) ))) | (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundDoesNotCareAboutMinusZero)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 0.5)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathRoundDoesNotCareAboutMinusZero) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression (singleExpression i) + (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundDoesNotCareAboutMinusZero(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function mathRoundNoArguments ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundNoArguments)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathRoundTooManyArguments ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable c))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) , (argument (singleExpression c)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundTooManyArguments)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathRoundNoArguments) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) === (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundNoArguments() = ")) + (singleExpression value))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathRoundTooManyArguments) (arguments ( (argument (singleExpression (literal (numericLiteral 2.1)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 2))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundTooManyArguments() = ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (functionDeclaration function testMathRoundOnConstants ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(0) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression value) === (singleExpression (literal (numericLiteral 0)))) && (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression (literal (numericLiteral 1))) / (singleExpression value))) )) === (singleExpression - (singleExpression Infinity))))) )))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(-0) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(1) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(-1) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 42))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(42) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 42.2))))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression - (singleExpression (literal (numericLiteral 42)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(-42.2) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression NaN)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) === (singleExpression value))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(NaN) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName POSITIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(Number.POSITIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (singleExpression Number) . (identifierName NEGATIVE_INFINITY))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression - (singleExpression Infinity)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(Number.NEGATIVE_INFINITY) = ")) + (singleExpression value))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName E))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 3))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Math.round(Math.E) = ")) + (singleExpression value))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testMathRoundOnConstants)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testMathRoundOnConstants) (arguments ( )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function mathRoundStructTransition ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathRoundStructTransition)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathRoundStructTransition) (arguments ( (argument (singleExpression (literal (numericLiteral 42.5)))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 43))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundStructTransition(42.5) = ")) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName round)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) + (singleExpression (literal (numericLiteral 5))))) (eos ;)))))) })))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable value) = (singleExpression (singleExpression mathRoundStructTransition) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression (literal (numericLiteral 47))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "mathRoundStructTransition(42) after transition = ")) + (singleExpression value))) (eos ;))))))) <EOF>)