(program (sourceElements (sourceElement (statement (functionDeclaration function mathTrunc ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName trunc)) (arguments ( (argument (singleExpression value)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathTrunc)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable doubleMid) = (singleExpression (singleExpression - (singleExpression (literal (numericLiteral 9901)))) - (singleExpression (literal (numericLiteral 0.6)))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable roundedValue) = (singleExpression (singleExpression mathTrunc) (arguments ( (argument (singleExpression doubleMid)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression roundedValue) !== (singleExpression - (singleExpression (literal (numericLiteral 9901)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "mathRoundDoesNotCareAboutMinusZero(")) + (singleExpression doubleMid)) + (singleExpression (literal ") = "))) + (singleExpression roundedValue))) (eos ;)))))) })))))) <EOF>)