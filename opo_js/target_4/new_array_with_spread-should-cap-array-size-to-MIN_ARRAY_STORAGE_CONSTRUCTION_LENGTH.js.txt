(program (sourceElements (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) eos))) (sourceElement statement) (sourceElement (statement {)) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makeFoo) (arguments ( (argument (singleExpression n)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression src) = (singleExpression (literal "return function(a, b) { for (let i = 0; i < 20000; i++); return [")))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression src) (assignmentOperator +=) (singleExpression (literal "...a")))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression src) (assignmentOperator +=) (singleExpression (literal ",")))) (eos ;)))))) })) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression src) (assignmentOperator +=) (singleExpression (literal ",...b];}")))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression src)) ))))) )) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable NUM_SPREAD_ARGS) = (singleExpression (literal (numericLiteral 8))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foo) = (singleExpression (singleExpression makeFoo) (arguments ( (argument (singleExpression NUM_SPREAD_ARGS)) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable b) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1.1)))) , (arrayElement (singleExpression (literal (numericLiteral 1.1))))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression b)) , (argument (singleExpression b)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function makeArray ( (formalParameterList (formalParameterArg (assignable len)) , (formalParameterArg (assignable v) = (singleExpression (literal (numericLiteral 1.234))))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName length)) < (singleExpression len))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression a) [ (expressionSequence (singleExpression (singleExpression a) . (identifierName length))) ]) = (singleExpression v))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable a) = (singleExpression (singleExpression makeArray) (arguments ( (argument (singleExpression (singleExpression (literal (numericLiteral 0x20000040))) / (singleExpression NUM_SPREAD_ARGS))) ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable c) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression c) . (identifierName length)) = (singleExpression (literal (numericLiteral 1))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression a)) , (argument (singleExpression c)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression arr) . (identifierName length))) )))) (eos ;))))) } var exception ; try { test ( ) ; } catch ( e ) { exception = e ; } if ( exception != "Error: Out of memory" ) throw "FAILED" ;)