(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function is1 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is2 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is3 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is3)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is4 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is4)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is5 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is5)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is6 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is6)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is7 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is7)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is8 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is8)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is9 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is9)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is10 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is10)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is11 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is11)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is12 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is12)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is13 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is13)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is14 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is14)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function is15 ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression b)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression is15)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression NaN)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal null))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal null))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression undefined)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal 'abc'))) , (argument (singleExpression (literal 'abc'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression Infinity)) , (argument (singleExpression Infinity)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable obj) = (singleExpression (objectLiteral { })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression obj)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression arr)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable sym) = (singleExpression (singleExpression Symbol) (arguments ( ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Object) . (identifierName is)) (arguments ( (argument (singleExpression sym)) , (argument (singleExpression sym)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is1) (arguments ( (argument (singleExpression NaN)) , (argument (singleExpression NaN)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is2) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal null))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is3) (arguments ( (argument (singleExpression (literal null))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is4) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression undefined)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is5) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal true))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is6) (arguments ( (argument (singleExpression (literal false))) , (argument (singleExpression (literal false))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is7) (arguments ( (argument (singleExpression (literal 'abc'))) , (argument (singleExpression (literal 'abc'))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is8) (arguments ( (argument (singleExpression Infinity)) , (argument (singleExpression Infinity)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is9) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is10) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is11) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is12) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is13) (arguments ( (argument (singleExpression obj)) , (argument (singleExpression obj)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is14) (arguments ( (argument (singleExpression arr)) , (argument (singleExpression arr)) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression is15) (arguments ( (argument (singleExpression sym)) , (argument (singleExpression sym)) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) })))))) <EOF>)