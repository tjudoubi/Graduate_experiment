(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression above) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) > (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression above)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression aboveOrEqual) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) >= (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression aboveOrEqual)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression below) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) )) < (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression below)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression belowOrEqual) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) )) <= (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression belowOrEqual)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression notAbove) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) > (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) ))) && (singleExpression a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression notAbove)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression notAboveOrEqual) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) >= (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) ))) && (singleExpression a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression notAboveOrEqual)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression notBelow) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) )) < (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) ))) && (singleExpression a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression notBelow)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression notBelowOrEqual) (arguments ( (argument (singleExpression a)) , (argument (singleExpression trap)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression i) >>> (singleExpression (literal (numericLiteral 0))))) )) <= (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) ))) && (singleExpression a))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) (assignmentOperator +=) (singleExpression i))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) === (singleExpression trap))) ) (statement (breakStatement break (eos ;)))))) })) (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression notBelowOrEqual)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 199990000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression aboveOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression aboveOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 200010000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression aboveOrEqual) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression below) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression below) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 199990000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression below) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression belowOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression belowOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 200010000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression belowOrEqual) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notAbove) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notAbove) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 199990000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notAbove) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notAboveOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notAboveOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 200010000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notAboveOrEqual) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notBelow) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notBelow) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 199990000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notBelow) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e2))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notBelowOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notBelowOrEqual) (arguments ( (argument (singleExpression (literal (numericLiteral 20000)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal (numericLiteral 200010000)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression notBelowOrEqual) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 10000)))) )))) , (argument (singleExpression (literal (numericLiteral 50005000)))) )))) (eos ;)))) })))))) <EOF>)