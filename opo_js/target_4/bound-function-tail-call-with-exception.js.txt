(program (sourceElements (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable idx))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression idx) > (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Hello"))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression a)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boundBar) = (singleExpression (singleExpression (singleExpression bar) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 42)))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable idx))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression boundBar) (arguments ( (argument (singleExpression idx)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boundFoo) = (singleExpression (singleExpression (singleExpression foo) . (identifierName bind)) (arguments ( (argument (singleExpression (literal null))) , (argument (singleExpression (literal (numericLiteral 41)))) ))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression boundFoo) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { })))))) <EOF>)