(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable globalObjectForObject) = (singleExpression (singleExpression $vm) . (identifierName globalObjectForObject)))) (eos ;)))) (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function spread ( (formalParameterList (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement ... (singleExpression a))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression spread)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable objectText) = (singleExpression (literal `    let o = {        [Symbol.iterator]() {            return {                next() {                    return {done: true};                }            };        }    };    o;`)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression objectText)) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 23)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression objectText)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression spread) (arguments ( (argument (singleExpression o)) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression myGlobalObject) = (singleExpression (singleExpression globalObjectForObject) (arguments ( (argument (singleExpression new (singleExpression Object))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression secondGlobalObject) = (singleExpression (singleExpression createGlobalObject) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o2) = (singleExpression (singleExpression (singleExpression (singleExpression secondGlobalObject) . (identifierName Function)) (arguments ( (argument (singleExpression (literal "return {};"))) ))) (arguments ( ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression spread) (arguments ( (argument (singleExpression o2)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression error)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression globalObjectForObject) (arguments ( (argument (singleExpression error)) ))) === (singleExpression myGlobalObject))) )))) (eos ;))))) <EOF>)