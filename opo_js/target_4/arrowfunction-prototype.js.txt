(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable testCase) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression message) + (singleExpression (literal ". Expected '"))) + (singleExpression expected)) + (singleExpression (literal "', but was '"))) + (singleExpression actual)) + (singleExpression (literal "'")))) (eos ;)))) }))))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable af1) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression (objectLiteral { }))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable af2) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable a))) )) => (arrowFunctionBody (singleExpression (objectLiteral { (propertyAssignment (singleExpression (singleExpression a) + (singleExpression (literal (numericLiteral 1))))) }))))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable af3) = (singleExpression (anoymousFunction (arrowFunctionParameters ( (formalParameterList (formalParameterArg (assignable x))) )) => (arrowFunctionBody (singleExpression (singleExpression x) + (singleExpression (literal (numericLiteral 1))))))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression af1)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression af2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression af3)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression af1) . (identifierName prototype)))) , (argument (singleExpression (literal 'undefined'))) , (argument (singleExpression (literal "Error: Not correct result for prototype of arrow function #1"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression af2) . (identifierName prototype)))) , (argument (singleExpression (literal 'undefined'))) , (argument (singleExpression (literal "Error: Not correct result for prototype of arrow function #2"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression typeof (singleExpression (singleExpression af3) . (identifierName prototype)))) , (argument (singleExpression (literal 'undefined'))) , (argument (singleExpression (literal "Error: Not correct result for prototype of arrow function #5"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression af1) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Error: Not correct result for prototype of arrow function #3"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression af2) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Error: Not correct result for prototype of arrow function #4"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testCase) (arguments ( (argument (singleExpression (singleExpression (singleExpression af3) . (identifierName hasOwnProperty)) (arguments ( (argument (singleExpression (literal "prototype"))) )))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Error: Not correct result for prototype of arrow function #6"))) )))) (eos ;)))) })))))) <EOF>)