(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable verbose) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression arguments) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function Foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName length)) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable callTestBodyStr) = (singleExpression (singleExpression (singleExpression (literal "    var result = this.method.apply(this, arguments);")) + (singleExpression (literal "\n"))) + (singleExpression (literal "    return result + 1;"))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable constructTestBodyStr) = (singleExpression (literal "    return new this.constructor(...arguments);")))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable tiers) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "LLint"))) , (propertyAssignment (propertyName (identifierName iterations)) : (singleExpression (literal (numericLiteral 10)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "BaselineJIT"))) , (propertyAssignment (propertyName (identifierName iterations)) : (singleExpression (literal (numericLiteral 50)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "DFG"))) , (propertyAssignment (propertyName (identifierName iterations)) : (singleExpression (literal (numericLiteral 500)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName name)) : (singleExpression (literal "FTL"))) , (propertyAssignment (propertyName (identifierName iterations)) : (singleExpression (literal (numericLiteral 10000)))) }))) ,) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function doTest ( (formalParameterList (formalParameterArg (assignable testCategory)) , (formalParameterArg (assignable testBodyStr)) , (formalParameterArg (assignable tier))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable iterations) = (singleExpression (singleExpression (singleExpression tiers) [ (expressionSequence (singleExpression tier)) ]) . (identifierName iterations)))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Testing ")) + (singleExpression testCategory)) + (singleExpression (literal " tier "))) + (singleExpression (singleExpression (singleExpression tiers) [ (expressionSequence (singleExpression tier)) ]) . (identifierName name))) + (singleExpression (literal " by iterating "))) + (singleExpression iterations)) + (singleExpression (literal " times")))) )))) (eos ;))))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable o) = (singleExpression (objectLiteral { })))) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName method)) = (singleExpression foo))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName constructor)) = (singleExpression Foo))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName trigger)) = (singleExpression new (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression testBodyStr)) )))))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression iterations))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName trigger)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName trigger)) (arguments ( (argument (singleExpression o)) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "FAILED ")) + (singleExpression testCategory)) + (singleExpression (literal " in tier "))) + (singleExpression (singleExpression (singleExpression tiers) [ (expressionSequence (singleExpression tier)) ]) . (identifierName name))) + (singleExpression (literal ": "))) + (singleExpression e))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal true))) (eos ;)))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable failureFound) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable tier) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression tier) < (singleExpression (singleExpression tiers) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression tier) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression doTest) (arguments ( (argument (singleExpression (literal "op_call_varargs"))) , (argument (singleExpression callTestBodyStr)) , (argument (singleExpression tier)) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failureFound) ++)) (eos ;)))))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable tier) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression tier) < (singleExpression (singleExpression tiers) . (identifierName length)))) ; (expressionSequence (singleExpression (singleExpression tier) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression doTest) (arguments ( (argument (singleExpression (literal "op_construct_varargs"))) , (argument (singleExpression constructTestBodyStr)) , (argument (singleExpression tier)) ))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failureFound) ++)) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression failureFound) == (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "ERROR: test has 1 failure"))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression failureFound) > (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "ERROR: test has ")) + (singleExpression failureFound)) + (singleExpression (literal " failures")))) (eos ;))) else (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "No failures"))) )))) (eos ;))))))))))) <EOF>)