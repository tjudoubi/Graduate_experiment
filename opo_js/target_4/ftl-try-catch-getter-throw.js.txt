(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "bad value"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function random ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "blah"))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression random)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable a))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression x) = (singleExpression (singleExpression o) . (identifierName g)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression y) = (singleExpression (singleExpression o) . (identifierName y)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression random) (arguments ( ))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression j) = (singleExpression (singleExpression o) . (identifierName f)))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression j) === (singleExpression (literal "blah")))) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression x) + (singleExpression y)) + (singleExpression (literal (numericLiteral 1))))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression x) + (singleExpression y))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable flag) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (functionDeclaration function f ( (formalParameterList (formalParameterArg (assignable arg1)) , (formalParameterArg (assignable arg2)) , (formalParameterArg (assignable arg3))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression flag)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "blah"))) ))))) eos))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression arg1)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression f)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o1) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName g)) : (singleExpression (literal (numericLiteral 20)))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal (numericLiteral 40)))) , (propertyAssignment (propertyName (identifierName f)) : (singleExpression (literal "get f"))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o2) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName g)) : (singleExpression (literal "g"))) , (propertyAssignment (propertyName (identifierName y)) : (singleExpression (literal "y"))) , (propertyAssignment (getter get (propertyName (identifierName f))) ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression flag)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "blah"))) ))))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "get f"))) (eos ;)))))) }) })))) eos))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o1)) ))) === (singleExpression (literal (numericLiteral 60))))) )))) (eos ;)))) })) else (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o2)) ))) === (singleExpression (literal "gy")))) )))) (eos ;)))) }))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression flag) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression o2)) ))) === (singleExpression (literal "gy1")))) )))) (eos ;))))) <EOF>)