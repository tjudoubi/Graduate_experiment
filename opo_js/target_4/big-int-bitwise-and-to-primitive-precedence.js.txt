(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName sameValue)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable input)) , (formalParameterArg (assignable expected)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression input) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression message)) ))))) (eos ;)))))))) }))) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName toPrimitive)) ]) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad"))) ))))) (eos ;)))))) }))) })))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression o) & (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "2"))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Exception expected to be throwed, but executed without error"))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression (singleExpression e) . (identifierName message))) , (argument (singleExpression (literal "Bad"))) , (argument (singleExpression (singleExpression (literal "Expected to throw Error('Bad'), but got: ")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Symbol) (arguments ( (argument (singleExpression (literal "2"))) ))) & (singleExpression o))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression (literal true))) , (argument (singleExpression (literal false))) , (argument (singleExpression (literal "Exception expected to be throwed, but executed without error"))) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression assert) . (identifierName sameValue)) (arguments ( (argument (singleExpression (singleExpression e) instanceof (singleExpression TypeError))) , (argument (singleExpression (literal true))) , (argument (singleExpression (singleExpression (literal "Expected to throw TypeError, but got: ")) + (singleExpression e))) )))) eos))) })))))) <EOF>)