(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression a) . (identifierName f)) / (singleExpression (singleExpression b) . (identifierName f)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b)) , (formalParameterArg (assignable e))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression a)) }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName f)) : (singleExpression b)) }))) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression e))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: ")) + (singleExpression a)) + (singleExpression (literal " / "))) + (singleExpression b)) + (singleExpression (literal " should be "))) + (singleExpression e)) + (singleExpression (literal " but was "))) + (singleExpression result))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 1))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 101))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (singleExpression i) * (singleExpression (literal (numericLiteral 2))))) , (argument (singleExpression i)) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 9)))) , (argument (singleExpression (literal (numericLiteral 3)))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 12)))) , (argument (singleExpression (literal (numericLiteral 4)))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 32))))) , (argument (singleExpression (literal (numericLiteral 8)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 4))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 21))))) , (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 3))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 7)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 3.5)))) )))) (eos ;))))) <EOF>)