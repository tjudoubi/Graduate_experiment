(program (sourceElements (sourceElement (statement (functionDeclaration function equalsNull ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) == (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression equalsNull)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function notEqualsNull ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) != (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression notEqualsNull)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strictEqualsNull ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) === (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strictEqualsNull)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strictNotEqualsNull ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) !== (singleExpression (literal null)))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strictNotEqualsNull)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function equalsUndefined ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) == (singleExpression void (singleExpression (literal (numericLiteral 0)))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression equalsUndefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function notEqualsUndefined ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) != (singleExpression void (singleExpression (literal (numericLiteral 0)))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression notEqualsUndefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strictEqualsUndefined ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strictEqualsUndefined)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strictNotEqualsUndefined ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) !== (singleExpression void (singleExpression (literal (numericLiteral 0)))))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strictNotEqualsNull)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function isFalsey ( (formalParameterList (formalParameterArg (assignable o))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ! (singleExpression o))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression isFalsey)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable iteration)) , (formalParameterArg (assignable object)) , (formalParameterArg (assignable outcome))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression func) (arguments ( (argument (singleExpression object)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression outcome))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (literal "Bad result: ")) + (singleExpression result)) + (singleExpression (literal " on iteration "))) + (singleExpression iteration))) ))))) (eos ;)))))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsNull)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsNull)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsNull)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsNull)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsNull)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsNull)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression equalsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression notEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression strictNotEqualsUndefined)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression isFalsey)) , (argument (singleExpression i)) , (argument (singleExpression (literal null))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression isFalsey)) , (argument (singleExpression i)) , (argument (singleExpression undefined)) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression isFalsey)) , (argument (singleExpression i)) , (argument (singleExpression void (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression isFalsey)) , (argument (singleExpression i)) , (argument (singleExpression (objectLiteral { }))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression isFalsey)) , (argument (singleExpression i)) , (argument (singleExpression (singleExpression makeMasquerader) (arguments ( )))) , (argument (singleExpression (literal true))) )))) (eos ;)))) })))))) <EOF>)