(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function startTest ( (formalParameterList (formalParameterArg (assignable string)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName trimStart)) (arguments ( )))) , (argument (singleExpression expected)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName trimLeft)) (arguments ( )))) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function endTest ( (formalParameterList (formalParameterArg (assignable string)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName trimEnd)) (arguments ( )))) , (argument (singleExpression expected)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName trimRight)) (arguments ( )))) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function trimTest ( (formalParameterList (formalParameterArg (assignable string)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression string) . (identifierName trim)) (arguments ( )))) , (argument (singleExpression expected)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `    Hello   `))) , (argument (singleExpression (literal `Hello   `))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `    Hello   `))) , (argument (singleExpression (literal `    Hello`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `    Hello   `))) , (argument (singleExpression (literal `Hello`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `    日本語   `))) , (argument (singleExpression (literal `日本語   `))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `    日本語   `))) , (argument (singleExpression (literal `    日本語`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `    日本語   `))) , (argument (singleExpression (literal `日本語`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `Hello`))) , (argument (singleExpression (literal `Hello`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `Hello`))) , (argument (singleExpression (literal `Hello`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `Hello`))) , (argument (singleExpression (literal `Hello`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `日本語`))) , (argument (singleExpression (literal `日本語`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `日本語`))) , (argument (singleExpression (literal `日本語`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `日本語`))) , (argument (singleExpression (literal `日本語`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal ``))) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal ``))) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal ``))) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `    `))) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `    `))) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `    `))) , (argument (singleExpression (literal ``))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `    A`))) , (argument (singleExpression (literal `A`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `    A`))) , (argument (singleExpression (literal `    A`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `    A`))) , (argument (singleExpression (literal `A`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression startTest) (arguments ( (argument (singleExpression (literal `A    `))) , (argument (singleExpression (literal `A    `))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression endTest) (arguments ( (argument (singleExpression (literal `A    `))) , (argument (singleExpression (literal `A`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression trimTest) (arguments ( (argument (singleExpression (literal `A    `))) , (argument (singleExpression (literal `A`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName trimStart))) , (argument (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName trimLeft))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName trimEnd))) , (argument (singleExpression (singleExpression (singleExpression String) . (identifierName prototype)) . (identifierName trimRight))) )))) (eos ;))))) <EOF>)