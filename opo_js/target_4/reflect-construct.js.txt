(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression error))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "not thrown."))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression message))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "bad error: ")) + (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.construct requires the first argument be a constructor`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName forEach))) , (argument (singleExpression (arrayLiteral [ elementList ]))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.construct requires the first argument be a constructor`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (literal null))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.construct requires the third argument be a constructor if present`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (objectLiteral { }))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.construct requires the third argument be a constructor if present`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) . (identifierName forEach))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.construct requires the third argument be a constructor if present`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression (literal (numericLiteral 42)))) , (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Reflect.construct requires the second argument be an object`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName length))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "ok"))) ))))) (eos ;)))))) }) , (propertyAssignment (getter get (propertyName (numericLiteral 0))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "ng"))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression array)) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `Error: ok`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName length))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) }) , (propertyAssignment (getter get (propertyName (numericLiteral 0))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "ok"))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { functionBody }))) , (argument (singleExpression array)) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `Error: ok`))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (objectLiteral { (propertyAssignment (getter get (propertyName (identifierName length))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))))) }) , (propertyAssignment (getter get (propertyName (numericLiteral 0))) ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "ng"))) ))))) (eos ;)))))) }) })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName length)) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))))) }))) , (argument (singleExpression array)) ))) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable globalObject) = (singleExpression this))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function Hello ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression this))) , (argument (singleExpression (literal "object"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression Hello)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName result)) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))))) })))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) ))) . (identifierName result))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction (functionDeclaration function Hello ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ])) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression typeof (singleExpression this))) , (argument (singleExpression (literal "object"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression Hello)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName result)) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))))) })))) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) ))) . (identifierName result))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable newTarget) = (singleExpression (anoymousFunction function ( ) { functionBody })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression newTarget)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName result)) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))))) }))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression newTarget)) ))) . (identifierName result))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression newTarget)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName result)) = (singleExpression (singleExpression arguments) . (identifierName length)))) (eos ;)))))) }))) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression newTarget)) ))) . (identifierName result))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) eos))) (sourceElement (statement (block { (statementList (statement (classDeclaration class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName type)) = (singleExpression (literal "A")))) (eos ;)))))) })) }))) (statement (classDeclaration class B (classTail extends (singleExpression A) { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression super) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName type)) = (singleExpression (literal "B")))) (eos ;)))))) })) }))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression A)) , (argument (singleExpression (arrayLiteral [ elementList ]))) ))) . (identifierName type))) , (argument (singleExpression (literal "A"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression B)) , (argument (singleExpression (arrayLiteral [ elementList ]))) ))) . (identifierName type))) , (argument (singleExpression (literal "B"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression B)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression B)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression B) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression B)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression A)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression A) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression B)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression A)) ))) . (identifierName type))) , (argument (singleExpression (literal "B"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression B)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression B)) ))) . (identifierName type))) , (argument (singleExpression (literal "B"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression A)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression A)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression A) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression A)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression B)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression B) . (identifierName prototype))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression A)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression A)) ))) . (identifierName type))) , (argument (singleExpression (literal "A"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression A)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression B)) ))) . (identifierName type))) , (argument (singleExpression (literal "A"))) )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function nativeConstructorTest ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class DerivedMap (classTail { })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Map)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression DerivedMap)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression DerivedMap) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression map) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Map)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression DerivedMap)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName __proto__)) = (singleExpression (singleExpression Map) . (identifierName prototype)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression map) . (identifierName get)) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;)))) (sourceElement (statement (classDeclaration class FailedMap (classTail { })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression FailedMap)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Map)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression Map) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression map) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression FailedMap)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Map)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Map operation called on non-Map object`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Set)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Map)) ))) . (identifierName __proto__))) , (argument (singleExpression (singleExpression Map) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression map) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Set)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Map)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression map) . (identifierName set)) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;)))))) })))) , (argument (singleExpression (literal `TypeError: Map operation called on non-Map object`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression set) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Set)) , (argument (singleExpression (arrayLiteral [ elementList ]))) , (argument (singleExpression Map)) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Set) . (identifierName prototype)) . (identifierName add)) . (identifierName call)) (arguments ( (argument (singleExpression set)) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Set) . (identifierName prototype)) . (identifierName has)) . (identifierName call)) (arguments ( (argument (singleExpression set)) , (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression nativeConstructorTest)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression nativeConstructorTest) (arguments ( )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function Hello ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression Hello)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName construct)) ( (formalParameterList (formalParameterArg (assignable theTarget)) , (formalParameterArg (assignable argArray)) , (formalParameterArg (assignable newTarget))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression newTarget)) , (argument (singleExpression Map)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression theTarget)) , (argument (singleExpression Hello)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression argArray) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression argArray) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression argArray) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression proxy)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10)))) , (arrayElement (singleExpression (literal (numericLiteral 20))))) ]))) , (argument (singleExpression Map)) )))) , (argument (singleExpression result)) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression Map)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName construct)) ( (formalParameterList (formalParameterArg (assignable theTarget)) , (formalParameterArg (assignable argArray)) , (formalParameterArg (assignable newTarget))) ) { functionBody }) }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (functionDeclaration function Hello ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression new . target)) , (argument (singleExpression proxy)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression new . target) . (identifierName prototype))) , (argument (singleExpression (singleExpression Map) . (identifierName prototype))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression Hello)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10)))) , (arrayElement (singleExpression (literal (numericLiteral 20))))) ]))) , (argument (singleExpression proxy)) )))) , (argument (singleExpression result)) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function Hello ( ) { functionBody }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy1) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression Hello)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName construct)) ( (formalParameterList (formalParameterArg (assignable theTarget)) , (formalParameterArg (assignable argArray)) , (formalParameterArg (assignable newTarget))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression newTarget)) , (argument (singleExpression proxy2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression theTarget)) , (argument (singleExpression Hello)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression argArray) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression argArray) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression argArray) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression (literal (numericLiteral 20)))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }) }))) )))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable proxy2) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression Map)) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName construct)) ( (formalParameterList (formalParameterArg (assignable theTarget)) , (formalParameterArg (assignable argArray)) , (formalParameterArg (assignable newTarget))) ) { functionBody }) }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression Reflect) . (identifierName construct)) (arguments ( (argument (singleExpression proxy1)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 10)))) , (arrayElement (singleExpression (literal (numericLiteral 20))))) ]))) , (argument (singleExpression proxy2)) )))) , (argument (singleExpression result)) )))) (eos ;)))))) })) (arguments ( )))) ))) (eos ;))))) <EOF>)