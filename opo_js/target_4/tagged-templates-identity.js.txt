(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression actual)) ))))) ))))) (eos ;)))))))) }))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function tag ( (formalParameterList (formalParameterArg (assignable siteObject))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression templates) . (identifierName push)) (arguments ( (argument (singleExpression siteObject)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `World`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression templates) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello\n`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello\r`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello\u2028`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression templates) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\r`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\u2028`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression templates) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 3)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\\n`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\r`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\\r`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression templates) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 4)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\n${v}world`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\n${v}world`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression templates) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello${v}\nworld`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello\n${v}world`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression templates) . (identifierName length))) , (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression v) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression v) < (singleExpression (literal (numericLiteral 3))))) ; (expressionSequence (singleExpression ++ (singleExpression v))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello${v}world`)) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression v))) ) (statement (continueStatement continue (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression v)) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (singleExpression v) - (singleExpression (literal (numericLiteral 1))))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello${1}world`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression tag) `Hello${2}world`)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression v) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression v) < (singleExpression (literal (numericLiteral 3))))) ; (expressionSequence (singleExpression ++ (singleExpression v))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello${v}world`"))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression v))) ) (statement (continueStatement continue (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression v)) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (singleExpression v) - (singleExpression (literal (numericLiteral 1))))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello${1}world`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello${2}world`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "tag`Hello${3}world`"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression v) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression v) < (singleExpression (literal (numericLiteral 6))))) ; (expressionSequence (singleExpression (singleExpression v) (assignmentOperator +=) (singleExpression (literal (numericLiteral 2))))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { for (var i = 0; i < 2; ++i) tag`Hello${v}world` })()"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression v)) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (singleExpression v) + (singleExpression (literal (numericLiteral 1))))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { for (var i = 0; i < 2; ++i) tag`Hello${1}world` })()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { for (var i = 0; i < 2; ++i) tag`Hello${2}world` })()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { for (var i = 0; i < 2; ++i) tag`Hello${2}world` })()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable v) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (expressionSequence (singleExpression (singleExpression v) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression v) < (singleExpression (literal (numericLiteral 3))))) ; (expressionSequence (singleExpression ++ (singleExpression v))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { (function() { tag`Hello${v}world` })() })()"))) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression v))) ) (statement (continueStatement continue (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression v)) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (singleExpression v) - (singleExpression (literal (numericLiteral 1))))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression templates) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { (function() { for (var i = 0; i < 2; ++i) tag`Hello${1}world` })() })()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { (function() { for (var i = 0; i < 2; ++i) tag`Hello${2}world` })() })()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression (literal "(function() { (function() { for (var i = 0; i < 2; ++i) tag`Hello${2}world` })() })()"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 2)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 3)))) ]) !== (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 4)))) ]) === (singleExpression (singleExpression templates) [ (expressionSequence (singleExpression (literal (numericLiteral 5)))) ]))) , (argument (singleExpression (literal true))) )))) (eos ;))))) <EOF>)