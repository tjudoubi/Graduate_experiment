(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s1) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) . (identifierName toLocaleString)) (arguments ( ))) . (identifierName padEnd)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 31)))) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal 'aa'))) ))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (literal '')) >= (singleExpression s1))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception) != (singleExpression (literal 'Error: Out of memory')))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression undefined))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable s2) = (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression - (singleExpression (literal (numericLiteral 1))))) )) . (identifierName toLocaleString)) (arguments ( ))) . (identifierName padEnd)) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal (numericLiteral 2))) ** (singleExpression (literal (numericLiteral 31)))) - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal 'aa'))) ))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression s2) >= (singleExpression (literal '')))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression exception) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression exception) != (singleExpression (literal 'Error: Out of memory')))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "FAILED"))) (eos ;))))))) <EOF>)