(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test1 ( (formalParameterList (formalParameterArg (assignable obj))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (literal "hello")) in (singleExpression obj))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test1)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) }))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 42)))) , (propertyAssignment (propertyName (identifierName world)) : (singleExpression (literal (numericLiteral 43)))) }))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName __proto__)) : (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName hello)) : (singleExpression (literal (numericLiteral 44)))) }))) }))) , (arrayElement (singleExpression (literal true)))) ])))) ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression (singleExpression let) [ (expressionSequence (singleExpression obj) , (singleExpression result)) ]) of (expressionSequence (singleExpression array)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test1) (arguments ( (argument (singleExpression obj)) )))) , (argument (singleExpression result)) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression test1) (arguments ( (argument (singleExpression (objectLiteral { }))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))))) <EOF>)