(program (sourceElements (sourceElement (statement (functionDeclaration function logNaN ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression NaN)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logNaN)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogNaN ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logNaN) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logNaN() = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogNaN) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logZero ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logZero)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogZero ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logZero) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression - (singleExpression Infinity)))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logZero() = ")) + (singleExpression result)) + (singleExpression (literal ", expected -Infinity")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogZero) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logOne ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logOne)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogOne ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logOne) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logOne(1) = ")) + (singleExpression result)) + (singleExpression (literal ", expected 0")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogOne) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logMinusOne ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logMinusOne)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogMinusOne ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logMinusOne) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logMinusOne() = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogMinusOne) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logInfinity ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression Infinity)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logInfinity)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogInfinity ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logInfinity) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression Infinity))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logInfinity() = ")) + (singleExpression result)) + (singleExpression (literal ", expected Infinity")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogInfinity) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logMinusInfinity ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression - (singleExpression Infinity))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logMinusInfinity)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogMinusInfinity ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logMinusInfinity) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression isNaN) (arguments ( (argument (singleExpression result)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logMinusInfinity() = ")) + (singleExpression result)) + (singleExpression (literal ", expected NaN")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogMinusInfinity) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logInteger ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression (literal (numericLiteral 42)))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logInteger)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogInteger ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logInteger) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 3.7376696182833684))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logInteger() = ")) + (singleExpression result)) + (singleExpression (literal ", expected 3.7376696182833684")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogInteger) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function logDouble ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName log)) (arguments ( (argument (singleExpression (singleExpression Math) . (identifierName PI))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression logDouble)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testLogDouble ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression logDouble) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression (literal (numericLiteral 1.1447298858494002))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (literal "logDouble() = ")) + (singleExpression result)) + (singleExpression (literal ", expected 1.1447298858494002")))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testLogDouble) (arguments ( )))) (eos ;))))) <EOF>)