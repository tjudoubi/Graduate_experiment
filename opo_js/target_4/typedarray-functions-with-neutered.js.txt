(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression typedArrays) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression Int8Array)) , (arrayElement (singleExpression Uint8Array)) , (arrayElement (singleExpression Uint8ClampedArray)) , (arrayElement (singleExpression Int16Array)) , (arrayElement (singleExpression Uint16Array)) , (arrayElement (singleExpression Int32Array)) , (arrayElement (singleExpression Uint32Array)) , (arrayElement (singleExpression Float32Array)) , (arrayElement (singleExpression Float64Array))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression proto) = (singleExpression (singleExpression (singleExpression Int8Array) . (identifierName prototype)) . (identifierName __proto__)))) (eos ;)))) (sourceElement (statement (functionDeclaration function getGetter ( (formalParameterList (formalParameterArg (assignable prop))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Object) . (identifierName getOwnPropertyDescriptor)) (arguments ( (argument (singleExpression proto)) , (argument (singleExpression prop)) ))) . (identifierName get))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function unit ( ) { functionBody }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression prototypeFunctions) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression getGetter) (arguments ( (argument (singleExpression (literal "length"))) )))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) , (propertyAssignment (propertyName (identifierName result)) : (singleExpression (literal (numericLiteral 0)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression getGetter) (arguments ( (argument (singleExpression (literal "byteLength"))) )))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) , (propertyAssignment (propertyName (identifierName result)) : (singleExpression (literal (numericLiteral 0)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression getGetter) (arguments ( (argument (singleExpression (literal "byteOffset"))) )))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) , (propertyAssignment (propertyName (identifierName result)) : (singleExpression (literal (numericLiteral 0)))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName copyWithin))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName entries))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName every))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression unit))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName every))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1))))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName filter))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression unit))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName find))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName findIndex))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName forEach))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName indexOf))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName join))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName keys))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName lastIndexOf))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName map))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName reduce))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName reduceRight))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName reverse))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName set))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ elementList ])))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName set))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName set))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) )))))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName set))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression new (singleExpression (singleExpression Int32Array) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))))) , (arrayElement (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ]))) , (propertyAssignment (propertyName (identifierName error)) : (singleExpression (literal "RangeError: Offset should not be negative"))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName slice))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName some))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName sort))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName subarray))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName toString))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName values))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ elementList ]))) }))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arrays) = (singleExpression (singleExpression (singleExpression typedArrays) . (identifierName map)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable constructor))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression view) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression (singleExpression view) . (identifierName buffer))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression view)) (eos ;)))))) }))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function checkProtoFunc ( (formalParameterList (formalParameterArg (assignable testArgs))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function throwsCorrectError ( (formalParameterList (formalParameterArg (assignable elem))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression (singleExpression (singleExpression testArgs) . (identifierName func)) . (identifierName call)) (arguments ( (argument ... (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression elem)) , (arrayElement ... (singleExpression (singleExpression testArgs) . (identifierName args)))) ]))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression testArgs) . (identifierName result)) !== (singleExpression undefined))) ) (statement (block { (statementList (statement (returnStatement return (expressionSequence (singleExpression (singleExpression result) === (singleExpression (singleExpression testArgs) . (identifierName result)))) (eos ;)))) }))))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression testArgs) . (identifierName error))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression e) == (singleExpression (singleExpression testArgs) . (identifierName error)))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression e) == (singleExpression (literal "TypeError: Underlying ArrayBuffer has been detached from the view")))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal false))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression (singleExpression arrays) . (identifierName every)) (arguments ( (argument (singleExpression throwsCorrectError)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "bad")) + (singleExpression (singleExpression (singleExpression testArgs) . (identifierName func)) . (identifierName name)))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression prototypeFunctions) . (identifierName forEach)) (arguments ( (argument (singleExpression checkProtoFunc)) )))) (eos ;)))))) }))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression prototypeFunctions) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName copyWithin))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "prim"))) , (arrayElement (singleExpression (literal "prim"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName every))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName fill))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "prim"))) , (arrayElement (singleExpression (literal "prim"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName filter))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName find))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName findIndex))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName forEach))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName indexOf))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "na"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName includes))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "na"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName join))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName lastIndexOf))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "na"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName map))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName reduce))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName reduceRight))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName set))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "array"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName slice))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "prim"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName some))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName sort))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "func")))) ]))) }))) , (arrayElement (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName func)) : (singleExpression (singleExpression proto) . (identifierName subarray))) , (propertyAssignment (propertyName (identifierName args)) : (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "prim"))) , (arrayElement (singleExpression (literal "prim")))) ]))) }))) ,) ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function defaultForArg ( (formalParameterList (formalParameterArg (assignable arg)) , (formalParameterArg (assignable argNum))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression arg) === (singleExpression (literal "func")))) ) (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression argNum)) (eos ;)))))) })))) eos))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression arg) === (singleExpression (literal "array")))) ) (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2))))) ]))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression argNum)) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function callWithArgs ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable array)) , (formalParameterArg (assignable args)) , (formalParameterArg (assignable argNum))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression func) . (identifierName call)) (arguments ( (argument (singleExpression array)) , (argument ... (singleExpression args)) )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression e) != (singleExpression (literal "TypeError: Underlying ArrayBuffer has been detached from the view")))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression e)) ))))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression failed) = (singleExpression (literal false)))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression failed)) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression func)) , (arrayElement (singleExpression argNum))) ]))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkArgumentsForType) (arguments ( (argument (singleExpression func)) , (argument (singleExpression args)) , (argument (singleExpression constructor)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression defaultArgs) = (singleExpression (singleExpression (singleExpression args) . (identifierName map)) (arguments ( (argument (singleExpression defaultForArg)) ))))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) argNum =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression argNum) < (singleExpression (singleExpression args) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression argNum) ++)) (eos )))) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arg) = (singleExpression (singleExpression args) [ (expressionSequence (singleExpression argNum)) ]))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression callArgs) = (singleExpression (singleExpression (singleExpression defaultArgs) . (identifierName slice)) (arguments ( ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression arg) === (singleExpression (literal "na")))) ) (statement (continueStatement continue (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression new (singleExpression (singleExpression constructor) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression arg) === (singleExpression (literal "func")))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression callArgs) [ (expressionSequence (singleExpression argNum)) ]) = (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression (singleExpression array) . (identifierName buffer))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression func) === (singleExpression (singleExpression array) . (identifierName every))) ? (singleExpression (literal (numericLiteral 1))) : (singleExpression (literal (numericLiteral 0))))) (eos ;)))))) }))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression callWithArgs) (arguments ( (argument (singleExpression func)) , (argument (singleExpression array)) , (argument (singleExpression callArgs)) , (argument (singleExpression argNum)) )))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression arg) === (singleExpression (literal "prim")))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression callArgs) [ (expressionSequence (singleExpression argNum)) ]) = (singleExpression (objectLiteral { (propertyAssignment (propertyName [ (singleExpression (singleExpression Symbol) . (identifierName toPrimitive)) ]) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression (singleExpression array) . (identifierName buffer))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression argNum)) (eos ;)))))) }) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression callWithArgs) (arguments ( (argument (singleExpression func)) , (argument (singleExpression array)) , (argument (singleExpression callArgs)) , (argument (singleExpression argNum)) )))) (eos ;)))) })) else (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression arg) === (singleExpression (literal "array")))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression callArgs) [ (expressionSequence (singleExpression argNum)) ]) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 4)))) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression callArgs) [ (expressionSequence (singleExpression argNum)) ]) . (identifierName fill)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression desc) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression transferArrayBuffer) (arguments ( (argument (singleExpression (singleExpression array) . (identifierName buffer))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 1)))) (eos ;)))))) })))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (singleExpression callArgs) [ (expressionSequence (singleExpression argNum)) ])) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression desc)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression callWithArgs) (arguments ( (argument (singleExpression func)) , (argument (singleExpression array)) , (argument (singleExpression callArgs)) , (argument (singleExpression argNum)) )))) (eos ;)))) })) else (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression arg)) ))))) (eos ;)))))))))) }))) }))) (sourceElement (statement (functionDeclaration function checkArguments ( (formalParameterList (formalParameterArg (assignable (objectLiteral { (propertyAssignment (singleExpression func)) , (propertyAssignment (singleExpression args)) })))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression constructor) of (expressionSequence (singleExpression typedArrays)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression checkArgumentsForType) (arguments ( (argument (singleExpression func)) , (argument (singleExpression args)) , (argument (singleExpression constructor)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function test2 ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression prototypeFunctions) . (identifierName forEach)) (arguments ( (argument (singleExpression checkArguments)) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test2) (arguments ( )))) (eos ;))))) <EOF>)