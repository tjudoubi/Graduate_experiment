(program (sourceElements (sourceElement (statement (functionDeclaration function valuesAreClose ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression Math) . (identifierName abs)) (arguments ( (argument (singleExpression (singleExpression a) / (singleExpression b))) ))) - (singleExpression (literal (numericLiteral 1)))) < (singleExpression (literal (numericLiteral 1e-10))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble1 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt1 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt1)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test1 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble1) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble1(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt1) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt1(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test1)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test1) (arguments ( (argument (singleExpression (literal (numericLiteral 376.76522764377296)))) , (argument (singleExpression (literal (numericLiteral 10.81699226051569)))) , (argument (singleExpression (literal (numericLiteral 7.333951929109252e+27)))) , (argument (singleExpression (literal (numericLiteral 5.76378989575089e+25)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble2 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt2 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test2 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble2) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble2(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt2) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt2(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test2)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test2) (arguments ( (argument (singleExpression (literal (numericLiteral 376.76522764377296)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 5.81699226051569))))) , (argument (singleExpression (literal (numericLiteral 1.035180331187579e-15)))) , (argument (singleExpression (literal (numericLiteral 1.3171824310400265e-13)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble3 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble3)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt3 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt3)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test3 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble3) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble3(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt3) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt3(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test3)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test3) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression (literal (numericLiteral 10.0)))) , (argument (singleExpression (literal (numericLiteral 5763789895750892)))) , (argument (singleExpression (literal (numericLiteral 5763789895750892)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble4 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble4)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt4 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt4)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test4 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble4) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble4(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt4) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt4(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test4)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test4) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble5 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble5)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt5 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt5)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test5 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble5) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble5(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt5) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test5)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test5) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble6 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble6)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt6 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt6)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test6 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble6) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble6(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt6) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt6(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test6)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test6) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression (literal (numericLiteral 1.0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble7 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble7)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt7 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt7)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test7 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble7) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble7(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble7) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble7(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test7)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test7) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1.0))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0.026541727490454296))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0.026541727490454296))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble8 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble8)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt8 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt8)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test8 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble8) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble8(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt8) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt8(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test8)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test8) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression (literal (numericLiteral 2.0)))) , (argument (singleExpression (literal (numericLiteral 1419.5203676146407)))) , (argument (singleExpression (literal (numericLiteral 1419.5203676146407)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble9 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble9)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt9 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt9)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test9 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble9) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble9(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt9) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt9(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test9)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test9) (arguments ( (argument (singleExpression (literal (numericLiteral 37.676522764377296)))) , (argument (singleExpression (literal (numericLiteral 2.0)))) , (argument (singleExpression (literal (numericLiteral 1419.5203676146407)))) , (argument (singleExpression (literal (numericLiteral 1419.5203676146407)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble10 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble10)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt10 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt10)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test10 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble10) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt10) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test10)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test10) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 37.676522764377296))))) , (argument (singleExpression (literal (numericLiteral 3.0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 53482.591444930236))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 53482.591444930236))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleDouble11 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleDouble11)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mathPowDoubleInt11 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) )))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mathPowDoubleInt11)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function test11 ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable y)) , (formalParameterArg (assignable expected1)) , (formalParameterArg (assignable expected2))) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleDouble11) (arguments ( (argument (singleExpression x)) , (argument (singleExpression y)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected1)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleDouble(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression y)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected1))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable integerY) = (singleExpression (singleExpression y) | (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression mathPowDoubleInt11) (arguments ( (argument (singleExpression x)) , (argument (singleExpression integerY)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression (singleExpression valuesAreClose) (arguments ( (argument (singleExpression result)) , (argument (singleExpression expected2)) ))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Error: bad result, mathPowDoubleInt(")) + (singleExpression x)) + (singleExpression (literal ", "))) + (singleExpression integerY)) + (singleExpression (literal ") = "))) + (singleExpression result)) + (singleExpression (literal " expected a value close to "))) + (singleExpression expected2))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test11)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test11) (arguments ( (argument (singleExpression (literal (numericLiteral 37.676522764377296)))) , (argument (singleExpression (literal (numericLiteral 3.0)))) , (argument (singleExpression (literal (numericLiteral 53482.591444930236)))) , (argument (singleExpression (literal (numericLiteral 53482.591444930236)))) )))) (eos ;))))) <EOF>)