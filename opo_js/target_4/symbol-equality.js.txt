(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function equal ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) == (singleExpression b))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression equal)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strictEqual ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) === (singleExpression b))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strictEqual)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable s1) = (singleExpression (singleExpression Symbol) (arguments ( ))))) eos))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable s2) = (singleExpression (singleExpression Symbol) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable list) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression s1)) , (arrayElement (singleExpression s1))) ]))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression s2)) , (arrayElement (singleExpression s1))) ]))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression s1)) , (arrayElement (singleExpression s2))) ]))) , (arrayElement (singleExpression (literal false)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression s2)) , (arrayElement (singleExpression s2))) ]))) , (arrayElement (singleExpression (literal true)))) ]))) , (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression s2)) , (arrayElement (singleExpression (literal (numericLiteral 42))))) ]))) , (arrayElement (singleExpression (literal false)))) ]))) ,) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression list) . (identifierName forEach)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable set))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable pair) = (singleExpression (singleExpression set) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression set) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression equal) (arguments ( (argument (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) )))) , (argument (singleExpression result)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression strictEqual) (arguments ( (argument (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])) , (argument (singleExpression (singleExpression pair) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) )))) , (argument (singleExpression result)) )))) (eos ;)))) }))))))) }))) )))) (eos ;))))) <EOF>)