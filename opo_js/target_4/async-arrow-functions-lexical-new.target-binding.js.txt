(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable actual)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression msg) === (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (literal "")))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression msg) = (singleExpression (singleExpression (literal " for ")) + (singleExpression msg)))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "bad value")) + (singleExpression msg)) + (singleExpression (literal ": "))) + (singleExpression actual)) + (singleExpression (literal ". Expected "))) + (singleExpression expected))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function shouldBeAsync ( (formalParameterList (formalParameterArg (assignable expected)) , (formalParameterArg (assignable run)) , (formalParameterArg (assignable msg))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression actual)) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable hadError) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression run) (arguments ( ))) . (identifierName then)) (arguments ( (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable value))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression value))) (eos ;)))))) }))) , (argument (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable error))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hadError) = (singleExpression (literal true)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression actual) = (singleExpression error))) (eos ;)))))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression drainMicrotasks) (arguments ( )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression hadError)) ) (statement (throwStatement throw (expressionSequence (singleExpression actual)) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression expected)) , (argument (singleExpression actual)) , (argument (singleExpression msg)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function C1 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody (singleExpression await (singleExpression new . target)))))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function C2 ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression await (singleExpression new . target))) eos))))) })))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function C2WithAwait ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (anoymousFunction async (arrowFunctionParameters ( )) => (arrowFunctionBody { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable self) = (singleExpression new . target))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression await (singleExpression new . target))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new . target)) (eos ;)))))) })))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression C1)) , (argument (singleExpression new (singleExpression (singleExpression C1) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression C1) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression C2)) , (argument (singleExpression new (singleExpression (singleExpression C2) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression C2) (arguments ( )))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression C2WithAwait)) , (argument (singleExpression new (singleExpression (singleExpression C2WithAwait) (arguments ( ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBeAsync) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (singleExpression C2WithAwait) (arguments ( )))) )))) (eos ;))))) <EOF>)