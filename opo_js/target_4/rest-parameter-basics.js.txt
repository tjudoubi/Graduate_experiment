(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad assertion"))) ))))) eos))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression assert)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function baz ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function capture ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression b)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (singleExpression (singleExpression capture) (arguments ( ))) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression baz)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function jaz ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function capture ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capture) (arguments ( ))) === (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression jaz)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function kaz ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) eos))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression kaz)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function raz ( (formalParameterList (formalParameterArg (assignable a) = (singleExpression (literal (numericLiteral 10)))) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function capture ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression capture) (arguments ( ))) === (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ])))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression a) + (singleExpression (singleExpression b) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression raz)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function restLength ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression b) . (identifierName length))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression restLength)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArgumentsObject) (arguments ( (argument ... (singleExpression args)) )))) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression args) . (identifierName length)) === (singleExpression (singleExpression arguments) . (identifierName length)))) )))) (eos ;))) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (singleExpression args) . (identifierName length)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression i)) ]) === (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression i)) ]))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression testArgumentsObject)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function strictModeLikeArgumentsObject ( (formalParameterList (formalParameterArg (assignable a)) , (lastFormalParameterArg ... (singleExpression args))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression a))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression (literal "a")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression a))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) . (identifierName length)) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression args) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) === (singleExpression (singleExpression args) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arguments) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]) = (singleExpression (literal "b")))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression args) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) !== (singleExpression (literal "b")))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression strictModeLikeArgumentsObject)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a1) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression (literal (numericLiteral 20)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a1) instanceof (singleExpression Array))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression a1) . (identifierName length)) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression a1) [ (expressionSequence (singleExpression (literal (numericLiteral 0)))) ]) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a2) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a2) instanceof (singleExpression Array))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression a2) . (identifierName length)) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a3) = (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression (literal (numericLiteral 20)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a3) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a4) = (singleExpression (singleExpression baz) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) , (argument (singleExpression (literal (numericLiteral 20)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a4) === (singleExpression (literal (numericLiteral 30))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a5) = (singleExpression (singleExpression jaz) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression (literal "world"))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a5) === (singleExpression (literal "helloworld")))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a6) = (singleExpression (singleExpression kaz) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 40)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a6) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a7) = (singleExpression (singleExpression kaz) (arguments ( (argument (singleExpression undefined)) , (argument (singleExpression (literal (numericLiteral 40)))) ))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression a7) === (singleExpression (literal (numericLiteral 50))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression restLength) (arguments ( ))) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression restLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) ))) === (singleExpression (literal (numericLiteral 0))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression restLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))) === (singleExpression (literal (numericLiteral 1))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression restLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))) === (singleExpression (literal (numericLiteral 2))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression restLength) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 1)))) ))) === (singleExpression (literal (numericLiteral 20))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression let)) eos)) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression obj) = (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName foo)) : (singleExpression (literal (numericLiteral 40)))) })))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testArgumentsObject) (arguments ( (argument (singleExpression (literal "hello"))) , (argument (singleExpression obj)) , (argument (singleExpression (literal (numericLiteral 100)))) , (argument (singleExpression (literal (numericLiteral 12.34)))) , (argument (singleExpression (literal "world"))) , (argument (singleExpression obj)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3))))) ]))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression strictModeLikeArgumentsObject) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) , (argument (singleExpression (literal (numericLiteral 30)))) )))) (eos ;)))) })))) <EOF>)