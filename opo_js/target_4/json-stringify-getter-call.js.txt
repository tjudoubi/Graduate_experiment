(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (classDeclaration class A (classTail { (classElement (methodDefinition (getter get (propertyName (identifierName cocoa))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "Cocoa"))) (eos ;)))))) })) (classElement (methodDefinition (getter get (propertyName (identifierName cappuccino))) ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "Cappuccino"))) (eos ;)))))) })) })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression a) = (singleExpression new (singleExpression (singleExpression A) (arguments ( )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression a)) )))) , (argument (singleExpression (literal `{}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression a)) , (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal "cocoa"))) , (arrayElement (singleExpression (literal "cappuccino")))) ]))) )))) , (argument (singleExpression (literal `{"cocoa":"Cocoa","cappuccino":"Cappuccino"}`))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression array) = (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (literal (numericLiteral 0)))) , (arrayElement (singleExpression (literal (numericLiteral 1)))) , (arrayElement (singleExpression (literal (numericLiteral 2)))) , (arrayElement (singleExpression (literal (numericLiteral 3)))) , (arrayElement (singleExpression (literal (numericLiteral 4))))) ])))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression (singleExpression array) . (identifierName __proto__))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "Cocoa"))) (eos ;)))))) }))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression Object) . (identifierName defineProperty)) (arguments ( (argument (singleExpression array)) , (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression delete (singleExpression (singleExpression array) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ]))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (literal "Cappuccino"))) (eos ;)))))) }))) }))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression JSON) . (identifierName stringify)) (arguments ( (argument (singleExpression array)) )))) , (argument (singleExpression (literal `["Cappuccino","Cocoa",2,3,4]`))) )))) (eos ;))))) <EOF>)