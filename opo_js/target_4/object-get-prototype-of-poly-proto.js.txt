(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression makePolyProtoObject) (arguments ( )))) eos))) (sourceElement (statement (block { (statementList (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class C (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _field)) = (singleExpression (literal (numericLiteral 42))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName hello)) = (singleExpression (literal (numericLiteral 33))))) (eos ;)))))) })) })))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression new (singleExpression C))) (eos ;)))))) })) (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 15))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function target ( (formalParameterList (formalParameterArg (assignable object))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression (singleExpression object) . (identifierName hello))) , (arrayElement (singleExpression (singleExpression (singleExpression Object) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression object)) ))))) ]))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression target)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable polyProtoObject) = (singleExpression (singleExpression makePolyProtoObject) (arguments ( ))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable prototype) = (singleExpression (singleExpression (singleExpression Reflect) . (identifierName getPrototypeOf)) (arguments ( (argument (singleExpression polyProtoObject)) ))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression (singleExpression target) (arguments ( (argument (singleExpression polyProtoObject)) ))) [ (expressionSequence (singleExpression (literal (numericLiteral 1)))) ])) , (argument (singleExpression prototype)) )))) (eos ;))))))) <EOF>)