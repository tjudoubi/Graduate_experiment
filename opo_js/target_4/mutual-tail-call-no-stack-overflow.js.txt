(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrow ( (formalParameterList (formalParameterArg (assignable func)) , (formalParameterArg (assignable errorMessage))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable errorThrown) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable error) = (singleExpression (literal null)))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression errorThrown) = (singleExpression (literal true)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression error) = (singleExpression e))) (eos ;)))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression errorThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal 'not thrown'))) ))))) (eos ;)))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) ))) !== (singleExpression errorMessage))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal `bad error: ${String(error)}`))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function sloppyCountdown ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function even ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression n)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression odd) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function odd ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression n)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression even) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression n) % (singleExpression (literal (numericLiteral 2)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression even) (arguments ( (argument (singleExpression n)) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression odd) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function strictCountdown ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (functionDeclaration function even ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression n)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression odd) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function odd ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) == (singleExpression (literal (numericLiteral 1))))) ) (statement (returnStatement return (expressionSequence (singleExpression n)) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression even) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression n) % (singleExpression (literal (numericLiteral 2)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression even) (arguments ( (argument (singleExpression n)) )))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression odd) (arguments ( (argument (singleExpression n)) )))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrow) (arguments ( (argument (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression sloppyCountdown) (arguments ( (argument (singleExpression (literal (numericLiteral 100000)))) )))) (eos ;)))))) }))) , (argument (singleExpression (literal "RangeError: Maximum call stack size exceeded."))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression strictCountdown) (arguments ( (argument (singleExpression (literal (numericLiteral 100000)))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function odd ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression n) > (singleExpression (literal (numericLiteral 0))))) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression even) (arguments ( (argument (singleExpression n)) , (argument (singleExpression (literal (numericLiteral 0)))) )))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function even ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression odd) (arguments ( (argument (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression odd) (arguments ( (argument (singleExpression (literal (numericLiteral 100000)))) )))) (eos ;))))) <EOF>)