(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable assertion))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression typeof (singleExpression assertion)) != (singleExpression (literal "string")))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Invalid assertion."))) ))))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression assertion)) ))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression result))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal "Bad assertion: ")) + (singleExpression assertion))) ))))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression calls) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getSet) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (functionDeclaration function resetTracking ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression calls) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getSet) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression getSetProxyReplace) = (singleExpression new (singleExpression (singleExpression Proxy) (arguments ( (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName replace)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable string)) , (formalParameterArg (assignable search)) , (formalParameterArg (assignable replaceWith))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression calls) ++)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression string) . (identifierName replace)) (arguments ( (argument (singleExpression search)) , (argument (singleExpression replaceWith)) )))) (eos ;)))))) }))) }))) , (argument (singleExpression (objectLiteral { (propertyAssignment (propertyName (identifierName get)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable k))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression getSet) . (identifierName push)) (arguments ( (argument (singleExpression k)) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression o) [ (expressionSequence (singleExpression k)) ])) (eos ;)))))) }))) , (propertyAssignment (propertyName (identifierName set)) : (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable o)) , (formalParameterArg (assignable k)) , (formalParameterArg (assignable v))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression getSet) . (identifierName push)) (arguments ( (argument (singleExpression k)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) [ (expressionSequence (singleExpression k)) ]) = (singleExpression v))) (eos ;)))))) }))) }))) )))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resetTracking) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression replaceResult) = (singleExpression (singleExpression (singleExpression getSetProxyReplace) . (identifierName replace)) (arguments ( (argument (singleExpression (literal "This is a test"))) , (argument (singleExpression (literal / /g))) , (argument (singleExpression (literal "_"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal 'replaceResult == "This_is_a_test"'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal 'calls === 1'))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal 'getSet == "replace"'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression resetTracking) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression replaceResult) = (singleExpression (singleExpression (singleExpression getSetProxyReplace) . (identifierName replace)) (arguments ( (argument (singleExpression (literal "This is a test"))) , (argument (singleExpression (literal " "))) , (argument (singleExpression (literal "_"))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal 'replaceResult == "This_is a test"'))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal 'calls === 1'))) )))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (literal 'getSet == "replace"'))) )))) (eos ;))))) <EOF>)