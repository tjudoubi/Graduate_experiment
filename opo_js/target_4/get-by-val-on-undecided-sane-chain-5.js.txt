(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) eos))) (sourceElement (statement (functionDeclaration function opaqueGetByVal1 ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueGetByVal1)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable IntMaxPlusOne) = (singleExpression (singleExpression (singleExpression Math) . (identifierName pow)) (arguments ( (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 31)))) ))))) (eos ;)))) (sourceElement (statement (functionDeclaration function testUninitializedArray ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable target) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable value) = (singleExpression (singleExpression opaqueGetByVal1) (arguments ( (argument (singleExpression target)) , (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "opaqueGetByVal1() case 1 failed for i = ")) + (singleExpression i)) + (singleExpression (literal " value = "))) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Array) . (identifierName prototype)) [ (expressionSequence (singleExpression IntMaxPlusOne)) ]) = (singleExpression (literal "Uh!")))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable value) = (singleExpression (singleExpression opaqueGetByVal1) (arguments ( (argument (singleExpression target)) , (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "opaqueGetByVal1() case 2 failed for i = ")) + (singleExpression i)) + (singleExpression (literal " value = "))) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable prototypeValue) = (singleExpression (singleExpression opaqueGetByVal1) (arguments ( (argument (singleExpression target)) , (argument (singleExpression IntMaxPlusOne)) ))))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression prototypeValue) !== (singleExpression (literal "Uh!")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "prototypeValue value = ")) + (singleExpression value))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testUninitializedArray) (arguments ( )))) (eos ;)))) (sourceElement (statement (functionDeclaration function opaqueGetByVal2 ( (formalParameterList (formalParameterArg (assignable array)) , (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression array) [ (expressionSequence (singleExpression index)) ])) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression opaqueGetByVal2)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function testAccessOnEmpty ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable target) = (singleExpression new (singleExpression (singleExpression Array) (arguments ( )))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier let) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e4))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable value) = (singleExpression (singleExpression opaqueGetByVal2) (arguments ( (argument (singleExpression target)) , (argument (singleExpression i)) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression value) !== (singleExpression undefined))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (literal "opaqueGetByVal2() case 1 failed for i = ")) + (singleExpression i)) + (singleExpression (literal " value = "))) + (singleExpression value))) (eos ;)))))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier const) (variableDeclaration (assignable prototypeValue) = (singleExpression (singleExpression opaqueGetByVal2) (arguments ( (argument (singleExpression target)) , (argument (singleExpression IntMaxPlusOne)) ))))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression prototypeValue) !== (singleExpression (literal "Uh!")))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "prototypeValue value = ")) + (singleExpression value))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression testAccessOnEmpty) (arguments ( )))) (eos ;))))) <EOF>)