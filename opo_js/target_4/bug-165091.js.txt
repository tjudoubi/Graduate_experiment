(program (sourceElements (sourceElement (statement (functionDeclaration function shouldThrowSyntaxError ( (formalParameterList (formalParameterArg (assignable str)) , (formalParameterArg (assignable message))) ) { (functionBody (sourceElements (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression eval) (arguments ( (argument (singleExpression str)) )))) (eos ;))) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (literal "Expected `")) + (singleExpression str)) + (singleExpression (literal "` to throw a SyntaxError, but did not throw.")))) ))))) eos))) }) (catchProduction catch ( (assignable e) ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression e) . (identifierName constructor)) !== (singleExpression SyntaxError))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected `")) + (singleExpression str)) + (singleExpression (literal "` to throw a SyntaxError, but threw '"))) + (singleExpression e)) + (singleExpression (literal "'")))) ))))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression message) !== (singleExpression void (singleExpression (literal (numericLiteral 0))))) && (singleExpression (singleExpression (singleExpression e) . (identifierName message)) !== (singleExpression message)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression (literal "Expected `")) + (singleExpression str)) + (singleExpression (literal "` to throw SyntaxError: '"))) + (singleExpression message)) + (singleExpression (literal "', but threw '"))) + (singleExpression e)) + (singleExpression (literal "'")))) ))))) (eos ;)))))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowSyntaxError) (arguments ( (argument (singleExpression (literal "0/-async J"))) , (argument (singleExpression (literal "Unexpected identifier 'J'"))) )))) (eos <EOF>))))) <EOF>)