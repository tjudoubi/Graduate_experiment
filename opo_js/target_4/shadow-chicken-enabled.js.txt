(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable shadowChickenFunctionsOnStack) = (singleExpression (singleExpression $vm) . (identifierName shadowChickenFunctionsOnStack)))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable verbose) = (singleExpression (literal false)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression load) (arguments ( (argument (singleExpression (literal "resources/shadow-chicken-support.js"))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression initialize) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test1 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression foo)) , (arrayElement (singleExpression bar)) , (arrayElement (singleExpression baz)) , (arrayElement (singleExpression test1))) ]))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test2 ( ) { (functionBody (sourceElements (sourceElement (statement (functionDeclaration function foo ( ) { functionBody }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test3 ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "test3:"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "bob = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression bob)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "thingy = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression thingy)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "foo = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression foo)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "bar = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression bar)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "baz = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression baz)) ))))) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function bob ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "Doing bob..."))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression bob)) , (arrayElement (singleExpression thingy)) , (arrayElement (singleExpression foo)) , (arrayElement (singleExpression bar)) , (arrayElement (singleExpression baz)) , (arrayElement (singleExpression test3))) ]))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function thingy ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bob) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "Doing foo..."))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression foo)) , (arrayElement (singleExpression bar)) , (arrayElement (singleExpression baz)) , (arrayElement (singleExpression test3))) ]))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression thingy) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test4 ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "test4:"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "bob = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression bob)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "thingy = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression thingy)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "foo = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression foo)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "bar = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression bar)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "baz = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression baz)) ))))) )))) (eos ;)))) }))))) (sourceElement (statement (functionDeclaration function bob ( (formalParameterList (formalParameterArg (assignable thingyIsTail))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "Doing bob..."))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression bob)) , (arrayElement (singleExpression thingy)) , (arrayElement (singleExpression foo)) , (arrayElement (singleExpression bar)) , (arrayElement (singleExpression baz)) , (arrayElement (singleExpression test4))) ]))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function thingy ( (formalParameterList (formalParameterArg (assignable isTail))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bob) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bob) (arguments ( (argument (singleExpression isTail)) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function foo ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "Doing foo..."))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression (arrayLiteral [ (elementList (arrayElement (singleExpression foo)) , (arrayElement (singleExpression bar)) , (arrayElement (singleExpression baz)) , (arrayElement (singleExpression test4))) ]))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression thingy) (arguments ( (argument (singleExpression (literal false))) )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression thingy) (arguments ( (argument (singleExpression (literal true))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function bar ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function baz ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression bar) (arguments ( )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) (arguments ( )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test5a ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "In test5a:"))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foos) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable ttl))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ttl) <= (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression foos))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression foo)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression test5a)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression array)) )))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression ttl) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression foos)) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test5b ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "In test5b:"))) )))) (eos ;)))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foos) = (singleExpression (literal (numericLiteral 100))))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable ttl))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ttl) <= (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression foos))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression foo)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression test5b)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression array)) )))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression ttl) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression foos)) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test6 ( ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "In test6"))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "foo = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression foo)) ))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression (literal "array.push = ")) + (singleExpression (singleExpression describe) (arguments ( (argument (singleExpression (singleExpression (arrayLiteral [ elementList ])) . (identifierName push))) ))))) )))) (eos ;)))) }))))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foos) = (singleExpression (literal (numericLiteral 128))))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable ttl))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ttl) <= (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable array) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression foos))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression foo)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression array) . (identifierName push)) (arguments ( (argument (singleExpression test6)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression expectStack) (arguments ( (argument (singleExpression array)) )))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression ttl) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression foos)) )))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression verbose)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (literal "Done with test6."))) )))) (eos ;)))))))) })))) )) (arguments ( )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (anoymousFunction (functionDeclaration function test7 ( ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable foos) = (singleExpression (literal (numericLiteral 200000))))) (eos ;)))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable ttl))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression ttl) <= (singleExpression (literal (numericLiteral 1))))) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable stack) = (singleExpression (singleExpression shadowChickenFunctionsOnStack) (arguments ( ))))) (eos ;))) (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable expectedStack) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expectedStack) . (identifierName push)) (arguments ( (argument (singleExpression shadowChickenFunctionsOnStack)) )))) (eos ;))) (statement (iterationStatement while ( (expressionSequence (singleExpression (singleExpression (singleExpression expectedStack) . (identifierName length)) < (singleExpression (singleExpression (singleExpression stack) . (identifierName length)) - (singleExpression (literal (numericLiteral 2)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expectedStack) . (identifierName push)) (arguments ( (argument (singleExpression foo)) )))) (eos ;))))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expectedStack) . (identifierName push)) (arguments ( (argument (singleExpression test7)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression expectedStack) . (identifierName push)) (arguments ( (argument (singleExpression stackTop)) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression compareStacks) (arguments ( (argument (singleExpression stack)) , (argument (singleExpression expectedStack)) )))) (eos ;))) (statement (returnStatement return (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression (singleExpression ttl) - (singleExpression (literal (numericLiteral 1))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression foos)) )))) (eos ;)))))) })))) )) (arguments ( )))) (eos ;))))) <EOF>)