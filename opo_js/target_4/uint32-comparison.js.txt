(program (sourceElements (sourceElement (statement (functionDeclaration function shouldBe ( (formalParameterList (formalParameterArg (assignable actual)) , (formalParameterArg (assignable expected))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression actual) !== (singleExpression expected))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (singleExpression (literal 'bad value: ')) + (singleExpression actual))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function above ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) > (singleExpression ( (expressionSequence (singleExpression (singleExpression b) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression above)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function aboveOrEqual ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) >= (singleExpression ( (expressionSequence (singleExpression (singleExpression b) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression aboveOrEqual)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function below ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) < (singleExpression ( (expressionSequence (singleExpression (singleExpression b) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression below)) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function belowOrEqual ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) >>> (singleExpression (literal (numericLiteral 0))))) )) <= (singleExpression ( (expressionSequence (singleExpression (singleExpression b) >>> (singleExpression (literal (numericLiteral 0))))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression belowOrEqual)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (functionDeclaration function aboveTest ( ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>))) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1e5))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 20)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 0)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 0))))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 0)))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) , (argument (singleExpression (literal true))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 0xffffffff)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression (literal (numericLiteral 0xffffffff)))) , (argument (singleExpression (literal (numericLiteral 0xffffffff)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 0xffffffff)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldBe) (arguments ( (argument (singleExpression (singleExpression above) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1))))) , (argument (singleExpression (literal (numericLiteral 0xfffffffff)))) )))) , (argument (singleExpression (literal false))) )))) (eos ;)))) })))) } ( ) ) ; ( function aboveOrEqualTest ( ) { for ( let i = 0 ; i < 1e5 ; ++ i ) { shouldBe ( aboveOrEqual ( 0 , 20 ) , false ) ; shouldBe ( aboveOrEqual ( 0 , 0 ) , true ) ; shouldBe ( aboveOrEqual ( 0 , - 0 ) , true ) ; shouldBe ( aboveOrEqual ( - 1 , 0 ) , true ) ; shouldBe ( aboveOrEqual ( - 1 , - 1 ) , true ) ; shouldBe ( aboveOrEqual ( - 1 , 1 ) , true ) ; shouldBe ( aboveOrEqual ( 1 , - 1 ) , false ) ; shouldBe ( aboveOrEqual ( 1 , 0xffffffff ) , false ) ; shouldBe ( aboveOrEqual ( 0xffffffff , 0xffffffff ) , true ) ; shouldBe ( aboveOrEqual ( - 1 , 0xffffffff ) , true ) ; shouldBe ( aboveOrEqual ( - 1 , 0xfffffffff ) , true ) ; } } ( ) ) ; ( function belowTest ( ) { for ( let i = 0 ; i < 1e5 ; ++ i ) { shouldBe ( below ( 0 , 20 ) , true ) ; shouldBe ( below ( 0 , 0 ) , false ) ; shouldBe ( below ( 0 , - 0 ) , false ) ; shouldBe ( below ( - 1 , 0 ) , false ) ; shouldBe ( below ( - 1 , - 1 ) , false ) ; shouldBe ( below ( - 1 , 1 ) , false ) ; shouldBe ( below ( 1 , - 1 ) , true ) ; shouldBe ( below ( 1 , 0xffffffff ) , true ) ; shouldBe ( below ( 0xffffffff , 0xffffffff ) , false ) ; shouldBe ( below ( - 1 , 0xffffffff ) , false ) ; shouldBe ( below ( - 1 , 0xfffffffff ) , false ) ; } } ( ) ) ; ( function belowOrEqualTest ( ) { for ( let i = 0 ; i < 1e5 ; ++ i ) { shouldBe ( belowOrEqual ( 0 , 20 ) , true ) ; shouldBe ( belowOrEqual ( 0 , 0 ) , true ) ; shouldBe ( belowOrEqual ( 0 , - 0 ) , true ) ; shouldBe ( belowOrEqual ( - 1 , 0 ) , false ) ; shouldBe ( belowOrEqual ( - 1 , - 1 ) , true ) ; shouldBe ( belowOrEqual ( - 1 , 1 ) , false ) ; shouldBe ( belowOrEqual ( 1 , - 1 ) , true ) ; shouldBe ( belowOrEqual ( 1 , 0xffffffff ) , true ) ; shouldBe ( belowOrEqual ( 0xffffffff , 0xffffffff ) , true ) ; shouldBe ( belowOrEqual ( - 1 , 0xffffffff ) , true ) ; shouldBe ( belowOrEqual ( - 1 , 0xfffffffff ) , true ) ; } } ( ) ) ;)