(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression a) !== (singleExpression b))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression (literal "Bad!"))) ))))) (eos ;)))))))) }))) (sourceElement (statement (functionDeclaration function negateBigInt ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression n))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression negateBigInt)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression negateBigInt) (arguments ( (argument (singleExpression (literal (bigintLiteral 100n)))) )))) , (argument (singleExpression - (singleExpression (literal (bigintLiteral 100n))))) )))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression negateBigInt) (arguments ( (argument (singleExpression - (singleExpression (literal (bigintLiteral 0x1fffffffffffff01n))))) )))) , (argument (singleExpression (literal (bigintLiteral 0x1fffffffffffff01n)))) )))) (eos ;)))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression numberOfDFGCompiles) (arguments ( (argument (singleExpression negateBigInt)) ))) > (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed negateBigInt(). We should have compiled a single negate for the BigInt type."))) (eos ;)))))) (sourceElement (statement (functionDeclaration function negateBigIntSpecializedToInt ( (formalParameterList (formalParameterArg (assignable n))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression n))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression negateBigIntSpecializedToInt)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression negateBigIntSpecializedToInt) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression negateBigIntSpecializedToInt) (arguments ( (argument (singleExpression (literal (bigintLiteral 100n)))) )))) , (argument (singleExpression - (singleExpression (literal (bigintLiteral 100n))))) )))) (eos ;)))) (sourceElement (statement (functionDeclaration function mixedSpeculationNegateBigInt ( (formalParameterList (formalParameterArg (assignable n)) , (formalParameterArg (assignable arr))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression - (singleExpression ( (expressionSequence (singleExpression - (singleExpression ( (expressionSequence (singleExpression - (singleExpression n))) )))) )))) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression mixedSpeculationNegateBigInt)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i =))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression mixedSpeculationNegateBigInt) (arguments ( (argument (singleExpression (literal (numericLiteral 100)))) )))) , (argument (singleExpression - (singleExpression (literal (numericLiteral 100))))) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression mixedSpeculationNegateBigInt) (arguments ( (argument (singleExpression - (singleExpression (literal (bigintLiteral 0x1fffffffffffff01n))))) )))) , (argument (singleExpression (literal (bigintLiteral 0x1fffffffffffff01n)))) )))) (eos ;)))))) }))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression numberOfDFGCompiles) (arguments ( (argument (singleExpression mixedSpeculationNegateBigInt)) ))) > (singleExpression (literal (numericLiteral 1))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (literal "Failed mixedSpeculationNegateBigInt(). We should have compiled a single negate for the BigInt type."))) (eos ;))))))) <EOF>)