(program (sourceElements (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable a)) , (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression a) + (singleExpression b)))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression result)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) + (singleExpression b))) )) + (singleExpression result)) + (singleExpression this))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName f))) (eos ;)))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable x))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Number) . (identifierName prototype)) . (identifierName valueOf)) = (singleExpression (anoymousFunction function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable globalCounter) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (functionDeclaration function runWithNumber ( (formalParameterList (formalParameterArg (assignable num))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable test) = (singleExpression (singleExpression Function) (arguments ( (argument (singleExpression (literal `this_, a, b, x_`))) , (argument (singleExpression (literal `        x = x_;        var result = foo.call(this_, a, b);        if (result != (a + b) * 2 + x_)            throw new Error("Error: bad result: " + result);        return ${globalCounter++};    `))) ))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (literal (numericLiteral 1)))) , (argument (singleExpression (literal (numericLiteral 2)))) , (argument (singleExpression (literal (numericLiteral 100)))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression (literal (numericLiteral 2000000000)))) , (argument (singleExpression (literal (numericLiteral 2000000000)))) , (argument (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression (literal (numericLiteral 5)))) , (argument (singleExpression num)) , (argument (singleExpression num)) , (argument (singleExpression (literal (numericLiteral 1000)))) )))) (eos ;)))) }) (catchProduction catch ( (assignable error) ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argument (singleExpression (singleExpression String) (arguments ( (argument (singleExpression error)) )))) )))) (eos ;)))) }))))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 536870911)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 536870912)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 536870913)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 536870914)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 1073741773)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 1073741774)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 1073741775)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression (literal (numericLiteral 1073741776)))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 536870913))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 536870914))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 536870915))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1073741823))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1073741824))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1073741825))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argument (singleExpression - (singleExpression (literal (numericLiteral 1073741826))))) )))) (eos ;))))) <EOF>)