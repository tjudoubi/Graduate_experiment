(program (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable n) = (singleExpression (literal (numericLiteral 10000000))))) (eos ;)))) (sourceElement (statement (functionDeclaration function bar ( (formalParameterList (formalParameterArg (assignable f))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression (literal (numericLiteral 10)))) )))) (eos ;)))))) }))) (sourceElement (statement (functionDeclaration function foo ( (formalParameterList (formalParameterArg (assignable b))) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable imUndefined))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable baz))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable set) = (singleExpression (anoymousFunction function ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression ( (expressionSequence (singleExpression imUndefined) , (singleExpression baz)) ))) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) = (singleExpression (literal (numericLiteral 40))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argument (singleExpression set)) )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 10))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad: ")) + (singleExpression result))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression baz) !== (singleExpression (literal (numericLiteral 40))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad: ")) + (singleExpression baz))) (eos ;))))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression imUndefined) !== (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression imUndefined))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (variableDeclarationList (varModifier var) (variableDeclaration (assignable i) = (singleExpression (literal (numericLiteral 0))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable result) = (singleExpression (singleExpression foo) (arguments ( (argument (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 100))))) )))) ))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;)))))) })))))) <EOF>)