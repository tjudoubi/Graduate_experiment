(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable m) = (singleExpression (literal "Bad!")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))) }))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) , (argument (singleExpression (singleExpression iters) = (singleExpression (literal (numericLiteral 1000))))) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression iters))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function func ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression func)) )))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable n) = (singleExpression (literal (numericLiteral 2))))) (eos ;)))) (sourceElement (statement (variableStatement (variableDeclarationList (varModifier var) (variableDeclaration (assignable prototype) = (singleExpression (objectLiteral { })))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression prep) (arguments ( (argument (singleExpression index)) , (argument (singleExpression i)) , (argument (singleExpression A)) , (argument (singleExpression B)) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression index) === (singleExpression ( (expressionSequence (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) ))) && (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 5000)))))) ) statement)) (statement {)) <missing '}'>)))) <EOF>)