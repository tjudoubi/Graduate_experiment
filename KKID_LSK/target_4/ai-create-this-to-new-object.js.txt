(program (sourceElements (sourceElement (statement (functionDeclaration function assert ( (formalParameterList (formalParameterArg (assignable b)) , (formalParameterArg (assignable m) = (singleExpression (literal "Bad!")))) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argument (singleExpression m)) ))))) (eos ;)))) }))))))) }))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argument (singleExpression f)) , (argument (singleExpression (singleExpression iters) = (singleExpression (literal (numericLiteral 1000))))) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression iters))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argument (singleExpression i)) )))) (eos ;)))) }))) (sourceElement (statement (functionDeclaration function func ( (formalParameterList (formalParameterArg (assignable x))) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression func)) )))) (eos ;)))) (sourceElement statement) (sourceElement (statement function)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression check) (arguments ( (argument (singleExpression index)) , (argument (singleExpression arr)) , (argument (singleExpression B)) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( (singleExpression let) i =)) (statement (expressionStatement (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos )))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argument (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression i)) ]) instanceof (singleExpression B))) )))) (eos ;)))) }))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argument (singleExpression check)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression (anoymousFunction (functionDeclaration function body ( (formalParameterList (formalParameterArg (assignable index))) ) { (functionBody (sourceElements (sourceElement (statement (classDeclaration class A (classTail { (classElement (methodDefinition (propertyName (identifierName constructor)) ( (formalParameterList (formalParameterArg (assignable x)) , (formalParameterArg (assignable f) = (singleExpression func))) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _value)) = (singleExpression x))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _func)) = (singleExpression f))) (eos ;)))))) })) })))) (sourceElement (statement (classDeclaration class B (classTail extends (singleExpression A) { })))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression let)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression arr) = (singleExpression (arrayLiteral [ elementList ])))) (eos ;)))) (sourceElement (statement (iterationStatement for ( (singleExpression let) i))))) <missing '}'>))) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) ++)) (eos ))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression arr) . (identifierName push)) (arguments ( (argument (singleExpression new (singleExpression (singleExpression B) (arguments ( (argument (singleExpression (literal (numericLiteral 20)))) ))))) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression check) (arguments ( (argument (singleExpression index)) , (argument (singleExpression arr)) , (argument (singleExpression B)) )))) (eos ;))))) } , 8 ) ;)