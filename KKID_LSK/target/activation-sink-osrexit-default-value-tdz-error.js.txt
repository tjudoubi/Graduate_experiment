(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration n (initialiser = (singleExpression (literal (numericLiteral 10000000)))))) (eos ;)))) (sourceElement (functionDeclaration function shouldThrowTDZ ( (formalParameterList func) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration hasThrown (initialiser = (singleExpression (literal false))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( e ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName name)) . (identifierName indexOf)) (arguments ( (argumentList (singleExpression (literal "ReferenceError"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hasThrown) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression hasThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression (literal "Did not throw TDZ error"))) ))))) (eos ;)))))))) })) (sourceElement (functionDeclaration function bar ( (formalParameterList f) ) { functionBody })) (sourceElement (functionDeclaration function foo ( (formalParameterList b) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration set (initialiser = (singleExpression function ( (formalParameterList x) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression tdzPerpetrator)) (eos ;)))))) })))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression OSRExit) (arguments ( )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argumentList (singleExpression set)) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression tdzPerpetrator)) (eos ;)))) }))))) }))))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration tdzPerpetrator)) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression shouldThrowTDZ)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( var (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement var (variableDeclarationList (variableDeclaration bool (initialiser = (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 100))))) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression bool)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression shouldThrowTDZ) (arguments ( (argumentList (singleExpression function ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argumentList (singleExpression bool)) )))) (eos ;)))))) })) )))) (eos ;))) else (statement (block { (statementList (statement (variableStatement var (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (singleExpression foo) (arguments ( (argumentList (singleExpression bool)) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;)))))) }))))) })))))) <EOF>)