(program (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (literal "use strict"))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration n (initialiser = (singleExpression (literal (numericLiteral 10000000)))))) (eos ;)))) (sourceElement (functionDeclaration function shouldThrowTDZ ( (formalParameterList func) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration hasThrown (initialiser = (singleExpression (literal false))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression func) (arguments ( )))) (eos ;)))) }) (catchProduction catch ( e ) (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression (singleExpression e) . (identifierName name)) . (identifierName indexOf)) (arguments ( (argumentList (singleExpression (literal "ReferenceError"))) ))) !== (singleExpression - (singleExpression (literal (numericLiteral 1)))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression hasThrown) = (singleExpression (literal true)))) (eos ;)))))) }))))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression hasThrown))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression (literal "Did not throw TDZ error"))) ))))) (eos ;)))))))) })) (sourceElement (functionDeclaration function bar ( (formalParameterList f) ) { functionBody })) sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argumentList (singleExpression b)) )))) eos))) (sourceElement statement) (sourceElement (statement { let)) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration set (initialiser = (singleExpression function ( (formalParameterList x) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression tdzPerpetrator)) (eos ;)))))) })))) eos))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression OSRExit) (arguments ( )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argumentList (singleExpression set)) )))) (eos ;))) (statement (returnStatement return (expressionSequence (singleExpression tdzPerpetrator)) (eos ;)))) }))))) })))))) let tdzPerpetrator ; return result ; } noInline ( bar ) ; noInline ( foo ) ; noInline ( shouldThrowTDZ ) ; for ( var i = 0 ; i < n ; i ++ ) { var bool = ! ( i % 100 ) ; if ( bool ) shouldThrowTDZ ( function ( ) { foo ( bool ) ; } ) ; else { var result = foo ( bool ) ; if ( result != 0 ) throw "Error: bad result: " + result ; } })