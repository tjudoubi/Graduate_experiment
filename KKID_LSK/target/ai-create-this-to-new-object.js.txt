(program (sourceElements sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression b) , (singleExpression (singleExpression m) = (singleExpression (literal "Bad!")))) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression m)) ))))) (eos ;)))) }))))) }))) sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argumentList (singleExpression f) , (singleExpression (singleExpression iters) = (singleExpression (literal (numericLiteral 1000))))) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( let (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression iters))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argumentList (singleExpression i)) )))) (eos ;)))))) }))) (sourceElement (functionDeclaration function func ( (formalParameterList x) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression func)) )))) (eos ;)))) (sourceElement (functionDeclaration function check ( (formalParameterList index , arr , B) ) { (functionBody (sourceElements (sourceElement (statement (iterationStatement for ( let (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression (singleExpression (singleExpression arr) [ (expressionSequence (singleExpression i)) ]) instanceof (singleExpression B))) )))) (eos ;)))))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression check)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression test)) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression function body ( (formalParameterList index) ) { functionBody class)) <missing ')'>) A) eos))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression constructor) (arguments ( (argumentList (singleExpression x) , (singleExpression (singleExpression f) = (singleExpression func))) )))) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _value)) = (singleExpression x))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName _func)) = (singleExpression f))) (eos ;)))) }))) })))) class B extends A { } let arr = [ ] ; for ( let i = 0 ; i < 1000 ; i ++ ) arr . push ( new B ( 20 ) ) ; check ( index , arr , B ) ; } , 8 ) ;)