(program (sourceElements (sourceElement (functionDeclaration function assert ( (formalParameterList a , message) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression message)) ))))) (eos ;)))))))) })) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration o (initialiser = (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName valueOf)) : (singleExpression function ( ) { (functionBody (sourceElements (sourceElement (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression (literal "Oops"))) ))))) (eos ;)))))) }))) }))))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement let (variableDeclarationList (variableDeclaration n (initialiser = (singleExpression (singleExpression (singleExpression Symbol) (arguments ( (argumentList (singleExpression (literal "3"))) ))) + (singleExpression o))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression (literal false)) , (singleExpression (singleExpression message) + (singleExpression (literal ": Should throw Error, but executed without exception")))) )))) (eos ;)))) }) (catchProduction catch ( e ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression (singleExpression (singleExpression e) . (identifierName message)) === (singleExpression (literal "Oops"))) , (singleExpression (singleExpression (literal "Expected Error('Oops'), got: ")) + (singleExpression e))) )))) (eos ;)))) }))))) (sourceElement (statement (tryStatement try (block { (statementList (statement (variableStatement let (variableDeclarationList (variableDeclaration n (initialiser = (singleExpression (singleExpression o) + (singleExpression (singleExpression Symbol) (arguments ( (argumentList (singleExpression (literal "3"))) ))))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression (literal false)) , (singleExpression (singleExpression message) + (singleExpression (literal ": Should throw Error, but executed without exception")))) )))) (eos ;)))) }) (catchProduction catch ( e ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression (singleExpression (singleExpression e) . (identifierName message)) === (singleExpression (literal "Oops"))) , (singleExpression (singleExpression (literal "Expected Error('Oops'), got: ")) + (singleExpression e))) )))) (eos ;)))) })))))) <EOF>)