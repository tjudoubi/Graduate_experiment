(program (sourceElements (sourceElement (functionDeclaration function assert ( (formalParameterList a , message) ) { (functionBody (sourceElements (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression a))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression message)) ))))) (eos ;)))))))) }))) let o = { valueOf : function ( ) { throw new Error ( "Oops" ) ; } } ; try { let n = Symbol ( "3" ) + o ; assert ( false , message + ": Should throw Error, but executed without exception" ) ; } catch ( e ) { assert ( e . message === "Oops" , "Expected Error('Oops'), got: " + e ) ; } try { let n = o + Symbol ( "3" ) ; assert ( false , message + ": Should throw Error, but executed without exception" ) ; } catch ( e ) { assert ( e . message === "Oops" , "Expected Error('Oops'), got: " + e ) ; })