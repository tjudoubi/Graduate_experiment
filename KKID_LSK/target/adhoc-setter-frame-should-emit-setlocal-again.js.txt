(program (sourceElements (sourceElement (functionDeclaration function X ( ) { functionBody })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression X) . (identifierName prototype)) . (identifierName __defineSetter__))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (literal 'f')) , (singleExpression function * ( ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression arguments)) (eos ;)))))) })) ))) (eos ;)))) (sourceElement (functionDeclaration function foo ( (formalParameterList o) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) + (singleExpression (literal '')))) (eos ;)))) (sourceElement (statement (iterationStatement for ( var (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression o) . (identifierName f)) = (singleExpression (literal (numericLiteral 0))))) (eos ;)))) }))))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement iterationStatement)) (sourceElement (statement (iterationStatement for))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression (singleExpression let i) = (singleExpression (literal (numericLiteral 0))))) <missing ')'>)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 1000))))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression ++ (singleExpression i))) (eos ))))) (sourceElement (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression foo) (arguments ( (argumentList (singleExpression new (singleExpression (singleExpression X) (arguments ( ))))) )))) (eos ;)))) })))) <EOF>)