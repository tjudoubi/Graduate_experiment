(program (sourceElements (sourceElement (functionDeclaration function get ( (formalParameterList value , prop) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (singleExpression value) [ (expressionSequence (singleExpression prop)) ])) (eos ;)))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression get)) )))) (eos ;)))) (sourceElement (functionDeclaration function foo ( (formalParameterList record , key , attribute) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration attrs (initialiser = (singleExpression (singleExpression get) (arguments ( (argumentList (singleExpression this) , (singleExpression (literal 'attrs'))) )))))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration value (initialiser = (singleExpression (singleExpression get) (arguments ( (argumentList (singleExpression record) , (singleExpression key)) ))))) , (variableDeclaration type (initialiser = (singleExpression (singleExpression attribute) . (identifierName type))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression type)) ) (statement (block { (statementList (statement (variableStatement var (variableDeclarationList (variableDeclaration transform (initialiser = (singleExpression (singleExpression (singleExpression this) . (identifierName transformFor)) (arguments ( (argumentList (singleExpression type)) )))))) (eos ;))) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression value) = (singleExpression (singleExpression (singleExpression transform) . (identifierName serialize)) (arguments ( (argumentList (singleExpression value)) ))))) (eos ;)))) }))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression key) = (singleExpression (singleExpression (singleExpression attrs) && (singleExpression (singleExpression attrs) [ (expressionSequence (singleExpression key)) ])) || (singleExpression ( (expressionSequence (singleExpression (singleExpression (singleExpression this) . (identifierName keyForAttribute)) ? (singleExpression (singleExpression (singleExpression this) . (identifierName keyForAttribute)) (arguments ( (argumentList (singleExpression key)) ))) : (singleExpression key))) ))))) (eos ;)))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName key)) : (singleExpression key)) , (propertyAssignment (propertyName (identifierName value)) : (singleExpression value))) }))) (eos ;)))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration thisValue (initialiser = (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName transformFor)) : (singleExpression function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName serialize)) : (singleExpression function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression (objectLiteral { }))) eos))))) }))) }))) eos))))) }))) }))))) (eos ;)))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration record (initialiser = (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName key)) : (singleExpression (literal "hello")))) }))))) (eos ;)))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration record2 (initialiser = (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName key)) : (singleExpression (literal true)))) }))))) (eos ;)))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration key (initialiser = (singleExpression (literal "key"))))) (eos ;)))) (sourceElement (statement (variableStatement let (variableDeclarationList (variableDeclaration attribute (initialiser = (singleExpression (objectLiteral { (propertyNameAndValueList (propertyAssignment (propertyName (identifierName type)) : (singleExpression (literal "type")))) }))))) (eos ;)))) (sourceElement (statement (iterationStatement for ( ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 100000))))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 2)))) === (singleExpression (literal (numericLiteral 0))))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName call)) (arguments ( (argumentList (singleExpression thisValue) , (singleExpression record) , (singleExpression key) , (singleExpression attribute)) )))) (eos ;))) else (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression foo) . (identifierName call)) (arguments ( (argumentList (singleExpression thisValue) , (singleExpression record2) , (singleExpression key) , (singleExpression attribute)) )))) (eos ;)))))) })))))) <EOF>)