(program (sourceElements sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression assert) (arguments ( (argumentList (singleExpression b) , (singleExpression (singleExpression m) = (singleExpression (literal "Bad!")))) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression ! (singleExpression b))) ) (statement (block { (statementList (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression m)) ))))) (eos ;)))) }))))) }))) sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argumentList (singleExpression f) , (singleExpression (singleExpression iters) = (singleExpression (literal (numericLiteral 1000))))) )))) eos))) (sourceElement (statement (block { (statementList (statement (iterationStatement for ( let (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression iters))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression f) (arguments ( (argumentList (singleExpression i)) )))) (eos ;)))))) }))) (sourceElement (functionDeclaration function func ( (formalParameterList x) ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression func)) )))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration n (initialiser = (singleExpression (literal (numericLiteral 2)))))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration prototype (initialiser = (singleExpression (objectLiteral { }))))) (eos ;)))) sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression prep) (arguments ( (argumentList (singleExpression index) , (singleExpression i) , (singleExpression A) , (singleExpression B)) )))) eos))) (sourceElement (statement (block { (statementList (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression (singleExpression index) === (singleExpression ( (expressionSequence (singleExpression (singleExpression n) - (singleExpression (literal (numericLiteral 1))))) ))) && (singleExpression (singleExpression i) === (singleExpression (literal (numericLiteral 5000)))))) ) statement)) (statement {)) <missing '}'>)))) <EOF>)