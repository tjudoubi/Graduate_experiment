(program (sourceElements (sourceElement (functionDeclaration function foo ( (formalParameterList a , b) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (singleExpression a) + (singleExpression b))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression result)) ) (statement (returnStatement return (expressionSequence (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) + (singleExpression b))) )) + (singleExpression result)) + (singleExpression this))) (eos ;))) else (statement (returnStatement return (expressionSequence (singleExpression (singleExpression this) . (identifierName f))) (eos ;)))))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration x)) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression (singleExpression (singleExpression Number) . (identifierName prototype)) . (identifierName valueOf)) = (singleExpression function ( ) { (functionBody (sourceElements (sourceElement (statement (returnStatement return (expressionSequence (singleExpression x)) (eos ;)))))) }))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration globalCounter (initialiser = (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) sourceElement (sourceElement function) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression runWithNumber) (arguments ( (argumentList (singleExpression num)) )))) eos))) (sourceElement (statement (block { (statementList (statement (variableStatement var (variableDeclarationList (variableDeclaration test (initialiser = (singleExpression Function)))) eos)) (statement (expressionStatement (expressionSequence (singleExpression ( (expressionSequence (singleExpression ` this_) , (singleExpression a) , (singleExpression b) , (singleExpression x_)) `) , (singleExpression (singleExpression ` x) = (singleExpression x_))) (eos ;))) (statement (variableStatement var (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (singleExpression (singleExpression foo) . (identifierName call)) (arguments ( (argumentList (singleExpression this_) , (singleExpression a) , (singleExpression b)) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (singleExpression (singleExpression ( (expressionSequence (singleExpression (singleExpression a) + (singleExpression b))) )) * (singleExpression (literal (numericLiteral 2)))) + (singleExpression x_)))) ) (statement (throwStatement throw (expressionSequence (singleExpression new (singleExpression (singleExpression Error) (arguments ( (argumentList (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) ))))) (eos ;))))) (statement (returnStatement return (expressionSequence (singleExpression $)) eos)) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression globalCounter) ++)) eos))) })) (statement (emptyStatement ;))) ` )))) (sourceElement (statement (emptyStatement ;))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression test)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( var (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression (literal (numericLiteral 10000))))) ; (expressionSequence (singleExpression ++ (singleExpression i))) ) (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argumentList (singleExpression (literal (numericLiteral 5))) , (singleExpression (literal (numericLiteral 1))) , (singleExpression (literal (numericLiteral 2))) , (singleExpression (literal (numericLiteral 100)))) )))) (eos ;)))))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argumentList (singleExpression (literal (numericLiteral 5))) , (singleExpression (literal (numericLiteral 2000000000))) , (singleExpression (literal (numericLiteral 2000000000))) , (singleExpression (literal (numericLiteral 1)))) )))) (eos ;)))) (sourceElement (statement (tryStatement try (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression test) (arguments ( (argumentList (singleExpression (literal (numericLiteral 5))) , (singleExpression num) , (singleExpression num) , (singleExpression (literal (numericLiteral 1000)))) )))) (eos ;)))) }) (catchProduction catch ( error ) (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression print) (arguments ( (argumentList (singleExpression (singleExpression String) (arguments ( (argumentList (singleExpression error)) )))) )))) (eos ;)))) })))))) } runWithNumber ( 536870911 ) ; runWithNumber ( 536870912 ) ; runWithNumber ( 536870913 ) ; runWithNumber ( 536870914 ) ; runWithNumber ( 1073741773 ) ; runWithNumber ( 1073741774 ) ; runWithNumber ( 1073741775 ) ; runWithNumber ( 1073741776 ) ; runWithNumber ( - 536870913 ) ; runWithNumber ( - 536870914 ) ; runWithNumber ( - 536870915 ) ; runWithNumber ( - 1073741823 ) ; runWithNumber ( - 1073741824 ) ; runWithNumber ( - 1073741825 ) ; runWithNumber ( - 1073741826 ) ;)