(program (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration n (initialiser = (singleExpression (literal (numericLiteral 10000000)))))) (eos ;)))) (sourceElement (functionDeclaration function bar ( (formalParameterList set) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (singleExpression set) (arguments ( (argumentList (singleExpression (literal (numericLiteral 0)))) )))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) !== (singleExpression void (singleExpression (literal (numericLiteral 0)))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression result))) (eos ;)))))))) })) (sourceElement (functionDeclaration function foo ( (formalParameterList b) ) { (functionBody (sourceElements (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (literal (numericLiteral 0)))))) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration imUndefined)) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration baz)) (eos ;)))) (sourceElement (statement (variableStatement var (variableDeclarationList (variableDeclaration set (initialiser = (singleExpression function ( (formalParameterList x) ) { (functionBody (sourceElements (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression result) = (singleExpression x))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression baz) !== (singleExpression (literal (numericLiteral 50))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad value: ")) + (singleExpression baz))) (eos ;)))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression imUndefined)) (eos ;)))))) })))) eos))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression baz) = (singleExpression (literal (numericLiteral 50))))) (eos ;)))) (sourceElement (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression OSRExit) (arguments ( )))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression b)) ) (statement (block { (statementList (statement (expressionStatement (expressionSequence (singleExpression (singleExpression bar) (arguments ( (argumentList (singleExpression set)) )))) (eos ;)))) })))) (statement (returnStatement return (expressionSequence (singleExpression (literal (numericLiteral 0)))) (eos ;)))) }))))) (sourceElement (statement (returnStatement return (expressionSequence (singleExpression result)) (eos ;)))))) })) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression bar)) )))) (eos ;)))) (sourceElement (statement (expressionStatement (expressionSequence (singleExpression (singleExpression noInline) (arguments ( (argumentList (singleExpression foo)) )))) (eos ;)))) (sourceElement (statement (iterationStatement for ( var (variableDeclarationList (variableDeclaration i (initialiser = (singleExpression (literal (numericLiteral 0)))))) ; (expressionSequence (singleExpression (singleExpression i) < (singleExpression n))) ; (expressionSequence (singleExpression (singleExpression i) ++)) ) (statement (block { (statementList (statement (variableStatement var (variableDeclarationList (variableDeclaration result (initialiser = (singleExpression (singleExpression foo) (arguments ( (argumentList (singleExpression ! (singleExpression ( (expressionSequence (singleExpression (singleExpression i) % (singleExpression (literal (numericLiteral 100))))) )))) )))))) (eos ;))) (statement (ifStatement if ( (expressionSequence (singleExpression (singleExpression result) != (singleExpression (literal (numericLiteral 0))))) ) (statement (throwStatement throw (expressionSequence (singleExpression (singleExpression (literal "Error: bad result: ")) + (singleExpression result))) (eos ;)))))) })))))) <EOF>)